<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    <title>feature_column - LostTech.TensorFlow Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body>
  	<header><h1>LostTech.TensorFlow : API Documentation</h1>
	</header>

    <nav id="namespaces">
      <iframe src="../namespaces.htm"></iframe>
    </nav><nav id="types">
  <h2 class="fixed">Types in tensorflow.contrib.feature_column</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../tensorflow.contrib.feature_column/_SequenceNumericColumn.htm">_SequenceNumericColumn</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.feature_column/feature_column.htm" class="current">feature_column</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.feature_column/I_SequenceNumericColumn.htm">I_SequenceNumericColumn</a>
        </li>
		</ul>
	</div>
</nav>
	<article>
    <header>
		<p class="class"><strong>Type</strong> feature_column</p>
	</header>
	<section>
		<header>
		<p><strong>Namespace</strong> tensorflow.contrib.feature_column</p>
		</header>
    <div class="sub-header">
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#concatenate_context_input">concatenate_context_input</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#concatenate_context_input_dyn">concatenate_context_input_dyn</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_hash_bucket">sequence_categorical_column_with_hash_bucket</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_hash_bucket">sequence_categorical_column_with_hash_bucket</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_hash_bucket">sequence_categorical_column_with_hash_bucket</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_hash_bucket_dyn">sequence_categorical_column_with_hash_bucket_dyn</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_identity">sequence_categorical_column_with_identity</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_identity">sequence_categorical_column_with_identity</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_identity">sequence_categorical_column_with_identity</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_identity_dyn">sequence_categorical_column_with_identity_dyn</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_vocabulary_file">sequence_categorical_column_with_vocabulary_file</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_vocabulary_file">sequence_categorical_column_with_vocabulary_file</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_vocabulary_file">sequence_categorical_column_with_vocabulary_file</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_vocabulary_file_dyn">sequence_categorical_column_with_vocabulary_file_dyn</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_vocabulary_list">sequence_categorical_column_with_vocabulary_list</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_vocabulary_list">sequence_categorical_column_with_vocabulary_list</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_vocabulary_list">sequence_categorical_column_with_vocabulary_list</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_vocabulary_list_dyn">sequence_categorical_column_with_vocabulary_list_dyn</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_input_layer">sequence_input_layer</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_input_layer_dyn">sequence_input_layer_dyn</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_numeric_column">sequence_numeric_column</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_numeric_column">sequence_numeric_column</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_numeric_column_dyn">sequence_numeric_column_dyn</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#_SequenceNumericColumn_fn">_SequenceNumericColumn_fn</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#concatenate_context_input_fn">concatenate_context_input_fn</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_hash_bucket_fn">sequence_categorical_column_with_hash_bucket_fn</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_identity_fn">sequence_categorical_column_with_identity_fn</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_vocabulary_file_fn">sequence_categorical_column_with_vocabulary_file_fn</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_categorical_column_with_vocabulary_list_fn">sequence_categorical_column_with_vocabulary_list_fn</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_input_layer_fn">sequence_input_layer_fn</a></li>
				<li><a href="../tensorflow.contrib.feature_column/feature_column.htm#sequence_numeric_column_fn">sequence_numeric_column_fn</a></li>
			</ul>
		
	</div>
	
	
	<h3 class="section">Public static methods</h3>

	<div id="concatenate_context_input" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>concatenate_context_input</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> context_input, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> sequence_input)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="concatenate_context_input_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>concatenate_context_input_dyn</strong>(<span title="System.object">object</span> context_input, <span title="System.object">object</span> sequence_input)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="sequence_categorical_column_with_hash_bucket" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a> <strong>sequence_categorical_column_with_hash_bucket</strong>(<span title="System.string">string</span> key, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> hash_bucket_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A sequence of categorical terms where ids are set by hashing. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> hash_bucket_size
						</dt>
						<dd>An int > 1. The number of buckets. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>tokens = sequence_categorical_column_with_hash_bucket(
                'tokens', hash_bucket_size=1000)
            tokens_embedding = embedding_column(tokens, dimension=10)
            columns = [tokens_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_hash_bucket" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a> <strong>sequence_categorical_column_with_hash_bucket</strong>(<span title="System.string">string</span> key, <span title="System.string">string</span> hash_bucket_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A sequence of categorical terms where ids are set by hashing. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> hash_bucket_size
						</dt>
						<dd>An int > 1. The number of buckets. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>tokens = sequence_categorical_column_with_hash_bucket(
                'tokens', hash_bucket_size=1000)
            tokens_embedding = embedding_column(tokens, dimension=10)
            columns = [tokens_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_hash_bucket" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a> <strong>sequence_categorical_column_with_hash_bucket</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> hash_bucket_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A sequence of categorical terms where ids are set by hashing. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> hash_bucket_size
						</dt>
						<dd>An int > 1. The number of buckets. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>tokens = sequence_categorical_column_with_hash_bucket(
                'tokens', hash_bucket_size=1000)
            tokens_embedding = embedding_column(tokens, dimension=10)
            columns = [tokens_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_hash_bucket_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>sequence_categorical_column_with_hash_bucket_dyn</strong>(<span title="System.object">object</span> key, <span title="System.object">object</span> hash_bucket_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A sequence of categorical terms where ids are set by hashing. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> hash_bucket_size
						</dt>
						<dd>An int > 1. The number of buckets. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>tokens = sequence_categorical_column_with_hash_bucket(
                'tokens', hash_bucket_size=1000)
            tokens_embedding = embedding_column(tokens, dimension=10)
            columns = [tokens_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_identity" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a> <strong>sequence_categorical_column_with_identity</strong>(<span title="System.string">string</span> key, <span title="System.string">string</span> num_buckets, <span title="System.object">object</span> default_value)
		</h4>
		<div class="content">Returns a feature column that represents sequences of integers. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> num_buckets
						</dt>
						<dd>Range of inputs. Namely, inputs are expected to be in the
range `[0, num_buckets)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> default_value
						</dt>
						<dd>If `None`, this column's graph operations will fail for
out-of-range inputs. Otherwise, this value must be in the range
`[0, num_buckets)`, and will replace out-of-range inputs. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>watches = sequence_categorical_column_with_identity(
                'watches', num_buckets=1000)
            watches_embedding = embedding_column(watches, dimension=10)
            columns = [watches_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_identity" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a> <strong>sequence_categorical_column_with_identity</strong>(<span title="System.string">string</span> key, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> num_buckets, <span title="System.object">object</span> default_value)
		</h4>
		<div class="content">Returns a feature column that represents sequences of integers. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> num_buckets
						</dt>
						<dd>Range of inputs. Namely, inputs are expected to be in the
range `[0, num_buckets)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> default_value
						</dt>
						<dd>If `None`, this column's graph operations will fail for
out-of-range inputs. Otherwise, this value must be in the range
`[0, num_buckets)`, and will replace out-of-range inputs. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>watches = sequence_categorical_column_with_identity(
                'watches', num_buckets=1000)
            watches_embedding = embedding_column(watches, dimension=10)
            columns = [watches_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_identity" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a> <strong>sequence_categorical_column_with_identity</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> num_buckets, <span title="System.object">object</span> default_value)
		</h4>
		<div class="content">Returns a feature column that represents sequences of integers. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_buckets
						</dt>
						<dd>Range of inputs. Namely, inputs are expected to be in the
range `[0, num_buckets)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> default_value
						</dt>
						<dd>If `None`, this column's graph operations will fail for
out-of-range inputs. Otherwise, this value must be in the range
`[0, num_buckets)`, and will replace out-of-range inputs. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>watches = sequence_categorical_column_with_identity(
                'watches', num_buckets=1000)
            watches_embedding = embedding_column(watches, dimension=10)
            columns = [watches_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_identity_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>sequence_categorical_column_with_identity_dyn</strong>(<span title="System.object">object</span> key, <span title="System.object">object</span> num_buckets, <span title="System.object">object</span> default_value)
		</h4>
		<div class="content">Returns a feature column that represents sequences of integers. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> num_buckets
						</dt>
						<dd>Range of inputs. Namely, inputs are expected to be in the
range `[0, num_buckets)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> default_value
						</dt>
						<dd>If `None`, this column's graph operations will fail for
out-of-range inputs. Otherwise, this value must be in the range
`[0, num_buckets)`, and will replace out-of-range inputs. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>watches = sequence_categorical_column_with_identity(
                'watches', num_buckets=1000)
            watches_embedding = embedding_column(watches, dimension=10)
            columns = [watches_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_vocabulary_file" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a> <strong>sequence_categorical_column_with_vocabulary_file</strong>(<span title="System.string">string</span> key, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> vocabulary_file, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> vocabulary_size, <span title="System.int">int</span> num_oov_buckets, <span title="System.object">object</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A sequence of categorical terms where ids use a vocabulary file. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> vocabulary_file
						</dt>
						<dd>The vocabulary file name. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> vocabulary_size
						</dt>
						<dd>Number of the elements in the vocabulary. This must be no
greater than length of `vocabulary_file`, if less than length, later
values are ignored. If None, it is set to the length of `vocabulary_file`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of
the input value. A positive `num_oov_buckets` can not be specified with
`default_value`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>states = sequence_categorical_column_with_vocabulary_file(
                key='states', vocabulary_file='/us/states.txt', vocabulary_size=50,
                num_oov_buckets=5)
            states_embedding = embedding_column(states, dimension=10)
            columns = [states_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_vocabulary_file" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a> <strong>sequence_categorical_column_with_vocabulary_file</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> vocabulary_file, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> vocabulary_size, <span title="System.int">int</span> num_oov_buckets, <span title="System.object">object</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A sequence of categorical terms where ids use a vocabulary file. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> vocabulary_file
						</dt>
						<dd>The vocabulary file name. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> vocabulary_size
						</dt>
						<dd>Number of the elements in the vocabulary. This must be no
greater than length of `vocabulary_file`, if less than length, later
values are ignored. If None, it is set to the length of `vocabulary_file`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of
the input value. A positive `num_oov_buckets` can not be specified with
`default_value`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>states = sequence_categorical_column_with_vocabulary_file(
                key='states', vocabulary_file='/us/states.txt', vocabulary_size=50,
                num_oov_buckets=5)
            states_embedding = embedding_column(states, dimension=10)
            columns = [states_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_vocabulary_file" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a> <strong>sequence_categorical_column_with_vocabulary_file</strong>(<span title="System.string">string</span> key, <span title="System.string">string</span> vocabulary_file, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> vocabulary_size, <span title="System.int">int</span> num_oov_buckets, <span title="System.object">object</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A sequence of categorical terms where ids use a vocabulary file. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> vocabulary_file
						</dt>
						<dd>The vocabulary file name. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> vocabulary_size
						</dt>
						<dd>Number of the elements in the vocabulary. This must be no
greater than length of `vocabulary_file`, if less than length, later
values are ignored. If None, it is set to the length of `vocabulary_file`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of
the input value. A positive `num_oov_buckets` can not be specified with
`default_value`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>states = sequence_categorical_column_with_vocabulary_file(
                key='states', vocabulary_file='/us/states.txt', vocabulary_size=50,
                num_oov_buckets=5)
            states_embedding = embedding_column(states, dimension=10)
            columns = [states_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_vocabulary_file_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>sequence_categorical_column_with_vocabulary_file_dyn</strong>(<span title="System.object">object</span> key, <span title="System.object">object</span> vocabulary_file, <span title="System.object">object</span> vocabulary_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> num_oov_buckets, <span title="System.object">object</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A sequence of categorical terms where ids use a vocabulary file. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> vocabulary_file
						</dt>
						<dd>The vocabulary file name. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> vocabulary_size
						</dt>
						<dd>Number of the elements in the vocabulary. This must be no
greater than length of `vocabulary_file`, if less than length, later
values are ignored. If None, it is set to the length of `vocabulary_file`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of
the input value. A positive `num_oov_buckets` can not be specified with
`default_value`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>states = sequence_categorical_column_with_vocabulary_file(
                key='states', vocabulary_file='/us/states.txt', vocabulary_size=50,
                num_oov_buckets=5)
            states_embedding = embedding_column(states, dimension=10)
            columns = [states_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_vocabulary_list" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a> <strong>sequence_categorical_column_with_vocabulary_list</strong>(<span title="System.string">string</span> key, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> vocabulary_list, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.int">int</span> default_value, <span title="System.int">int</span> num_oov_buckets)
		</h4>
		<div class="content">A sequence of categorical terms where ids use an in-memory list. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> vocabulary_list
						</dt>
						<dd>An ordered iterable defining the vocabulary. Each feature
is mapped to the index of its value (if present) in `vocabulary_list`.
Must be castable to `dtype`. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported.
If `None`, it will be inferred from `vocabulary_list`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a
hash of the input value. A positive `num_oov_buckets` can not be specified
with `default_value`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>colors = sequence_categorical_column_with_vocabulary_list(
                key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),
                num_oov_buckets=2)
            colors_embedding = embedding_column(colors, dimension=3)
            columns = [colors_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_vocabulary_list" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a> <strong>sequence_categorical_column_with_vocabulary_list</strong>(<span title="System.string">string</span> key, <span title="System.string">string</span> vocabulary_list, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.int">int</span> default_value, <span title="System.int">int</span> num_oov_buckets)
		</h4>
		<div class="content">A sequence of categorical terms where ids use an in-memory list. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> vocabulary_list
						</dt>
						<dd>An ordered iterable defining the vocabulary. Each feature
is mapped to the index of its value (if present) in `vocabulary_list`.
Must be castable to `dtype`. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported.
If `None`, it will be inferred from `vocabulary_list`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a
hash of the input value. A positive `num_oov_buckets` can not be specified
with `default_value`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>colors = sequence_categorical_column_with_vocabulary_list(
                key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),
                num_oov_buckets=2)
            colors_embedding = embedding_column(colors, dimension=3)
            columns = [colors_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_vocabulary_list" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a> <strong>sequence_categorical_column_with_vocabulary_list</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> vocabulary_list, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.int">int</span> default_value, <span title="System.int">int</span> num_oov_buckets)
		</h4>
		<div class="content">A sequence of categorical terms where ids use an in-memory list. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> vocabulary_list
						</dt>
						<dd>An ordered iterable defining the vocabulary. Each feature
is mapped to the index of its value (if present) in `vocabulary_list`.
Must be castable to `dtype`. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported.
If `None`, it will be inferred from `vocabulary_list`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a
hash of the input value. A positive `num_oov_buckets` can not be specified
with `default_value`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column/_SequenceCategoricalColumn.htm">_SequenceCategoricalColumn</a></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>colors = sequence_categorical_column_with_vocabulary_list(
                key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),
                num_oov_buckets=2)
            colors_embedding = embedding_column(colors, dimension=3)
            columns = [colors_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_categorical_column_with_vocabulary_list_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>sequence_categorical_column_with_vocabulary_list_dyn</strong>(<span title="System.object">object</span> key, <span title="System.object">object</span> vocabulary_list, <span title="System.object">object</span> dtype, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> num_oov_buckets)
		</h4>
		<div class="content">A sequence of categorical terms where ids use an in-memory list. <p></p> Pass this to `embedding_column` or `indicator_column` to convert sequence
categorical data into dense representation for input to sequence NN, such as
RNN. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> vocabulary_list
						</dt>
						<dd>An ordered iterable defining the vocabulary. Each feature
is mapped to the index of its value (if present) in `vocabulary_list`.
Must be castable to `dtype`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported.
If `None`, it will be inferred from `vocabulary_list`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a
hash of the input value. A positive `num_oov_buckets` can not be specified
with `default_value`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `SequenceCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>colors = sequence_categorical_column_with_vocabulary_list(
                key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),
                num_oov_buckets=2)
            colors_embedding = embedding_column(colors, dimension=3)
            columns = [colors_embedding] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_input_layer" class="method">
		<h4>
			<span title="System.ValueTuple<Tensor, object>">ValueTuple&lt;Tensor, object&gt;</span> <strong>sequence_input_layer</strong>(<span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> features, <span title="System.Collections.Generic.IEnumerable<_EmbeddingColumn>">IEnumerable&lt;_EmbeddingColumn&gt;</span> feature_columns, <span title="System.object">object</span> weight_collections, <span title="System.bool">bool</span> trainable)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="sequence_input_layer_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>sequence_input_layer_dyn</strong>(<span title="System.object">object</span> features, <span title="System.object">object</span> feature_columns, <span title="System.object">object</span> weight_collections, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> trainable)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="sequence_numeric_column" class="method">
		<h4>
			<a href="../tensorflow.contrib.feature_column/_SequenceNumericColumn.htm">_SequenceNumericColumn</a> <strong>sequence_numeric_column</strong>(<span title="System.string">string</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Returns a feature column that represents sequences of numeric data. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input features. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>The shape of the input data per sequence id. E.g. if `shape=(2,)`,
each example must contain `2 * sequence_length` values. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` that is used for
padding the sparse data into a dense `Tensor`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of values. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.contrib.feature_column/_SequenceNumericColumn.htm">_SequenceNumericColumn</a></code>
					</dt>
					<dd>A `SequenceNumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>temperature = sequence_numeric_column('temperature')
            columns = [temperature] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_numeric_column" class="method">
		<h4>
			<a href="../tensorflow.contrib.feature_column/_SequenceNumericColumn.htm">_SequenceNumericColumn</a> <strong>sequence_numeric_column</strong>(<span title="System.string">string</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> normalizer_fn)
		</h4>
		<div class="content">Returns a feature column that represents sequences of numeric data. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input features. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>The shape of the input data per sequence id. E.g. if `shape=(2,)`,
each example must contain `2 * sequence_length` values. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` that is used for
padding the sparse data into a dense `Tensor`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of values. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.contrib.feature_column/_SequenceNumericColumn.htm">_SequenceNumericColumn</a></code>
					</dt>
					<dd>A `SequenceNumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>temperature = sequence_numeric_column('temperature')
            columns = [temperature] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_numeric_column_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>sequence_numeric_column_dyn</strong>(<span title="System.object">object</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.object">object</span> normalizer_fn)
		</h4>
		<div class="content">Returns a feature column that represents sequences of numeric data. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input features. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>The shape of the input data per sequence id. E.g. if `shape=(2,)`,
each example must contain `2 * sequence_length` values. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` that is used for
padding the sparse data into a dense `Tensor`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of values. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `SequenceNumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>temperature = sequence_numeric_column('temperature')
            columns = [temperature] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	
	<h3 class="section">Public properties</h3>

	<div id="_SequenceNumericColumn_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>_SequenceNumericColumn_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="concatenate_context_input_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>concatenate_context_input_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sequence_categorical_column_with_hash_bucket_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>sequence_categorical_column_with_hash_bucket_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sequence_categorical_column_with_identity_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>sequence_categorical_column_with_identity_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sequence_categorical_column_with_vocabulary_file_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>sequence_categorical_column_with_vocabulary_file_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sequence_categorical_column_with_vocabulary_list_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>sequence_categorical_column_with_vocabulary_list_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sequence_input_layer_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>sequence_input_layer_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sequence_numeric_column_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>sequence_numeric_column_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	</section>
	</article><footer>
	<span id="version">Built from v1.15.0.0 of LostTech.TensorFlow</span>
	<span id="docu-link">
		Generated by <a href="http://docu.jagregory.com">docu</a>
	</span>
</footer>
  </body>
</html>