<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    <title>LinearOperator - LostTech.TensorFlow Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body>
  	<header><h1>LostTech.TensorFlow : API Documentation</h1>
	</header>

    <nav id="namespaces">
      <iframe src="../namespaces.htm"></iframe>
    </nav><nav id="types">
  <h2 class="fixed">Types in tensorflow.linalg</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../tensorflow.linalg/ILinearOperator.htm">ILinearOperator</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorAdjoint.htm">ILinearOperatorAdjoint</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorBlockDiag.htm">ILinearOperatorBlockDiag</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorCirculant.htm">ILinearOperatorCirculant</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorCirculant2D.htm">ILinearOperatorCirculant2D</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorCirculant3D.htm">ILinearOperatorCirculant3D</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorComposition.htm">ILinearOperatorComposition</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorDiag.htm">ILinearOperatorDiag</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorFullMatrix.htm">ILinearOperatorFullMatrix</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorHouseholder.htm">ILinearOperatorHouseholder</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorIdentity.htm">ILinearOperatorIdentity</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorInversion.htm">ILinearOperatorInversion</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorKronecker.htm">ILinearOperatorKronecker</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorLowerTriangular.htm">ILinearOperatorLowerTriangular</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorLowRankUpdate.htm">ILinearOperatorLowRankUpdate</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorScaledIdentity.htm">ILinearOperatorScaledIdentity</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorToeplitz.htm">ILinearOperatorToeplitz</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorZeros.htm">ILinearOperatorZeros</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/linalg.htm">linalg</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperator.htm" class="current">LinearOperator</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorAdjoint.htm">LinearOperatorAdjoint</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorBlockDiag.htm">LinearOperatorBlockDiag</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorCirculant.htm">LinearOperatorCirculant</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorCirculant2D.htm">LinearOperatorCirculant2D</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorCirculant3D.htm">LinearOperatorCirculant3D</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorComposition.htm">LinearOperatorComposition</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorDiag.htm">LinearOperatorDiag</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorFullMatrix.htm">LinearOperatorFullMatrix</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorHouseholder.htm">LinearOperatorHouseholder</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorIdentity.htm">LinearOperatorIdentity</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorInversion.htm">LinearOperatorInversion</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorKronecker.htm">LinearOperatorKronecker</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorLowerTriangular.htm">LinearOperatorLowerTriangular</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorLowRankUpdate.htm">LinearOperatorLowRankUpdate</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorScaledIdentity.htm">LinearOperatorScaledIdentity</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorToeplitz.htm">LinearOperatorToeplitz</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorZeros.htm">LinearOperatorZeros</a>
        </li>
		</ul>
	</div>
</nav>
	<article>
    <header>
		<p class="class"><strong>Type</strong> LinearOperator</p>
	</header>
	<section>
		<header>
		<p><strong>Namespace</strong> tensorflow.linalg</p>
		<p><strong>Parent</strong> <a href="../tensorflow/Module.htm">Module</a></p>
		<p><strong>Interfaces</strong> <a href="../tensorflow.linalg/ILinearOperator.htm">ILinearOperator</a></p>
		</header>
    <div class="sub-header">
			<div id="summary">Base class defining a [batch of] linear operator[s]. <p></p> Subclasses of `LinearOperator` provide access to common methods on a
(batch) matrix, without the need to materialize the matrix.  This allows: <p></p> * Matrix free computations
* Operators that take advantage of special structure, while providing a
consistent API to users. <p></p> #### Subclassing <p></p> To enable a public method, subclasses should implement the leading-underscore
version of the method.  The argument signature should be identical except for
the omission of `name="..."`.  For example, to enable
`matmul(x, adjoint=False, name="matmul")` a subclass should implement
`_matmul(x, adjoint=False)`. <p></p> #### Performance contract <p></p> Subclasses should only implement the assert methods
(e.g. `assert_non_singular`) if they can be done in less than `O(N^3)`
time. <p></p> Class docstrings should contain an explanation of computational complexity.
Since this is a high-performance library, attention should be paid to detail,
and explanations can include constants as well as Big-O notation. <p></p> #### Shape compatibility <p></p> `LinearOperator` subclasses should operate on a [batch] matrix with
compatible shape.  Class docstrings should define what is meant by compatible
shape.  Some subclasses may not support batching. <p></p> Examples: <p></p> `x` is a batch matrix with compatible shape for `matmul` if <p></p> ```
operator.shape = [B1,...,Bb] + [M, N],  b >= 0,
x.shape =   [B1,...,Bb] + [N, R]
``` <p></p> `rhs` is a batch matrix with compatible shape for `solve` if <p></p> ```
operator.shape = [B1,...,Bb] + [M, N],  b >= 0,
rhs.shape =   [B1,...,Bb] + [M, R]
``` <p></p> #### Example docstring for subclasses. <p></p> This operator acts like a (batch) matrix `A` with shape
`[B1,...,Bb, M, N]` for some `b >= 0`.  The first `b` indices index a
batch member.  For every batch index `(i1,...,ib)`, `A[i1,...,ib, : :]` is
an `m x n` matrix.  Again, this matrix `A` may not be materialized, but for
purposes of identifying and working with compatible arguments the shape is
relevant. <p></p> Examples:
#### Shape compatibility <p></p> This operator acts on batch matrices with compatible shape.
FILL IN WHAT IS MEANT BY COMPATIBLE SHAPE <p></p> #### Performance <p></p> FILL THIS IN <p></p> #### Matrix property hints <p></p> This `LinearOperator` is initialized with boolean flags of the form `is_X`,
for `X = non_singular, self_adjoint, positive_definite, square`.
These have the following meaning: <p></p> * If `is_X == True`, callers should expect the operator to have the
property `X`.  This is a promise that should be fulfilled, but is *not* a
runtime assert.  For example, finite floating point precision may result
in these promises being violated.
* If `is_X == False`, callers should expect the operator to not have `X`.
* If `is_X == None` (the default), callers should have no expectation either
way. <div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>some_tensor =... shape = ????
            operator = MyLinOp(some_tensor) <p></p> operator.shape()
==> [2, 4, 4] <p></p> operator.log_abs_determinant()
==> Shape [2] Tensor <p></p> x =... Shape [2, 4, 5] Tensor <p></p> operator.matmul(x)
==> Shape [2, 4, 5] Tensor </pre>
</div>
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#assert_non_singular">assert_non_singular</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#assert_non_singular_dyn">assert_non_singular_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#assert_positive_definite">assert_positive_definite</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#assert_positive_definite_dyn">assert_positive_definite_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#assert_self_adjoint">assert_self_adjoint</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#assert_self_adjoint_dyn">assert_self_adjoint_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#batch_shape_tensor">batch_shape_tensor</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#batch_shape_tensor_dyn">batch_shape_tensor_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#domain_dimension_tensor">domain_dimension_tensor</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#domain_dimension_tensor_dyn">domain_dimension_tensor_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#matmul">matmul</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#range_dimension_tensor">range_dimension_tensor</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#range_dimension_tensor_dyn">range_dimension_tensor_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#shape_tensor">shape_tensor</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#shape_tensor_dyn">shape_tensor_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#tensor_rank_tensor">tensor_rank_tensor</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#tensor_rank_tensor_dyn">tensor_rank_tensor_dyn</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#batch_shape">batch_shape</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#batch_shape_dyn">batch_shape_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#domain_dimension">domain_dimension</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#domain_dimension_dyn">domain_dimension_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#dtype">dtype</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#dtype_dyn">dtype_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#graph_parents">graph_parents</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#graph_parents_dyn">graph_parents_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#H">H</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#H_dyn">H_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#is_non_singular">is_non_singular</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#is_non_singular_dyn">is_non_singular_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#is_positive_definite">is_positive_definite</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#is_positive_definite_dyn">is_positive_definite_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#is_self_adjoint">is_self_adjoint</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#is_self_adjoint_dyn">is_self_adjoint_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#is_square">is_square</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#is_square_dyn">is_square_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#name">name</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#name_dyn">name_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#name_scope">name_scope</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#name_scope_dyn">name_scope_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#PythonObject">PythonObject</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#range_dimension">range_dimension</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#range_dimension_dyn">range_dimension_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#shape">shape</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#shape_dyn">shape_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#submodules">submodules</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#submodules_dyn">submodules_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#tensor_rank">tensor_rank</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#tensor_rank_dyn">tensor_rank_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#trainable_variables">trainable_variables</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#trainable_variables_dyn">trainable_variables_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#variables">variables</a></li>
				<li><a href="../tensorflow.linalg/LinearOperator.htm#variables_dyn">variables_dyn</a></li>
			</ul>
		
	</div>
	
	<h3 class="section">Public instance methods</h3>

	<div id="assert_non_singular" class="method">
		<h4>
			<span title="System.object">object</span> <strong>assert_non_singular</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Returns an `Op` that asserts this operator is non singular. <p></p> This operator is considered non-singular if <p></p> ```
ConditionNumber < max{100, range_dimension, domain_dimension} * eps,
eps := np.finfo(self.dtype.as_numpy_dtype).eps
``` 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A string name to prepend to created ops. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>An `Assert` `Op`, that, when run, will raise an `InvalidArgumentError` if
the operator is singular. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="assert_non_singular_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>assert_non_singular_dyn</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> name)
		</h4>
		<div class="content">Returns an `Op` that asserts this operator is non singular. <p></p> This operator is considered non-singular if <p></p> ```
ConditionNumber < max{100, range_dimension, domain_dimension} * eps,
eps := np.finfo(self.dtype.as_numpy_dtype).eps
``` 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> name
						</dt>
						<dd>A string name to prepend to created ops. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>An `Assert` `Op`, that, when run, will raise an `InvalidArgumentError` if
the operator is singular. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="assert_positive_definite" class="method">
		<h4>
			<span title="System.object">object</span> <strong>assert_positive_definite</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Returns an `Op` that asserts this operator is positive definite. <p></p> Here, positive definite means that the quadratic form `x^H A x` has positive
real part for all nonzero `x`.  Note that we do not require the operator to
be self-adjoint to be positive definite. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name to give this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>An `Assert` `Op`, that, when run, will raise an `InvalidArgumentError` if
the operator is not positive definite. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="assert_positive_definite_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>assert_positive_definite_dyn</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> name)
		</h4>
		<div class="content">Returns an `Op` that asserts this operator is positive definite. <p></p> Here, positive definite means that the quadratic form `x^H A x` has positive
real part for all nonzero `x`.  Note that we do not require the operator to
be self-adjoint to be positive definite. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> name
						</dt>
						<dd>A name to give this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>An `Assert` `Op`, that, when run, will raise an `InvalidArgumentError` if
the operator is not positive definite. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="assert_self_adjoint" class="method">
		<h4>
			<span title="System.object">object</span> <strong>assert_self_adjoint</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Returns an `Op` that asserts this operator is self-adjoint. <p></p> Here we check that this operator is *exactly* equal to its hermitian
transpose. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A string name to prepend to created ops. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>An `Assert` `Op`, that, when run, will raise an `InvalidArgumentError` if
the operator is not self-adjoint. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="assert_self_adjoint_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>assert_self_adjoint_dyn</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> name)
		</h4>
		<div class="content">Returns an `Op` that asserts this operator is self-adjoint. <p></p> Here we check that this operator is *exactly* equal to its hermitian
transpose. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> name
						</dt>
						<dd>A string name to prepend to created ops. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>An `Assert` `Op`, that, when run, will raise an `InvalidArgumentError` if
the operator is not self-adjoint. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="batch_shape_tensor" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>batch_shape_tensor</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Shape of batch dimensions of this operator, determined at runtime. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns a `Tensor` holding
`[B1,...,Bb]`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>`int32` `Tensor` 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="batch_shape_tensor_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>batch_shape_tensor_dyn</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> name)
		</h4>
		<div class="content">Shape of batch dimensions of this operator, determined at runtime. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns a `Tensor` holding
`[B1,...,Bb]`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> name
						</dt>
						<dd>A name for this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>`int32` `Tensor` 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="domain_dimension_tensor" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>domain_dimension_tensor</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Dimension (in the sense of vector spaces) of the domain of this operator. <p></p> Determined at runtime. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns `N`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>`int32` `Tensor` 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="domain_dimension_tensor_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>domain_dimension_tensor_dyn</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> name)
		</h4>
		<div class="content">Dimension (in the sense of vector spaces) of the domain of this operator. <p></p> Determined at runtime. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns `N`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> name
						</dt>
						<dd>A name for this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>`int32` `Tensor` 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="matmul" class="method">
		<h4>
			<span title="System.object">object</span> <strong>matmul</strong>(<span title="System.object">object</span> x, <span title="System.bool">bool</span> adjoint, <span title="System.bool">bool</span> adjoint_arg, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Transform [batch] matrix `x` with left multiplication:  `x --> Ax`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>`LinearOperator` or `Tensor` with compatible shape and same `dtype` as
`self`. See class docstring for definition of compatibility. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> adjoint
						</dt>
						<dd>Python `bool`.  If `True`, left multiply by the adjoint: `A^H x`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> adjoint_arg
						</dt>
						<dd>Python `bool`.  If `True`, compute `A x^H` where `x^H` is
the hermitian transpose (transposition and complex conjugation). 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `LinearOperator` or `Tensor` with shape `[..., M, R]` and same `dtype`
as `self`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># Make an operator acting like batch matrix A.  Assume A.shape = [..., M, N]
            operator = LinearOperator(...)
            operator.shape = [..., M, N] <p></p> X =... # shape [..., N, R], batch matrix, R > 0. <p></p> Y = operator.matmul(X)
Y.shape
==> [..., M, R] <p></p> Y[..., :, r] = sum_j A[..., :, j] X[j, r] </pre>
</div>
		</div>
	</div>
	<div id="range_dimension_tensor" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>range_dimension_tensor</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Dimension (in the sense of vector spaces) of the range of this operator. <p></p> Determined at runtime. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns `M`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>`int32` `Tensor` 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="range_dimension_tensor_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>range_dimension_tensor_dyn</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> name)
		</h4>
		<div class="content">Dimension (in the sense of vector spaces) of the range of this operator. <p></p> Determined at runtime. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns `M`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> name
						</dt>
						<dd>A name for this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>`int32` `Tensor` 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="shape_tensor" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>shape_tensor</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Shape of this `LinearOperator`, determined at runtime. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns a `Tensor` holding
`[B1,...,Bb, M, N]`, equivalent to `tf.shape(A)`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>`int32` `Tensor` 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="shape_tensor_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>shape_tensor_dyn</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> name)
		</h4>
		<div class="content">Shape of this `LinearOperator`, determined at runtime. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns a `Tensor` holding
`[B1,...,Bb, M, N]`, equivalent to `tf.shape(A)`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> name
						</dt>
						<dd>A name for this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>`int32` `Tensor` 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="tensor_rank_tensor" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>tensor_rank_tensor</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Rank (in the sense of tensors) of matrix corresponding to this operator. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns `b + 2`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>`int32` `Tensor`, determined at runtime. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="tensor_rank_tensor_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>tensor_rank_tensor_dyn</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> name)
		</h4>
		<div class="content">Rank (in the sense of tensors) of matrix corresponding to this operator. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns `b + 2`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> name
						</dt>
						<dd>A name for this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>`int32` `Tensor`, determined at runtime. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	
	
	<h3 class="section">Public properties</h3>

	<div id="batch_shape" class="method">
		<h4>
			<span title="System.object">object</span> <strong>batch_shape</strong> get; 
		</h4>
		<div class="content">`TensorShape` of batch dimensions of this `LinearOperator`. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns
`TensorShape([B1,...,Bb])`, equivalent to `A.shape[:-2]` 

		</div>
	</div>
	<div id="batch_shape_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>batch_shape_dyn</strong> get; 
		</h4>
		<div class="content">`TensorShape` of batch dimensions of this `LinearOperator`. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns
`TensorShape([B1,...,Bb])`, equivalent to `A.shape[:-2]` 

		</div>
	</div>
	<div id="domain_dimension" class="method">
		<h4>
			<a href="../tensorflow/Dimension.htm">Dimension</a> <strong>domain_dimension</strong> get; 
		</h4>
		<div class="content">Dimension (in the sense of vector spaces) of the domain of this operator. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns `N`. 

		</div>
	</div>
	<div id="domain_dimension_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>domain_dimension_dyn</strong> get; 
		</h4>
		<div class="content">Dimension (in the sense of vector spaces) of the domain of this operator. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns `N`. 

		</div>
	</div>
	<div id="dtype" class="method">
		<h4>
			<span title="System.object">object</span> <strong>dtype</strong> get; 
		</h4>
		<div class="content">The `DType` of `Tensor`s handled by this `LinearOperator`. 

		</div>
	</div>
	<div id="dtype_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>dtype_dyn</strong> get; 
		</h4>
		<div class="content">The `DType` of `Tensor`s handled by this `LinearOperator`. 

		</div>
	</div>
	<div id="graph_parents" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>graph_parents</strong> get; 
		</h4>
		<div class="content">List of graph dependencies of this `LinearOperator`. 

		</div>
	</div>
	<div id="graph_parents_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>graph_parents_dyn</strong> get; 
		</h4>
		<div class="content">List of graph dependencies of this `LinearOperator`. 

		</div>
	</div>
	<div id="H" class="method">
		<h4>
			<span title="System.Reflection.PropertyInfo">PropertyInfo</span> <strong>H</strong> get; set;
		</h4>
		<div class="content">Returns the adjoint of the current `LinearOperator`. <p></p> Given `A` representing this `LinearOperator`, return `A*`.
Note that calling `self.adjoint()` and `self.H` are equivalent. 

		</div>
	</div>
	<div id="H_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>H_dyn</strong> get; set;
		</h4>
		<div class="content">Returns the adjoint of the current `LinearOperator`. <p></p> Given `A` representing this `LinearOperator`, return `A*`.
Note that calling `self.adjoint()` and `self.H` are equivalent. 

		</div>
	</div>
	<div id="is_non_singular" class="method">
		<h4>
			<span title="System.Nullable<bool>">Nullable&lt;bool&gt;</span> <strong>is_non_singular</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_non_singular_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_non_singular_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_positive_definite" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_positive_definite</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_positive_definite_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_positive_definite_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_self_adjoint" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_self_adjoint</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_self_adjoint_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_self_adjoint_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_square" class="method">
		<h4>
			<span title="System.Nullable<bool>">Nullable&lt;bool&gt;</span> <strong>is_square</strong> get; 
		</h4>
		<div class="content">Return `True/False` depending on if this operator is square. 

		</div>
	</div>
	<div id="is_square_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_square_dyn</strong> get; 
		</h4>
		<div class="content">Return `True/False` depending on if this operator is square. 

		</div>
	</div>
	<div id="name" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name</strong> get; 
		</h4>
		<div class="content">Name prepended to all ops created by this `LinearOperator`. 

		</div>
	</div>
	<div id="name_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name_dyn</strong> get; 
		</h4>
		<div class="content">Name prepended to all ops created by this `LinearOperator`. 

		</div>
	</div>
	<div id="name_scope" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name_scope</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="name_scope_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name_scope_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="PythonObject" class="method">
		<h4>
			<span title="System.object">object</span> <strong>PythonObject</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="range_dimension" class="method">
		<h4>
			<a href="../tensorflow/Dimension.htm">Dimension</a> <strong>range_dimension</strong> get; 
		</h4>
		<div class="content">Dimension (in the sense of vector spaces) of the range of this operator. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns `M`. 

		</div>
	</div>
	<div id="range_dimension_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>range_dimension_dyn</strong> get; 
		</h4>
		<div class="content">Dimension (in the sense of vector spaces) of the range of this operator. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns `M`. 

		</div>
	</div>
	<div id="shape" class="method">
		<h4>
			<a href="../tensorflow/TensorShape.htm">TensorShape</a> <strong>shape</strong> get; 
		</h4>
		<div class="content">`TensorShape` of this `LinearOperator`. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns
`TensorShape([B1,...,Bb, M, N])`, equivalent to `A.shape`. 

		</div>
	</div>
	<div id="shape_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>shape_dyn</strong> get; 
		</h4>
		<div class="content">`TensorShape` of this `LinearOperator`. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns
`TensorShape([B1,...,Bb, M, N])`, equivalent to `A.shape`. 

		</div>
	</div>
	<div id="submodules" class="method">
		<h4>
			<span title="System.ValueTuple<object>">ValueTuple&lt;object&gt;</span> <strong>submodules</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="submodules_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>submodules_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="tensor_rank" class="method">
		<h4>
			<span title="System.Nullable<int>">Nullable&lt;int&gt;</span> <strong>tensor_rank</strong> get; 
		</h4>
		<div class="content">Rank (in the sense of tensors) of matrix corresponding to this operator. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns `b + 2`. 

		</div>
	</div>
	<div id="tensor_rank_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>tensor_rank_dyn</strong> get; 
		</h4>
		<div class="content">Rank (in the sense of tensors) of matrix corresponding to this operator. <p></p> If this operator acts like the batch matrix `A` with
`A.shape = [B1,...,Bb, M, N]`, then this returns `b + 2`. 

		</div>
	</div>
	<div id="trainable_variables" class="method">
		<h4>
			<span title="System.object">object</span> <strong>trainable_variables</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable_variables_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>trainable_variables_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="variables" class="method">
		<h4>
			<span title="System.object">object</span> <strong>variables</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="variables_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>variables_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	</section>
	</article><footer>
	<span id="version">Built from v1.15.0.0 of LostTech.TensorFlow</span>
	<span id="docu-link">
		Generated by <a href="http://docu.jagregory.com">docu</a>
	</span>
</footer>
  </body>
</html>