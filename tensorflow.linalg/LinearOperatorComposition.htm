<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    <title>LinearOperatorComposition - LostTech.TensorFlow Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body>
  	<header><h1>LostTech.TensorFlow : API Documentation</h1>
	</header>

    <nav id="namespaces">
      <iframe src="../namespaces.htm"></iframe>
    </nav><nav id="types">
  <h2 class="fixed">Types in tensorflow.linalg</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../tensorflow.linalg/ILinearOperator.htm">ILinearOperator</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorAdjoint.htm">ILinearOperatorAdjoint</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorBlockDiag.htm">ILinearOperatorBlockDiag</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorCirculant.htm">ILinearOperatorCirculant</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorCirculant2D.htm">ILinearOperatorCirculant2D</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorCirculant3D.htm">ILinearOperatorCirculant3D</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorComposition.htm">ILinearOperatorComposition</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorDiag.htm">ILinearOperatorDiag</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorFullMatrix.htm">ILinearOperatorFullMatrix</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorHouseholder.htm">ILinearOperatorHouseholder</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorIdentity.htm">ILinearOperatorIdentity</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorInversion.htm">ILinearOperatorInversion</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorKronecker.htm">ILinearOperatorKronecker</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorLowerTriangular.htm">ILinearOperatorLowerTriangular</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorLowRankUpdate.htm">ILinearOperatorLowRankUpdate</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorScaledIdentity.htm">ILinearOperatorScaledIdentity</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorToeplitz.htm">ILinearOperatorToeplitz</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/ILinearOperatorZeros.htm">ILinearOperatorZeros</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/linalg.htm">linalg</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperator.htm">LinearOperator</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorAdjoint.htm">LinearOperatorAdjoint</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorBlockDiag.htm">LinearOperatorBlockDiag</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorCirculant.htm">LinearOperatorCirculant</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorCirculant2D.htm">LinearOperatorCirculant2D</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorCirculant3D.htm">LinearOperatorCirculant3D</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorComposition.htm" class="current">LinearOperatorComposition</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorDiag.htm">LinearOperatorDiag</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorFullMatrix.htm">LinearOperatorFullMatrix</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorHouseholder.htm">LinearOperatorHouseholder</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorIdentity.htm">LinearOperatorIdentity</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorInversion.htm">LinearOperatorInversion</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorKronecker.htm">LinearOperatorKronecker</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorLowerTriangular.htm">LinearOperatorLowerTriangular</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorLowRankUpdate.htm">LinearOperatorLowRankUpdate</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorScaledIdentity.htm">LinearOperatorScaledIdentity</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorToeplitz.htm">LinearOperatorToeplitz</a>
        </li>
				<li>
            <a href="../tensorflow.linalg/LinearOperatorZeros.htm">LinearOperatorZeros</a>
        </li>
		</ul>
	</div>
</nav>
	<article>
    <header>
		<p class="class"><strong>Type</strong> LinearOperatorComposition</p>
	</header>
	<section>
		<header>
		<p><strong>Namespace</strong> tensorflow.linalg</p>
		<p><strong>Parent</strong> <a href="../tensorflow.linalg/LinearOperator.htm">LinearOperator</a></p>
		<p><strong>Interfaces</strong> <a href="../tensorflow.linalg/ILinearOperatorComposition.htm">ILinearOperatorComposition</a></p>
		</header>
    <div class="sub-header">
			<div id="summary">Composes one or more `LinearOperators`. <p></p> This operator composes one or more linear operators `[op1,...,opJ]`,
building a new `LinearOperator` with action defined by: <p></p> ```
op_composed(x) := op1(op2(...(opJ(x)...))
``` <p></p> If `opj` acts like [batch] matrix `Aj`, then `op_composed` acts like the
[batch] matrix formed with the multiplication `A1 A2...AJ`. <p></p> If `opj` has shape `batch_shape_j + [M_j, N_j]`, then we must have
`N_j = M_{j+1}`, in which case the composed operator has shape equal to
`broadcast_batch_shape + [M_1, N_J]`, where `broadcast_batch_shape` is the
mutual broadcast of `batch_shape_j`, `j = 1,...,J`, assuming the intermediate
batch shapes broadcast.  Even if the composed shape is well defined, the
composed operator's methods may fail due to lack of broadcasting ability in
the defining operators' methods.
#### Performance <p></p> The performance of `LinearOperatorComposition` on any operation is equal to
the sum of the individual operators' operations. <p></p> <p></p> #### Matrix property hints <p></p> This `LinearOperator` is initialized with boolean flags of the form `is_X`,
for `X = non_singular, self_adjoint, positive_definite, square`.
These have the following meaning: <p></p> * If `is_X == True`, callers should expect the operator to have the
property `X`.  This is a promise that should be fulfilled, but is *not* a
runtime assert.  For example, finite floating point precision may result
in these promises being violated.
* If `is_X == False`, callers should expect the operator to not have `X`.
* If `is_X == None` (the default), callers should have no expectation either
way. <div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># Create a 2 x 2 linear operator composed of two 2 x 2 operators.
            operator_1 = LinearOperatorFullMatrix([[1., 2.], [3., 4.]])
            operator_2 = LinearOperatorFullMatrix([[1., 0.], [0., 1.]])
            operator = LinearOperatorComposition([operator_1, operator_2]) <p></p> operator.to_dense()
==> [[1., 2.]
     [3., 4.]] <p></p> operator.shape
==> [2, 2] <p></p> operator.log_abs_determinant()
==> scalar Tensor <p></p> x =... Shape [2, 4] Tensor
operator.matmul(x)
==> Shape [2, 4] Tensor <p></p> # Create a [2, 3] batch of 4 x 5 linear operators.
matrix_45 = tf.random.normal(shape=[2, 3, 4, 5])
operator_45 = LinearOperatorFullMatrix(matrix) <p></p> # Create a [2, 3] batch of 5 x 6 linear operators.
matrix_56 = tf.random.normal(shape=[2, 3, 5, 6])
operator_56 = LinearOperatorFullMatrix(matrix_56) <p></p> # Compose to create a [2, 3] batch of 4 x 6 operators.
operator_46 = LinearOperatorComposition([operator_45, operator_56]) <p></p> # Create a shape [2, 3, 6, 2] vector.
x = tf.random.normal(shape=[2, 3, 6, 2])
operator.matmul(x)
==> Shape [2, 3, 4, 2] Tensor </pre>
</div>
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#matmul_dyn">matmul_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#matvec">matvec</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#solve">solve</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#solve">solve</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#solve">solve</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#batch_shape">batch_shape</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#batch_shape_dyn">batch_shape_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#domain_dimension">domain_dimension</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#domain_dimension_dyn">domain_dimension_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#dtype">dtype</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#dtype_dyn">dtype_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#graph_parents">graph_parents</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#graph_parents_dyn">graph_parents_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#is_non_singular">is_non_singular</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#is_non_singular_dyn">is_non_singular_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#is_positive_definite">is_positive_definite</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#is_positive_definite_dyn">is_positive_definite_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#is_self_adjoint">is_self_adjoint</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#is_self_adjoint_dyn">is_self_adjoint_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#is_square">is_square</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#is_square_dyn">is_square_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#name">name</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#name_dyn">name_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#name_scope">name_scope</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#name_scope_dyn">name_scope_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#operators">operators</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#operators_dyn">operators_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#PythonObject">PythonObject</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#range_dimension">range_dimension</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#range_dimension_dyn">range_dimension_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#shape">shape</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#shape_dyn">shape_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#submodules">submodules</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#submodules_dyn">submodules_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#tensor_rank">tensor_rank</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#tensor_rank_dyn">tensor_rank_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#trainable_variables">trainable_variables</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#trainable_variables_dyn">trainable_variables_dyn</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#variables">variables</a></li>
				<li><a href="../tensorflow.linalg/LinearOperatorComposition.htm#variables_dyn">variables_dyn</a></li>
			</ul>
		
	</div>
	
	<h3 class="section">Public instance methods</h3>

	<div id="matmul_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>matmul_dyn</strong>(<span title="System.object">object</span> x, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> adjoint, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> adjoint_arg, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> name)
		</h4>
		<div class="content">Transform [batch] matrix `x` with left multiplication:  `x --> Ax`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>`LinearOperator` or `Tensor` with compatible shape and same `dtype` as
`self`. See class docstring for definition of compatibility. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> adjoint
						</dt>
						<dd>Python `bool`.  If `True`, left multiply by the adjoint: `A^H x`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> adjoint_arg
						</dt>
						<dd>Python `bool`.  If `True`, compute `A x^H` where `x^H` is
the hermitian transpose (transposition and complex conjugation). 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> name
						</dt>
						<dd>A name for this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `LinearOperator` or `Tensor` with shape `[..., M, R]` and same `dtype`
as `self`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># Make an operator acting like batch matrix A.  Assume A.shape = [..., M, N]
            operator = LinearOperator(...)
            operator.shape = [..., M, N] <p></p> X =... # shape [..., N, R], batch matrix, R > 0. <p></p> Y = operator.matmul(X)
Y.shape
==> [..., M, R] <p></p> Y[..., :, r] = sum_j A[..., :, j] X[j, r] </pre>
</div>
		</div>
	</div>
	<div id="matvec" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>matvec</strong>(<a href="../numpy/ndarray.htm">ndarray</a> x, <span title="System.bool">bool</span> adjoint, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Transform [batch] vector `x` with left multiplication:  `x --> Ax`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> x
						</dt>
						<dd>`Tensor` with compatible shape and same `dtype` as `self`.
`x` is treated as a [batch] vector meaning for every set of leading
dimensions, the last dimension defines a vector.
See class docstring for definition of compatibility. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> adjoint
						</dt>
						<dd>Python `bool`.  If `True`, left multiply by the adjoint: `A^H x`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for this `Op`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` with shape `[..., M]` and same `dtype` as `self`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># Make an operator acting like batch matric A.  Assume A.shape = [..., M, N]
            operator = LinearOperator(...) <p></p> X =... # shape [..., N], batch vector <p></p> Y = operator.matvec(X)
Y.shape
==> [..., M] <p></p> Y[..., :] = sum_j A[..., :, j] X[..., j] </pre>
</div>
		</div>
	</div>
	<div id="solve" class="method">
		<h4>
			<span title="System.object">object</span> <strong>solve</strong>(<span title="System.Collections.Generic.IEnumerable<PythonClassContainer>">IEnumerable&lt;PythonClassContainer&gt;</span> rhs, <span title="System.bool">bool</span> adjoint, <span title="System.bool">bool</span> adjoint_arg, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Solve (exact or approx) `R` (batch) systems of equations: `A X = rhs`. <p></p> The returned `Tensor` will be close to an exact solution if `A` is well
conditioned. Otherwise closeness will vary. See class docstring for details. <p></p> Examples: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<PythonClassContainer>">IEnumerable&lt;PythonClassContainer&gt;</span></code> rhs
						</dt>
						<dd>`Tensor` with same `dtype` as this operator and compatible shape.
`rhs` is treated like a [batch] matrix meaning for every set of leading
dimensions, the last two dimensions defines a matrix.
See class docstring for definition of compatibility. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> adjoint
						</dt>
						<dd>Python `bool`.  If `True`, solve the system involving the adjoint
of this `LinearOperator`:  `A^H X = rhs`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> adjoint_arg
						</dt>
						<dd>Python `bool`.  If `True`, solve `A X = rhs^H` where `rhs^H`
is the hermitian transpose (transposition and complex conjugation). 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name scope to use for ops added by this method. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>`Tensor` with shape `[...,N, R]` and same `dtype` as `rhs`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># Make an operator acting like batch matrix A.  Assume A.shape = [..., M, N]
            operator = LinearOperator(...)
            operator.shape = [..., M, N] <p></p> # Solve R > 0 linear systems for every member of the batch.
RHS =... # shape [..., M, R] <p></p> X = operator.solve(RHS)
# X[..., :, r] is the solution to the r'th linear system
# sum_j A[..., :, j] X[..., j, r] = RHS[..., :, r] <p></p> operator.matmul(X)
==> RHS </pre>
</div>
		</div>
	</div>
	<div id="solve" class="method">
		<h4>
			<span title="System.object">object</span> <strong>solve</strong>(<a href="../tensorflow.linalg/LinearOperator.htm">LinearOperator</a> rhs, <span title="System.bool">bool</span> adjoint, <span title="System.bool">bool</span> adjoint_arg, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Solve (exact or approx) `R` (batch) systems of equations: `A X = rhs`. <p></p> The returned `Tensor` will be close to an exact solution if `A` is well
conditioned. Otherwise closeness will vary. See class docstring for details. <p></p> Examples: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.linalg/LinearOperator.htm">LinearOperator</a></code> rhs
						</dt>
						<dd>`Tensor` with same `dtype` as this operator and compatible shape.
`rhs` is treated like a [batch] matrix meaning for every set of leading
dimensions, the last two dimensions defines a matrix.
See class docstring for definition of compatibility. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> adjoint
						</dt>
						<dd>Python `bool`.  If `True`, solve the system involving the adjoint
of this `LinearOperator`:  `A^H X = rhs`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> adjoint_arg
						</dt>
						<dd>Python `bool`.  If `True`, solve `A X = rhs^H` where `rhs^H`
is the hermitian transpose (transposition and complex conjugation). 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name scope to use for ops added by this method. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>`Tensor` with shape `[...,N, R]` and same `dtype` as `rhs`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># Make an operator acting like batch matrix A.  Assume A.shape = [..., M, N]
            operator = LinearOperator(...)
            operator.shape = [..., M, N] <p></p> # Solve R > 0 linear systems for every member of the batch.
RHS =... # shape [..., M, R] <p></p> X = operator.solve(RHS)
# X[..., :, r] is the solution to the r'th linear system
# sum_j A[..., :, j] X[..., j, r] = RHS[..., :, r] <p></p> operator.matmul(X)
==> RHS </pre>
</div>
		</div>
	</div>
	<div id="solve" class="method">
		<h4>
			<span title="System.object">object</span> <strong>solve</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> rhs, <span title="System.bool">bool</span> adjoint, <span title="System.bool">bool</span> adjoint_arg, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Solve (exact or approx) `R` (batch) systems of equations: `A X = rhs`. <p></p> The returned `Tensor` will be close to an exact solution if `A` is well
conditioned. Otherwise closeness will vary. See class docstring for details. <p></p> Examples: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> rhs
						</dt>
						<dd>`Tensor` with same `dtype` as this operator and compatible shape.
`rhs` is treated like a [batch] matrix meaning for every set of leading
dimensions, the last two dimensions defines a matrix.
See class docstring for definition of compatibility. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> adjoint
						</dt>
						<dd>Python `bool`.  If `True`, solve the system involving the adjoint
of this `LinearOperator`:  `A^H X = rhs`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> adjoint_arg
						</dt>
						<dd>Python `bool`.  If `True`, solve `A X = rhs^H` where `rhs^H`
is the hermitian transpose (transposition and complex conjugation). 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name scope to use for ops added by this method. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>`Tensor` with shape `[...,N, R]` and same `dtype` as `rhs`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># Make an operator acting like batch matrix A.  Assume A.shape = [..., M, N]
            operator = LinearOperator(...)
            operator.shape = [..., M, N] <p></p> # Solve R > 0 linear systems for every member of the batch.
RHS =... # shape [..., M, R] <p></p> X = operator.solve(RHS)
# X[..., :, r] is the solution to the r'th linear system
# sum_j A[..., :, j] X[..., j, r] = RHS[..., :, r] <p></p> operator.matmul(X)
==> RHS </pre>
</div>
		</div>
	</div>
	
	
	<h3 class="section">Public properties</h3>

	<div id="batch_shape" class="method">
		<h4>
			<span title="System.object">object</span> <strong>batch_shape</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="batch_shape_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>batch_shape_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="domain_dimension" class="method">
		<h4>
			<a href="../tensorflow/Dimension.htm">Dimension</a> <strong>domain_dimension</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="domain_dimension_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>domain_dimension_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="dtype" class="method">
		<h4>
			<span title="System.object">object</span> <strong>dtype</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="dtype_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>dtype_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="graph_parents" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>graph_parents</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="graph_parents_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>graph_parents_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_non_singular" class="method">
		<h4>
			<span title="System.Nullable<bool>">Nullable&lt;bool&gt;</span> <strong>is_non_singular</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_non_singular_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_non_singular_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_positive_definite" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_positive_definite</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_positive_definite_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_positive_definite_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_self_adjoint" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_self_adjoint</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_self_adjoint_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_self_adjoint_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_square" class="method">
		<h4>
			<span title="System.Nullable<bool>">Nullable&lt;bool&gt;</span> <strong>is_square</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_square_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_square_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="name" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="name_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="name_scope" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name_scope</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="name_scope_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name_scope_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="operators" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>operators</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="operators_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>operators_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="PythonObject" class="method">
		<h4>
			<span title="System.object">object</span> <strong>PythonObject</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="range_dimension" class="method">
		<h4>
			<a href="../tensorflow/Dimension.htm">Dimension</a> <strong>range_dimension</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="range_dimension_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>range_dimension_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="shape" class="method">
		<h4>
			<a href="../tensorflow/TensorShape.htm">TensorShape</a> <strong>shape</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="shape_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>shape_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="submodules" class="method">
		<h4>
			<span title="System.ValueTuple<object>">ValueTuple&lt;object&gt;</span> <strong>submodules</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="submodules_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>submodules_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="tensor_rank" class="method">
		<h4>
			<span title="System.Nullable<int>">Nullable&lt;int&gt;</span> <strong>tensor_rank</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="tensor_rank_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>tensor_rank_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable_variables" class="method">
		<h4>
			<span title="System.object">object</span> <strong>trainable_variables</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable_variables_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>trainable_variables_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="variables" class="method">
		<h4>
			<span title="System.object">object</span> <strong>variables</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="variables_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>variables_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	</section>
	</article><footer>
	<span id="version">Built from v1.15.0.0 of LostTech.TensorFlow</span>
	<span id="docu-link">
		Generated by <a href="http://docu.jagregory.com">docu</a>
	</span>
</footer>
  </body>
</html>