<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    <title>Optimizer - LostTech.TensorFlow Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body>
  	<header><h1>LostTech.TensorFlow : API Documentation</h1>
	</header>

    <nav id="namespaces">
      <iframe src="../namespaces.htm"></iframe>
    </nav><nav id="types">
  <h2 class="fixed">Types in tensorflow.keras.optimizers</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../tensorflow.keras.optimizers/Adadelta.htm">Adadelta</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/Adagrad.htm">Adagrad</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/Adam.htm">Adam</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/Adamax.htm">Adamax</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/Ftrl.htm">Ftrl</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/IAdadelta.htm">IAdadelta</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/IAdagrad.htm">IAdagrad</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/IAdam.htm">IAdam</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/IAdamax.htm">IAdamax</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/IFtrl.htm">IFtrl</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/INadam.htm">INadam</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/IOptimizer.htm">IOptimizer</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/IRMSprop.htm">IRMSprop</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/ISGD.htm">ISGD</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/Nadam.htm">Nadam</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/Optimizer.htm" class="current">Optimizer</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/OptimizerExtensions.htm">OptimizerExtensions</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/RMSprop.htm">RMSprop</a>
        </li>
				<li>
            <a href="../tensorflow.keras.optimizers/SGD.htm">SGD</a>
        </li>
		</ul>
	</div>
</nav>
	<article>
    <header>
		<p class="class"><strong>Type</strong> Optimizer</p>
	</header>
	<section>
		<header>
		<p><strong>Namespace</strong> tensorflow.keras.optimizers</p>
		<p><strong>Parent</strong> <a href="../LostTech.Gradient/PythonObjectContainer.htm">PythonObjectContainer</a></p>
		<p><strong>Interfaces</strong> <a href="../tensorflow.python.training.tracking.base/Trackable.htm">Trackable</a>, <a href="../tensorflow.keras.optimizers/IOptimizer.htm">IOptimizer</a></p>
		</header>
    <div class="sub-header">
			<div id="summary">Updated base class for optimizers. <p></p> This class defines the API to add Ops to train a model.  You never use this
class directly, but instead instantiate one of its subclasses such as
<a href="..\..\..\tf\keras\optimizers\SGD.md"><code>tf.keras.optimizers.SGD</code></a>, <a href="..\..\..\tf\keras\optimizers\Adam.md"><code>tf.keras.optimizers.Adam</code></a>. <p></p> ### Usage
### Custom training loop with Keras models <p></p> In Keras models, sometimes variables are created when the model is first
called, instead of construction time. Examples include 1) sequential models
without input shape pre-defined, or 2) subclassed models. Pass var_list as
callable in these cases. <p></p> Example:
### Processing gradients before applying them. <p></p> Calling `minimize()` takes care of both computing the gradients and
applying them to the variables.  If you want to process the gradients
before applying them you can instead use the optimizer in three steps: <p></p> 1.  Compute the gradients with <a href="..\..\..\tf\GradientTape.md"><code>tf.GradientTape</code></a>.
2.  Process the gradients as you wish.
3.  Apply the processed gradients with `apply_gradients()`. <p></p> Example:
### Use with <a href="..\..\..\tf\distribute\Strategy.md"><code>tf.distribute.Strategy</code></a>. <p></p> This optimizer class is <a href="..\..\..\tf\distribute\Strategy.md"><code>tf.distribute.Strategy</code></a> aware, which means it
automatically sums gradients across all replicas. To average gradients,
you divide your loss by the global batch size, which is done
automatically if you use <a href="..\..\..\tf\keras.md"><code>tf.keras</code></a> built-in training or evaluation loops.
See the `reduction` argument of your loss which should be set to
`tf.keras.losses.Reduction.SUM_OVER_BATCH_SIZE` for averaging or
`tf.keras.losses.Reduction.SUM` for not. <p></p> If you are not using these and you want to average gradients, you should use
<a href="..\..\..\tf\math\reduce_sum.md"><code>tf.math.reduce_sum</code></a> to add up your per-example losses and then divide by the
global batch size. Note that when using <a href="..\..\..\tf\distribute\Strategy.md"><code>tf.distribute.Strategy</code></a>, the first
component of a tensor's shape is the *replica-local* batch size, which is off
by a factor equal to the number of replicas being used to compute a single
step. As a result, using <a href="..\..\..\tf\math\reduce_mean.md"><code>tf.math.reduce_mean</code></a> will give the wrong answer,
resulting in gradients that can be many times too big. <p></p> ### Variable Constraint <p></p> All Keras optimizers respect variable constraints. If constraint function is
passed to any variable, the constraint will be applied to the variable after
the gradient has been applied to the variable.
Important: If gradient is sparse tensor, variable constraint is not supported. <p></p> ### Thread Compatibility <p></p> The entire optimizer is currently thread compatible, not thread-safe. The user
needs to perform synchronization if necessary. <p></p> ### Slots <p></p> Many optimizer subclasses, such as `Adam` and `Adagrad` allocate and manage
additional variables associated with the variables to train.  These are called
<i>Slots</i>.  Slots have names and you can ask the optimizer for the names of
the slots that it uses.  Once you have a slot name you can ask the optimizer
for the variable it created to hold the slot value. <p></p> This can be useful if you want to log debug a training algorithm, report stats
about the slots, etc. <p></p> ### Hyper parameters <p></p> These are arguments passed to the optimizer subclass constructor
(the `__init__` method), and then passed to `self._set_hyper()`.
They can be either regular Python values (like 1.0), tensors, or
callables. If they are callable, the callable will be called during
`apply_gradients()` to get the value for the hyper parameter. <p></p> Hyper parameters can be overwritten through user code: <p></p> Example:
### Write a customized optimizer.
If you intend to create your own optimization algorithm, simply inherit from
this class and override the following methods: <p></p> - resource_apply_dense (update variable given gradient tensor is dense)
- resource_apply_sparse (update variable given gradient tensor is sparse)
- create_slots (if your optimizer algorithm requires additional variables)
- get_config (serialization of the optimizer, include all hyper parameters) <div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># Create an optimizer with the desired parameters.
            opt = tf.keras.optimizers.SGD(learning_rate=0.1)
            # `loss` is a callable that takes no argument and returns the value
            # to minimize.
            loss = lambda: 3 * var1 * var1 + 2 * var2 * var2
            # In graph mode, returns op that minimizes the loss by updating the listed
            # variables.
            opt_op = opt.minimize(loss, var_list=[var1, var2])
            opt_op.run()
            # In eager mode, simply call minimize to update the list of variables.
            opt.minimize(loss, var_list=[var1, var2]) </pre>
</div>
			</div>
		
		
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../tensorflow.keras.optimizers/Optimizer.htm#clipnorm">clipnorm</a></li>
				<li><a href="../tensorflow.keras.optimizers/Optimizer.htm#clipvalue">clipvalue</a></li>
				<li><a href="../tensorflow.keras.optimizers/Optimizer.htm#iterations">iterations</a></li>
				<li><a href="../tensorflow.keras.optimizers/Optimizer.htm#iterations_dyn">iterations_dyn</a></li>
				<li><a href="../tensorflow.keras.optimizers/Optimizer.htm#PythonObject">PythonObject</a></li>
				<li><a href="../tensorflow.keras.optimizers/Optimizer.htm#weights">weights</a></li>
				<li><a href="../tensorflow.keras.optimizers/Optimizer.htm#weights_dyn">weights_dyn</a></li>
			</ul>
		
	</div>
	
	
	
	<h3 class="section">Public properties</h3>

	<div id="clipnorm" class="method">
		<h4>
			<span title="System.object">object</span> <strong>clipnorm</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="clipvalue" class="method">
		<h4>
			<span title="System.object">object</span> <strong>clipvalue</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="iterations" class="method">
		<h4>
			<span title="System.object">object</span> <strong>iterations</strong> get; set;
		</h4>
		<div class="content">Variable. The number of training steps this Optimizer has run. 

		</div>
	</div>
	<div id="iterations_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>iterations_dyn</strong> get; set;
		</h4>
		<div class="content">Variable. The number of training steps this Optimizer has run. 

		</div>
	</div>
	<div id="PythonObject" class="method">
		<h4>
			<span title="System.object">object</span> <strong>PythonObject</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="weights" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>weights</strong> get; 
		</h4>
		<div class="content">Returns variables of this Optimizer based on the order created. 

		</div>
	</div>
	<div id="weights_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>weights_dyn</strong> get; 
		</h4>
		<div class="content">Returns variables of this Optimizer based on the order created. 

		</div>
	</div>
	</section>
	</article><footer>
	<span id="version">Built from v1.15.0.0 of LostTech.TensorFlow</span>
	<span id="docu-link">
		Generated by <a href="http://docu.jagregory.com">docu</a>
	</span>
</footer>
  </body>
</html>