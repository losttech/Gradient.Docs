<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    <title>tf.saved_model - LostTech.TensorFlow Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body>
  	<header><h1>LostTech.TensorFlow : API Documentation</h1>
	</header>

    <nav id="namespaces">
      <iframe src="../namespaces.htm"></iframe>
    </nav><nav id="types">
  <h2 class="fixed">Types in tensorflow</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../tensorflow/AggregationMethod.htm">AggregationMethod</a>
        </li>
				<li>
            <a href="../tensorflow/ConditionalAccumulator.htm">ConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/ConditionalAccumulatorBase.htm">ConditionalAccumulatorBase</a>
        </li>
				<li>
            <a href="../tensorflow/constant_initializer.htm">constant_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/CriticalSection.htm">CriticalSection</a>
        </li>
				<li>
            <a href="../tensorflow/DeviceSpec.htm">DeviceSpec</a>
        </li>
				<li>
            <a href="../tensorflow/Dimension.htm">Dimension</a>
        </li>
				<li>
            <a href="../tensorflow/DType.htm">DType</a>
        </li>
				<li>
            <a href="../tensorflow/FIFOQueue.htm">FIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/FixedLenFeature.htm">FixedLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/FixedLengthRecordReader.htm">FixedLengthRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/FixedLenSequenceFeature.htm">FixedLenSequenceFeature</a>
        </li>
				<li>
            <a href="../tensorflow/glorot_normal_initializer.htm">glorot_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/glorot_uniform_initializer.htm">glorot_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/GradientTape.htm">GradientTape</a>
        </li>
				<li>
            <a href="../tensorflow/Graph.htm">Graph</a>
        </li>
				<li>
            <a href="../tensorflow/Graph._ControlDependenciesController.htm">Graph._ControlDependenciesController</a>
        </li>
				<li>
            <a href="../tensorflow/Graph.I_ControlDependenciesController.htm">Graph.I_ControlDependenciesController</a>
        </li>
				<li>
            <a href="../tensorflow/GraphKeys.htm">GraphKeys</a>
        </li>
				<li>
            <a href="../tensorflow/HeadingAxes.htm">HeadingAxes</a>
        </li>
				<li>
            <a href="../tensorflow/IAggregationMethod.htm">IAggregationMethod</a>
        </li>
				<li>
            <a href="../tensorflow/IConditionalAccumulator.htm">IConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/IConditionalAccumulatorBase.htm">IConditionalAccumulatorBase</a>
        </li>
				<li>
            <a href="../tensorflow/Iconstant_initializer.htm">Iconstant_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/ICriticalSection.htm">ICriticalSection</a>
        </li>
				<li>
            <a href="../tensorflow/IdentityReader.htm">IdentityReader</a>
        </li>
				<li>
            <a href="../tensorflow/IDeviceSpec.htm">IDeviceSpec</a>
        </li>
				<li>
            <a href="../tensorflow/IDimension.htm">IDimension</a>
        </li>
				<li>
            <a href="../tensorflow/IDType.htm">IDType</a>
        </li>
				<li>
            <a href="../tensorflow/IFIFOQueue.htm">IFIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IFixedLenFeature.htm">IFixedLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/IFixedLengthRecordReader.htm">IFixedLengthRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/IFixedLenSequenceFeature.htm">IFixedLenSequenceFeature</a>
        </li>
				<li>
            <a href="../tensorflow/Iglorot_normal_initializer.htm">Iglorot_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Iglorot_uniform_initializer.htm">Iglorot_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IGradientTape.htm">IGradientTape</a>
        </li>
				<li>
            <a href="../tensorflow/IGraph.htm">IGraph</a>
        </li>
				<li>
            <a href="../tensorflow/IGraphKeys.htm">IGraphKeys</a>
        </li>
				<li>
            <a href="../tensorflow/IIdentityReader.htm">IIdentityReader</a>
        </li>
				<li>
            <a href="../tensorflow/IIndexedSlices.htm">IIndexedSlices</a>
        </li>
				<li>
            <a href="../tensorflow/IIndexedSlicesSpec.htm">IIndexedSlicesSpec</a>
        </li>
				<li>
            <a href="../tensorflow/IInteractiveSession.htm">IInteractiveSession</a>
        </li>
				<li>
            <a href="../tensorflow/ILazyLoader.htm">ILazyLoader</a>
        </li>
				<li>
            <a href="../tensorflow/ILMDBReader.htm">ILMDBReader</a>
        </li>
				<li>
            <a href="../tensorflow/IModule.htm">IModule</a>
        </li>
				<li>
            <a href="../tensorflow/Iname_scope.htm">Iname_scope</a>
        </li>
				<li>
            <a href="../tensorflow/IndexedSlices.htm">IndexedSlices</a>
        </li>
				<li>
            <a href="../tensorflow/IndexedSlicesSpec.htm">IndexedSlicesSpec</a>
        </li>
				<li>
            <a href="../tensorflow/InteractiveSession.htm">InteractiveSession</a>
        </li>
				<li>
            <a href="../tensorflow/Iones_initializer.htm">Iones_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IOperation.htm">IOperation</a>
        </li>
				<li>
            <a href="../tensorflow/IOpError.htm">IOpError</a>
        </li>
				<li>
            <a href="../tensorflow/IOptionalSpec.htm">IOptionalSpec</a>
        </li>
				<li>
            <a href="../tensorflow/Iorthogonal_initializer.htm">Iorthogonal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IPaddingFIFOQueue.htm">IPaddingFIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IPriorityQueue.htm">IPriorityQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IQueueBase.htm">IQueueBase</a>
        </li>
				<li>
            <a href="../tensorflow/IRaggedTensor.htm">IRaggedTensor</a>
        </li>
				<li>
            <a href="../tensorflow/IRaggedTensorSpec.htm">IRaggedTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/Irandom_normal_initializer.htm">Irandom_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Irandom_uniform_initializer.htm">Irandom_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IRandomShuffleQueue.htm">IRandomShuffleQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IReaderBase.htm">IReaderBase</a>
        </li>
				<li>
            <a href="../tensorflow/IRegisterGradient.htm">IRegisterGradient</a>
        </li>
				<li>
            <a href="../tensorflow/ISession.htm">ISession</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseConditionalAccumulator.htm">ISparseConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseFeature.htm">ISparseFeature</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseTensor.htm">ISparseTensor</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseTensorSpec.htm">ISparseTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseTensorValue.htm">ISparseTensorValue</a>
        </li>
				<li>
            <a href="../tensorflow/ITensor.htm">ITensor</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorArray.htm">ITensorArray</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorArraySpec.htm">ITensorArraySpec</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorShape.htm">ITensorShape</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorSpec.htm">ITensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/ITextLineReader.htm">ITextLineReader</a>
        </li>
				<li>
            <a href="../tensorflow/ITFRecordReader.htm">ITFRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/Itruncated_normal_initializer.htm">Itruncated_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/ITypeSpec.htm">ITypeSpec</a>
        </li>
				<li>
            <a href="../tensorflow/IUnconnectedGradients.htm">IUnconnectedGradients</a>
        </li>
				<li>
            <a href="../tensorflow/Iuniform_unit_scaling_initializer.htm">Iuniform_unit_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IVariable.htm">IVariable</a>
        </li>
				<li>
            <a href="../tensorflow/Ivariable_scope.htm">Ivariable_scope</a>
        </li>
				<li>
            <a href="../tensorflow/IVariableScope.htm">IVariableScope</a>
        </li>
				<li>
            <a href="../tensorflow/Ivariance_scaling_initializer.htm">Ivariance_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IVarLenFeature.htm">IVarLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/IWholeFileReader.htm">IWholeFileReader</a>
        </li>
				<li>
            <a href="../tensorflow/Izeros_initializer.htm">Izeros_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/LazyLoader.htm">LazyLoader</a>
        </li>
				<li>
            <a href="../tensorflow/LMDBReader.htm">LMDBReader</a>
        </li>
				<li>
            <a href="../tensorflow/Module.htm">Module</a>
        </li>
				<li>
            <a href="../tensorflow/name_scope.htm">name_scope</a>
        </li>
				<li>
            <a href="../tensorflow/ones_initializer.htm">ones_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Operation.htm">Operation</a>
        </li>
				<li>
            <a href="../tensorflow/Operation._InputList.htm">Operation._InputList</a>
        </li>
				<li>
            <a href="../tensorflow/Operation.I_InputList.htm">Operation.I_InputList</a>
        </li>
				<li>
            <a href="../tensorflow/OpError.htm">OpError</a>
        </li>
				<li>
            <a href="../tensorflow/OptionalSpec.htm">OptionalSpec</a>
        </li>
				<li>
            <a href="../tensorflow/orthogonal_initializer.htm">orthogonal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/PaddingFIFOQueue.htm">PaddingFIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/PriorityQueue.htm">PriorityQueue</a>
        </li>
				<li>
            <a href="../tensorflow/QueueBase.htm">QueueBase</a>
        </li>
				<li>
            <a href="../tensorflow/RaggedTensor.htm">RaggedTensor</a>
        </li>
				<li>
            <a href="../tensorflow/RaggedTensorSpec.htm">RaggedTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/random_normal_initializer.htm">random_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/random_uniform_initializer.htm">random_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/RandomShuffleQueue.htm">RandomShuffleQueue</a>
        </li>
				<li>
            <a href="../tensorflow/ReaderBase.htm">ReaderBase</a>
        </li>
				<li>
            <a href="../tensorflow/RegisterGradient.htm">RegisterGradient</a>
        </li>
				<li>
            <a href="../tensorflow/Session.htm">Session</a>
        </li>
				<li>
            <a href="../tensorflow/SparseConditionalAccumulator.htm">SparseConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/SparseFeature.htm">SparseFeature</a>
        </li>
				<li>
            <a href="../tensorflow/SparseTensor.htm">SparseTensor</a>
        </li>
				<li>
            <a href="../tensorflow/SparseTensorSpec.htm">SparseTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/SparseTensorValue.htm">SparseTensorValue</a>
        </li>
				<li>
            <a href="../tensorflow/Tensor.htm">Tensor</a>
        </li>
				<li>
            <a href="../tensorflow/Tensor`1.htm">Tensor&lt;T&gt;</a>
        </li>
				<li>
            <a href="../tensorflow/TensorArray.htm">TensorArray</a>
        </li>
				<li>
            <a href="../tensorflow/TensorArraySpec.htm">TensorArraySpec</a>
        </li>
				<li>
            <a href="../tensorflow/TensorDimension.htm">TensorDimension</a>
        </li>
				<li>
            <a href="../tensorflow/TensorDimensionSlice.htm">TensorDimensionSlice</a>
        </li>
				<li>
            <a href="../tensorflow/TensorShape.htm">TensorShape</a>
        </li>
				<li>
            <a href="../tensorflow/TensorSpec.htm">TensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/TextLineReader.htm">TextLineReader</a>
        </li>
				<li>
            <a href="../tensorflow/tf.htm">tf</a>
        </li>
				<li>
            <a href="../tensorflow/tf.audio.htm">tf.audio</a>
        </li>
				<li>
            <a href="../tensorflow/tf.autograph.htm">tf.autograph</a>
        </li>
				<li>
            <a href="../tensorflow/tf.autograph.experimental.htm">tf.autograph.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.bitwise.htm">tf.bitwise</a>
        </li>
				<li>
            <a href="../tensorflow/tf.compat.htm">tf.compat</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.htm">tf.config</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.experimental.htm">tf.config.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.optimizer.htm">tf.config.optimizer</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.threading.htm">tf.config.threading</a>
        </li>
				<li>
            <a href="../tensorflow/tf.data.htm">tf.data</a>
        </li>
				<li>
            <a href="../tensorflow/tf.data.experimental.htm">tf.data.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.debugging.htm">tf.debugging</a>
        </li>
				<li>
            <a href="../tensorflow/tf.distribute.htm">tf.distribute</a>
        </li>
				<li>
            <a href="../tensorflow/tf.distributions.htm">tf.distributions</a>
        </li>
				<li>
            <a href="../tensorflow/tf.errors.htm">tf.errors</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.htm">tf.estimator</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.experimental.htm">tf.estimator.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.export.htm">tf.estimator.export</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.inputs.htm">tf.estimator.inputs</a>
        </li>
				<li>
            <a href="../tensorflow/tf.experimental.htm">tf.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.feature_column.htm">tf.feature_column</a>
        </li>
				<li>
            <a href="../tensorflow/tf.gfile.htm">tf.gfile</a>
        </li>
				<li>
            <a href="../tensorflow/tf.graph_util.htm">tf.graph_util</a>
        </li>
				<li>
            <a href="../tensorflow/tf.image.htm">tf.image</a>
        </li>
				<li>
            <a href="../tensorflow/tf.initializers.htm">tf.initializers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.io.htm">tf.io</a>
        </li>
				<li>
            <a href="../tensorflow/tf.io.gfile.htm">tf.io.gfile</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.htm">tf.keras</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.activations.htm">tf.keras.activations</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.htm">tf.keras.applications</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.densenet.htm">tf.keras.applications.densenet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.imagenet_utils.htm">tf.keras.applications.imagenet_utils</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.inception_resnet_v2.htm">tf.keras.applications.inception_resnet_v2</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.inception_v3.htm">tf.keras.applications.inception_v3</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.mobilenet.htm">tf.keras.applications.mobilenet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.mobilenet_v2.htm">tf.keras.applications.mobilenet_v2</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.nasnet.htm">tf.keras.applications.nasnet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.resnet.htm">tf.keras.applications.resnet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.resnet_v2.htm">tf.keras.applications.resnet_v2</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.vgg16.htm">tf.keras.applications.vgg16</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.vgg19.htm">tf.keras.applications.vgg19</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.xception.htm">tf.keras.applications.xception</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.backend.htm">tf.keras.backend</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.constraints.htm">tf.keras.constraints</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.htm">tf.keras.datasets</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.boston_housing.htm">tf.keras.datasets.boston_housing</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.cifar10.htm">tf.keras.datasets.cifar10</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.cifar100.htm">tf.keras.datasets.cifar100</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.fashion_mnist.htm">tf.keras.datasets.fashion_mnist</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.imdb.htm">tf.keras.datasets.imdb</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.mnist.htm">tf.keras.datasets.mnist</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.reuters.htm">tf.keras.datasets.reuters</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.estimator.htm">tf.keras.estimator</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.experimental.htm">tf.keras.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.initializers.htm">tf.keras.initializers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.layers.htm">tf.keras.layers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.losses.htm">tf.keras.losses</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.metrics.htm">tf.keras.metrics</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.mixed_precision.htm">tf.keras.mixed_precision</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.mixed_precision.experimental.htm">tf.keras.mixed_precision.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.models.htm">tf.keras.models</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.optimizers.htm">tf.keras.optimizers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.optimizers.schedules.htm">tf.keras.optimizers.schedules</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.preprocessing.htm">tf.keras.preprocessing</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.preprocessing.image.htm">tf.keras.preprocessing.image</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.regularizers.htm">tf.keras.regularizers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.utils.htm">tf.keras.utils</a>
        </li>
				<li>
            <a href="../tensorflow/tf.layers.htm">tf.layers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.layers.experimental.htm">tf.layers.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.linalg.htm">tf.linalg</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.htm">tf.lite</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.htm">tf.lite.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.microfrontend.htm">tf.lite.experimental.microfrontend</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.microfrontend.python.htm">tf.lite.experimental.microfrontend.python</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.microfrontend.python.ops.htm">tf.lite.experimental.microfrontend.python.ops</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.nn.htm">tf.lite.experimental.nn</a>
        </li>
				<li>
            <a href="../tensorflow/tf.logging.htm">tf.logging</a>
        </li>
				<li>
            <a href="../tensorflow/tf.losses.htm">tf.losses</a>
        </li>
				<li>
            <a href="../tensorflow/tf.math.htm">tf.math</a>
        </li>
				<li>
            <a href="../tensorflow/tf.metrics.htm">tf.metrics</a>
        </li>
				<li>
            <a href="../tensorflow/tf.nest.htm">tf.nest</a>
        </li>
				<li>
            <a href="../tensorflow/tf.nn.htm">tf.nn</a>
        </li>
				<li>
            <a href="../tensorflow/tf.profiler.htm">tf.profiler</a>
        </li>
				<li>
            <a href="../tensorflow/tf.quantization.htm">tf.quantization</a>
        </li>
				<li>
            <a href="../tensorflow/tf.ragged.htm">tf.ragged</a>
        </li>
				<li>
            <a href="../tensorflow/tf.random.htm">tf.random</a>
        </li>
				<li>
            <a href="../tensorflow/tf.random.experimental.htm">tf.random.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.resource_loader.htm">tf.resource_loader</a>
        </li>
				<li>
            <a href="../tensorflow/tf.saved_model.htm" class="current">tf.saved_model</a>
        </li>
				<li>
            <a href="../tensorflow/tf.saved_model.main_op.htm">tf.saved_model.main_op</a>
        </li>
				<li>
            <a href="../tensorflow/tf.sets.htm">tf.sets</a>
        </li>
				<li>
            <a href="../tensorflow/tf.signal.htm">tf.signal</a>
        </li>
				<li>
            <a href="../tensorflow/tf.sparse.htm">tf.sparse</a>
        </li>
				<li>
            <a href="../tensorflow/tf.strings.htm">tf.strings</a>
        </li>
				<li>
            <a href="../tensorflow/tf.summary.htm">tf.summary</a>
        </li>
				<li>
            <a href="../tensorflow/tf.summary.experimental.htm">tf.summary.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.sysconfig.htm">tf.sysconfig</a>
        </li>
				<li>
            <a href="../tensorflow/tf.test.htm">tf.test</a>
        </li>
				<li>
            <a href="../tensorflow/tf.tpu.htm">tf.tpu</a>
        </li>
				<li>
            <a href="../tensorflow/tf.tpu.experimental.htm">tf.tpu.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.train.htm">tf.train</a>
        </li>
				<li>
            <a href="../tensorflow/tf.train.experimental.htm">tf.train.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.user_ops.htm">tf.user_ops</a>
        </li>
				<li>
            <a href="../tensorflow/tf.xla.htm">tf.xla</a>
        </li>
				<li>
            <a href="../tensorflow/tf.xla.experimental.htm">tf.xla.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/TFRecordReader.htm">TFRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/truncated_normal_initializer.htm">truncated_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/TypeSpec.htm">TypeSpec</a>
        </li>
				<li>
            <a href="../tensorflow/UnconnectedGradients.htm">UnconnectedGradients</a>
        </li>
				<li>
            <a href="../tensorflow/uniform_unit_scaling_initializer.htm">uniform_unit_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Variable.htm">Variable</a>
        </li>
				<li>
            <a href="../tensorflow/variable_scope.htm">variable_scope</a>
        </li>
				<li>
            <a href="../tensorflow/VariableAggregation.htm">VariableAggregation</a>
        </li>
				<li>
            <a href="../tensorflow/VariableScope.htm">VariableScope</a>
        </li>
				<li>
            <a href="../tensorflow/VariableSynchronization.htm">VariableSynchronization</a>
        </li>
				<li>
            <a href="../tensorflow/variance_scaling_initializer.htm">variance_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/VarLenFeature.htm">VarLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/WholeFileReader.htm">WholeFileReader</a>
        </li>
				<li>
            <a href="../tensorflow/zeros_initializer.htm">zeros_initializer</a>
        </li>
		</ul>
	</div>
</nav>
	<article>
    <header>
		<p class="class"><strong>Type</strong> tf.saved_model</p>
	</header>
	<section>
		<header>
		<p><strong>Namespace</strong> tensorflow</p>
		</header>
    <div class="sub-header">
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../tensorflow/tf.saved_model.htm#build_signature_def">build_signature_def</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#build_signature_def_dyn">build_signature_def_dyn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#build_tensor_info">build_tensor_info</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#build_tensor_info">build_tensor_info</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#build_tensor_info">build_tensor_info</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#build_tensor_info">build_tensor_info</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#build_tensor_info">build_tensor_info</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#build_tensor_info_dyn">build_tensor_info_dyn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#classification_signature_def">classification_signature_def</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#classification_signature_def">classification_signature_def</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#classification_signature_def_dyn">classification_signature_def_dyn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#contains_saved_model">contains_saved_model</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#get_tensor_from_tensor_info">get_tensor_from_tensor_info</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#get_tensor_from_tensor_info_dyn">get_tensor_from_tensor_info_dyn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#is_valid_signature">is_valid_signature</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#is_valid_signature_dyn">is_valid_signature_dyn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load">load</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load">load</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load">load</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load">load</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load">load</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load">load</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load_dyn">load_dyn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load_v2">load_v2</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load_v2">load_v2</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load_v2">load_v2</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load_v2">load_v2</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load_v2">load_v2</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load_v2">load_v2</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load_v2_dyn">load_v2_dyn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#main_op_with_restore">main_op_with_restore</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#main_op_with_restore_dyn">main_op_with_restore_dyn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#predict_signature_def">predict_signature_def</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#predict_signature_def_dyn">predict_signature_def_dyn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#regression_signature_def">regression_signature_def</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#regression_signature_def_dyn">regression_signature_def_dyn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#save">save</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#save">save</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#save">save</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#save">save</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#save">save</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#save">save</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#save">save</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#save">save</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#save">save</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#simple_save">simple_save</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#simple_save">simple_save</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#simple_save">simple_save</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#simple_save_dyn">simple_save_dyn</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../tensorflow/tf.saved_model.htm#build_signature_def_fn">build_signature_def_fn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#build_tensor_info_fn">build_tensor_info_fn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#classification_signature_def_fn">classification_signature_def_fn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#contains_saved_model_fn_">contains_saved_model_fn_</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#get_tensor_from_tensor_info_fn">get_tensor_from_tensor_info_fn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#is_valid_signature_fn">is_valid_signature_fn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load_fn">load_fn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#load_v2_fn">load_v2_fn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#main_op_with_restore_fn">main_op_with_restore_fn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#predict_signature_def_fn">predict_signature_def_fn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#regression_signature_def_fn">regression_signature_def_fn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#save_fn">save_fn</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#simple_save_fn">simple_save_fn</a></li>
			</ul>
		
			<h3 class="section">Fields</h3>
			<ul>
				<li><a href="../tensorflow/tf.saved_model.htm#SAVED_MODEL_SCHEMA_VERSION">SAVED_MODEL_SCHEMA_VERSION</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#VARIABLES_FILENAME">VARIABLES_FILENAME</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#ASSETS_DIRECTORY">ASSETS_DIRECTORY</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#CLASSIFY_METHOD_NAME">CLASSIFY_METHOD_NAME</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#CLASSIFY_OUTPUT_SCORES">CLASSIFY_OUTPUT_SCORES</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#CLASSIFY_INPUTS">CLASSIFY_INPUTS</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#REGRESS_INPUTS">REGRESS_INPUTS</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#ASSETS_KEY">ASSETS_KEY</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#CLASSIFY_OUTPUT_CLASSES">CLASSIFY_OUTPUT_CLASSES</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#SAVED_MODEL_FILENAME_PB">SAVED_MODEL_FILENAME_PB</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#DEFAULT_SERVING_SIGNATURE_DEF_KEY">DEFAULT_SERVING_SIGNATURE_DEF_KEY</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#PREDICT_INPUTS">PREDICT_INPUTS</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#REGRESS_METHOD_NAME">REGRESS_METHOD_NAME</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#LEGACY_INIT_OP_KEY">LEGACY_INIT_OP_KEY</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#SAVED_MODEL_FILENAME_PBTXT">SAVED_MODEL_FILENAME_PBTXT</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#PREDICT_METHOD_NAME">PREDICT_METHOD_NAME</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#REGRESS_OUTPUTS">REGRESS_OUTPUTS</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#VARIABLES_DIRECTORY">VARIABLES_DIRECTORY</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#MAIN_OP_KEY">MAIN_OP_KEY</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#PREDICT_OUTPUTS">PREDICT_OUTPUTS</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#SERVING">SERVING</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#TRAINING">TRAINING</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#GPU">GPU</a></li>
				<li><a href="../tensorflow/tf.saved_model.htm#TPU">TPU</a></li>
			</ul>
	</div>
	
	
	<h3 class="section">Public static methods</h3>

	<div id="build_signature_def" class="method">
		<h4>
			<span title="System.object">object</span> <strong>build_signature_def</strong>(<span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> inputs, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> outputs, <span title="System.string">string</span> method_name)
		</h4>
		<div class="content">Utility function to build a SignatureDef protocol buffer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> inputs
						</dt>
						<dd>Inputs of the SignatureDef defined as a proto map of string to
tensor info. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> outputs
						</dt>
						<dd>Outputs of the SignatureDef defined as a proto map of string to
tensor info. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> method_name
						</dt>
						<dd>Method name of the SignatureDef as a string. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A SignatureDef protocol buffer constructed based on the supplied arguments. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="build_signature_def_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>build_signature_def_dyn</strong>(<span title="System.object">object</span> inputs, <span title="System.object">object</span> outputs, <span title="System.object">object</span> method_name)
		</h4>
		<div class="content">Utility function to build a SignatureDef protocol buffer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> inputs
						</dt>
						<dd>Inputs of the SignatureDef defined as a proto map of string to
tensor info. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> outputs
						</dt>
						<dd>Outputs of the SignatureDef defined as a proto map of string to
tensor info. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> method_name
						</dt>
						<dd>Method name of the SignatureDef as a string. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A SignatureDef protocol buffer constructed based on the supplied arguments. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="build_tensor_info" class="method">
		<h4>
			<span title="System.object">object</span> <strong>build_tensor_info</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> tensor)
		</h4>
		<div class="content">Utility function to build TensorInfo proto from a Tensor. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.utils.build_tensor_info or tf.compat.v1.saved_model.build_tensor_info. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> tensor
						</dt>
						<dd>Tensor or SparseTensor whose name, dtype and shape are used to
build the TensorInfo. For SparseTensors, the names of the three
constituent Tensors are used. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A TensorInfo protocol buffer constructed based on the supplied argument. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="build_tensor_info" class="method">
		<h4>
			<span title="System.object">object</span> <strong>build_tensor_info</strong>(<span title="System.string">string</span> tensor)
		</h4>
		<div class="content">Utility function to build TensorInfo proto from a Tensor. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.utils.build_tensor_info or tf.compat.v1.saved_model.build_tensor_info. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> tensor
						</dt>
						<dd>Tensor or SparseTensor whose name, dtype and shape are used to
build the TensorInfo. For SparseTensors, the names of the three
constituent Tensors are used. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A TensorInfo protocol buffer constructed based on the supplied argument. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="build_tensor_info" class="method">
		<h4>
			<span title="System.object">object</span> <strong>build_tensor_info</strong>(<span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> tensor)
		</h4>
		<div class="content">Utility function to build TensorInfo proto from a Tensor. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.utils.build_tensor_info or tf.compat.v1.saved_model.build_tensor_info. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> tensor
						</dt>
						<dd>Tensor or SparseTensor whose name, dtype and shape are used to
build the TensorInfo. For SparseTensors, the names of the three
constituent Tensors are used. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A TensorInfo protocol buffer constructed based on the supplied argument. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="build_tensor_info" class="method">
		<h4>
			<span title="System.object">object</span> <strong>build_tensor_info</strong>(<a href="../tensorflow/RaggedTensor.htm">RaggedTensor</a> tensor)
		</h4>
		<div class="content">Utility function to build TensorInfo proto from a Tensor. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.utils.build_tensor_info or tf.compat.v1.saved_model.build_tensor_info. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/RaggedTensor.htm">RaggedTensor</a></code> tensor
						</dt>
						<dd>Tensor or SparseTensor whose name, dtype and shape are used to
build the TensorInfo. For SparseTensors, the names of the three
constituent Tensors are used. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A TensorInfo protocol buffer constructed based on the supplied argument. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="build_tensor_info" class="method">
		<h4>
			<span title="System.object">object</span> <strong>build_tensor_info</strong>(<span title="System.int">int</span> tensor)
		</h4>
		<div class="content">Utility function to build TensorInfo proto from a Tensor. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.utils.build_tensor_info or tf.compat.v1.saved_model.build_tensor_info. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.int">int</span></code> tensor
						</dt>
						<dd>Tensor or SparseTensor whose name, dtype and shape are used to
build the TensorInfo. For SparseTensors, the names of the three
constituent Tensors are used. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A TensorInfo protocol buffer constructed based on the supplied argument. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="build_tensor_info_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>build_tensor_info_dyn</strong>(<span title="System.object">object</span> tensor)
		</h4>
		<div class="content">Utility function to build TensorInfo proto from a Tensor. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.utils.build_tensor_info or tf.compat.v1.saved_model.build_tensor_info. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> tensor
						</dt>
						<dd>Tensor or SparseTensor whose name, dtype and shape are used to
build the TensorInfo. For SparseTensors, the names of the three
constituent Tensors are used. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A TensorInfo protocol buffer constructed based on the supplied argument. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="classification_signature_def" class="method">
		<h4>
			<span title="System.object">object</span> <strong>classification_signature_def</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> examples, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> classes, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> scores)
		</h4>
		<div class="content">Creates classification signature from given examples and predictions. <p></p> This function produces signatures intended for use with the TensorFlow Serving
Classify API (tensorflow_serving/apis/prediction_service.proto), and so
constrains the input and output types to those allowed by TensorFlow Serving. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> examples
						</dt>
						<dd>A string `Tensor`, expected to accept serialized tf.Examples. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> classes
						</dt>
						<dd>A string `Tensor`.  Note that the ClassificationResponse message
requires that class labels are strings, not integers or anything else. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> scores
						</dt>
						<dd>a float `Tensor`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A classification-flavored signature_def. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="classification_signature_def" class="method">
		<h4>
			<span title="System.object">object</span> <strong>classification_signature_def</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> examples, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> classes, <span title="System.string">string</span> scores)
		</h4>
		<div class="content">Creates classification signature from given examples and predictions. <p></p> This function produces signatures intended for use with the TensorFlow Serving
Classify API (tensorflow_serving/apis/prediction_service.proto), and so
constrains the input and output types to those allowed by TensorFlow Serving. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> examples
						</dt>
						<dd>A string `Tensor`, expected to accept serialized tf.Examples. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> classes
						</dt>
						<dd>A string `Tensor`.  Note that the ClassificationResponse message
requires that class labels are strings, not integers or anything else. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> scores
						</dt>
						<dd>a float `Tensor`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A classification-flavored signature_def. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="classification_signature_def_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>classification_signature_def_dyn</strong>(<span title="System.object">object</span> examples, <span title="System.object">object</span> classes, <span title="System.object">object</span> scores)
		</h4>
		<div class="content">Creates classification signature from given examples and predictions. <p></p> This function produces signatures intended for use with the TensorFlow Serving
Classify API (tensorflow_serving/apis/prediction_service.proto), and so
constrains the input and output types to those allowed by TensorFlow Serving. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> examples
						</dt>
						<dd>A string `Tensor`, expected to accept serialized tf.Examples. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> classes
						</dt>
						<dd>A string `Tensor`.  Note that the ClassificationResponse message
requires that class labels are strings, not integers or anything else. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> scores
						</dt>
						<dd>a float `Tensor`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A classification-flavored signature_def. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="contains_saved_model" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>contains_saved_model</strong>(<span title="System.string">string</span> export_dir)
		</h4>
		<div class="content">Checks whether the provided export directory could contain a SavedModel. <p></p> Note that the method does not load any data by itself. If the method returns
`false`, the export directory definitely does not contain a SavedModel. If the
method returns `true`, the export directory may contain a SavedModel but
provides no guarantee that it can be loaded. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> export_dir
						</dt>
						<dd>Absolute string path to possible export location. For example,
'/my/foo/model'. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.bool">bool</span></code>
					</dt>
					<dd>True if the export directory contains SavedModel files, False otherwise. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_tensor_from_tensor_info" class="method">
		<h4>
			<a href="../tensorflow/SparseTensor.htm">SparseTensor</a> <strong>get_tensor_from_tensor_info</strong>(<span title="System.object">object</span> tensor_info, <a href="../tensorflow/Graph.htm">Graph</a> graph, <span title="System.string">string</span> import_scope)
		</h4>
		<div class="content">Returns the Tensor or CompositeTensor described by a TensorInfo proto. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.utils.get_tensor_from_tensor_info or tf.compat.v1.saved_model.get_tensor_from_tensor_info. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> tensor_info
						</dt>
						<dd>A TensorInfo proto describing a Tensor or SparseTensor or
CompositeTensor. 
						</dd>
						<dt>
							<code><a href="../tensorflow/Graph.htm">Graph</a></code> graph
						</dt>
						<dd>The tf.Graph in which tensors are looked up. If None, the
current default graph is used. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> import_scope
						</dt>
						<dd>If not None, names in `tensor_info` are prefixed with this
string before lookup. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/SparseTensor.htm">SparseTensor</a></code>
					</dt>
					<dd>The Tensor or SparseTensor or CompositeTensor in `graph` described by
`tensor_info`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_tensor_from_tensor_info_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_tensor_from_tensor_info_dyn</strong>(<span title="System.object">object</span> tensor_info, <span title="System.object">object</span> graph, <span title="System.object">object</span> import_scope)
		</h4>
		<div class="content">Returns the Tensor or CompositeTensor described by a TensorInfo proto. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.utils.get_tensor_from_tensor_info or tf.compat.v1.saved_model.get_tensor_from_tensor_info. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> tensor_info
						</dt>
						<dd>A TensorInfo proto describing a Tensor or SparseTensor or
CompositeTensor. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> graph
						</dt>
						<dd>The tf.Graph in which tensors are looked up. If None, the
current default graph is used. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> import_scope
						</dt>
						<dd>If not None, names in `tensor_info` are prefixed with this
string before lookup. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The Tensor or SparseTensor or CompositeTensor in `graph` described by
`tensor_info`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="is_valid_signature" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>is_valid_signature</strong>(<span title="System.object">object</span> signature_def)
		</h4>
		<div class="content">Determine whether a SignatureDef can be served by TensorFlow Serving. 




		</div>
	</div>
	<div id="is_valid_signature_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_valid_signature_dyn</strong>(<span title="System.object">object</span> signature_def)
		</h4>
		<div class="content">Determine whether a SignatureDef can be served by TensorFlow Serving. 




		</div>
	</div>
	<div id="load" class="method">
		<h4>
			<a href="../tensorflow.python.training.tracking.tracking/AutoTrackable.htm">AutoTrackable</a> <strong>load</strong>(<a href="../tensorflow/Session.htm">Session</a> sess, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> tags, <span title="System.string">string</span> export_dir, <span title="System.string">string</span> import_scope, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> saver_kwargs)
		</h4>
		<div class="content">Loads the model from a SavedModel as specified by tags. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.loader.load or tf.compat.v1.saved_model.load. There will be a new function for importing SavedModels in Tensorflow 2.0. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/Session.htm">Session</a></code> sess
						</dt>
						<dd>The TensorFlow session to restore the variables. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> tags
						</dt>
						<dd>Set of string tags to identify the required MetaGraphDef. These should
correspond to the tags used when saving the variables using the
SavedModel `save()` API. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> export_dir
						</dt>
						<dd>Directory in which the SavedModel protocol buffer and variables
to be loaded are located. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> import_scope
						</dt>
						<dd>Optional `string` -- if specified, prepend this string
followed by '/' to all loaded tensor names. This scope is applied to
tensor instances loaded into the passed session, but it is *not* written
through to the static `MetaGraphDef` protocol buffer that is returned. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> saver_kwargs
						</dt>
						<dd>Optional keyword arguments passed through to Saver. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.training.tracking.tracking/AutoTrackable.htm">AutoTrackable</a></code>
					</dt>
					<dd>The `MetaGraphDef` protocol buffer loaded in the provided session. This
can be used to further extract signature-defs, collection-defs, etc. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="load" class="method">
		<h4>
			<a href="../tensorflow.python.training.tracking.tracking/AutoTrackable.htm">AutoTrackable</a> <strong>load</strong>(<a href="../tensorflow/Session.htm">Session</a> sess, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> tags, <span title="System.Byte[]">Byte[]</span> export_dir, <span title="System.string">string</span> import_scope, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> saver_kwargs)
		</h4>
		<div class="content">Loads the model from a SavedModel as specified by tags. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.loader.load or tf.compat.v1.saved_model.load. There will be a new function for importing SavedModels in Tensorflow 2.0. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/Session.htm">Session</a></code> sess
						</dt>
						<dd>The TensorFlow session to restore the variables. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> tags
						</dt>
						<dd>Set of string tags to identify the required MetaGraphDef. These should
correspond to the tags used when saving the variables using the
SavedModel `save()` API. 
						</dd>
						<dt>
							<code><span title="System.Byte[]">Byte[]</span></code> export_dir
						</dt>
						<dd>Directory in which the SavedModel protocol buffer and variables
to be loaded are located. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> import_scope
						</dt>
						<dd>Optional `string` -- if specified, prepend this string
followed by '/' to all loaded tensor names. This scope is applied to
tensor instances loaded into the passed session, but it is *not* written
through to the static `MetaGraphDef` protocol buffer that is returned. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> saver_kwargs
						</dt>
						<dd>Optional keyword arguments passed through to Saver. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.training.tracking.tracking/AutoTrackable.htm">AutoTrackable</a></code>
					</dt>
					<dd>The `MetaGraphDef` protocol buffer loaded in the provided session. This
can be used to further extract signature-defs, collection-defs, etc. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="load" class="method">
		<h4>
			<a href="../tensorflow.python.training.tracking.tracking/AutoTrackable.htm">AutoTrackable</a> <strong>load</strong>(<a href="../tensorflow.python.training.monitored_session/_MonitoredSession.htm">_MonitoredSession</a> sess, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> tags, <span title="System.string">string</span> export_dir, <span title="System.string">string</span> import_scope, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> saver_kwargs)
		</h4>
		<div class="content">Loads the model from a SavedModel as specified by tags. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.loader.load or tf.compat.v1.saved_model.load. There will be a new function for importing SavedModels in Tensorflow 2.0. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.training.monitored_session/_MonitoredSession.htm">_MonitoredSession</a></code> sess
						</dt>
						<dd>The TensorFlow session to restore the variables. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> tags
						</dt>
						<dd>Set of string tags to identify the required MetaGraphDef. These should
correspond to the tags used when saving the variables using the
SavedModel `save()` API. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> export_dir
						</dt>
						<dd>Directory in which the SavedModel protocol buffer and variables
to be loaded are located. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> import_scope
						</dt>
						<dd>Optional `string` -- if specified, prepend this string
followed by '/' to all loaded tensor names. This scope is applied to
tensor instances loaded into the passed session, but it is *not* written
through to the static `MetaGraphDef` protocol buffer that is returned. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> saver_kwargs
						</dt>
						<dd>Optional keyword arguments passed through to Saver. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.training.tracking.tracking/AutoTrackable.htm">AutoTrackable</a></code>
					</dt>
					<dd>The `MetaGraphDef` protocol buffer loaded in the provided session. This
can be used to further extract signature-defs, collection-defs, etc. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="load" class="method">
		<h4>
			<a href="../tensorflow.python.training.tracking.tracking/AutoTrackable.htm">AutoTrackable</a> <strong>load</strong>(<a href="../tensorflow.python.training.monitored_session/_MonitoredSession.htm">_MonitoredSession</a> sess, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> tags, <span title="System.Byte[]">Byte[]</span> export_dir, <span title="System.string">string</span> import_scope, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> saver_kwargs)
		</h4>
		<div class="content">Loads the model from a SavedModel as specified by tags. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.loader.load or tf.compat.v1.saved_model.load. There will be a new function for importing SavedModels in Tensorflow 2.0. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.training.monitored_session/_MonitoredSession.htm">_MonitoredSession</a></code> sess
						</dt>
						<dd>The TensorFlow session to restore the variables. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> tags
						</dt>
						<dd>Set of string tags to identify the required MetaGraphDef. These should
correspond to the tags used when saving the variables using the
SavedModel `save()` API. 
						</dd>
						<dt>
							<code><span title="System.Byte[]">Byte[]</span></code> export_dir
						</dt>
						<dd>Directory in which the SavedModel protocol buffer and variables
to be loaded are located. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> import_scope
						</dt>
						<dd>Optional `string` -- if specified, prepend this string
followed by '/' to all loaded tensor names. This scope is applied to
tensor instances loaded into the passed session, but it is *not* written
through to the static `MetaGraphDef` protocol buffer that is returned. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> saver_kwargs
						</dt>
						<dd>Optional keyword arguments passed through to Saver. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.training.tracking.tracking/AutoTrackable.htm">AutoTrackable</a></code>
					</dt>
					<dd>The `MetaGraphDef` protocol buffer loaded in the provided session. This
can be used to further extract signature-defs, collection-defs, etc. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="load" class="method">
		<h4>
			<a href="../tensorflow.python.training.tracking.tracking/AutoTrackable.htm">AutoTrackable</a> <strong>load</strong>(<a href="../tensorflow.python.debug/LocalCLIDebugWrapperSession.htm">LocalCLIDebugWrapperSession</a> sess, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> tags, <span title="System.string">string</span> export_dir, <span title="System.string">string</span> import_scope, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> saver_kwargs)
		</h4>
		<div class="content">Loads the model from a SavedModel as specified by tags. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.loader.load or tf.compat.v1.saved_model.load. There will be a new function for importing SavedModels in Tensorflow 2.0. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.debug/LocalCLIDebugWrapperSession.htm">LocalCLIDebugWrapperSession</a></code> sess
						</dt>
						<dd>The TensorFlow session to restore the variables. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> tags
						</dt>
						<dd>Set of string tags to identify the required MetaGraphDef. These should
correspond to the tags used when saving the variables using the
SavedModel `save()` API. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> export_dir
						</dt>
						<dd>Directory in which the SavedModel protocol buffer and variables
to be loaded are located. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> import_scope
						</dt>
						<dd>Optional `string` -- if specified, prepend this string
followed by '/' to all loaded tensor names. This scope is applied to
tensor instances loaded into the passed session, but it is *not* written
through to the static `MetaGraphDef` protocol buffer that is returned. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> saver_kwargs
						</dt>
						<dd>Optional keyword arguments passed through to Saver. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.training.tracking.tracking/AutoTrackable.htm">AutoTrackable</a></code>
					</dt>
					<dd>The `MetaGraphDef` protocol buffer loaded in the provided session. This
can be used to further extract signature-defs, collection-defs, etc. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="load" class="method">
		<h4>
			<a href="../tensorflow.python.training.tracking.tracking/AutoTrackable.htm">AutoTrackable</a> <strong>load</strong>(<a href="../tensorflow.python.debug/LocalCLIDebugWrapperSession.htm">LocalCLIDebugWrapperSession</a> sess, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> tags, <span title="System.Byte[]">Byte[]</span> export_dir, <span title="System.string">string</span> import_scope, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> saver_kwargs)
		</h4>
		<div class="content">Loads the model from a SavedModel as specified by tags. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.loader.load or tf.compat.v1.saved_model.load. There will be a new function for importing SavedModels in Tensorflow 2.0. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.debug/LocalCLIDebugWrapperSession.htm">LocalCLIDebugWrapperSession</a></code> sess
						</dt>
						<dd>The TensorFlow session to restore the variables. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> tags
						</dt>
						<dd>Set of string tags to identify the required MetaGraphDef. These should
correspond to the tags used when saving the variables using the
SavedModel `save()` API. 
						</dd>
						<dt>
							<code><span title="System.Byte[]">Byte[]</span></code> export_dir
						</dt>
						<dd>Directory in which the SavedModel protocol buffer and variables
to be loaded are located. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> import_scope
						</dt>
						<dd>Optional `string` -- if specified, prepend this string
followed by '/' to all loaded tensor names. This scope is applied to
tensor instances loaded into the passed session, but it is *not* written
through to the static `MetaGraphDef` protocol buffer that is returned. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> saver_kwargs
						</dt>
						<dd>Optional keyword arguments passed through to Saver. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.training.tracking.tracking/AutoTrackable.htm">AutoTrackable</a></code>
					</dt>
					<dd>The `MetaGraphDef` protocol buffer loaded in the provided session. This
can be used to further extract signature-defs, collection-defs, etc. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="load_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>load_dyn</strong>(<span title="System.object">object</span> sess, <span title="System.object">object</span> tags, <span title="System.object">object</span> export_dir, <span title="System.object">object</span> import_scope, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> saver_kwargs)
		</h4>
		<div class="content">Loads the model from a SavedModel as specified by tags. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.loader.load or tf.compat.v1.saved_model.load. There will be a new function for importing SavedModels in Tensorflow 2.0. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> sess
						</dt>
						<dd>The TensorFlow session to restore the variables. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> tags
						</dt>
						<dd>Set of string tags to identify the required MetaGraphDef. These should
correspond to the tags used when saving the variables using the
SavedModel `save()` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> export_dir
						</dt>
						<dd>Directory in which the SavedModel protocol buffer and variables
to be loaded are located. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> import_scope
						</dt>
						<dd>Optional `string` -- if specified, prepend this string
followed by '/' to all loaded tensor names. This scope is applied to
tensor instances loaded into the passed session, but it is *not* written
through to the static `MetaGraphDef` protocol buffer that is returned. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> saver_kwargs
						</dt>
						<dd>Optional keyword arguments passed through to Saver. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The `MetaGraphDef` protocol buffer loaded in the provided session. This
can be used to further extract signature-defs, collection-defs, etc. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="load_v2" class="method">
		<h4>
			<span title="System.object">object</span> <strong>load_v2</strong>(<span title="System.string">string</span> export_dir, <span title="System.string">string</span> tags)
		</h4>
		<div class="content">Load a SavedModel from `export_dir`. <p></p> Signatures associated with the SavedModel are available as functions:
Objects exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> additionally have trackable
objects and functions assigned to attributes:
_Loading Keras models_ <p></p> Keras models are trackable, so they can be saved to SavedModel. The object
returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> is not a Keras object (i.e. doesn't have
`.fit`, `.predict`, etc. methods). A few attributes and functions are still
available: `.variables`, `.trainable_variables` and `.__call__`.
Use <a href="..\..\tf\keras\models\load_model.md"><code>tf.keras.models.load_model</code></a> to restore the Keras model. <p></p> _Importing SavedModels from TensorFlow 1.x_ <p></p> SavedModels from <a href="..\..\tf\estimator\Estimator.md"><code>tf.estimator.Estimator</code></a> or 1.x SavedModel APIs have a flat
graph instead of <a href="..\..\tf\function.md"><code>tf.function</code></a> objects. These SavedModels will have functions
corresponding to their signatures in the `.signatures` attribute, but also
have a `.prune` method which allows you to extract functions for new
subgraphs. This is equivalent to importing the SavedModel and naming feeds and
fetches in a Session from TensorFlow 1.x.
See `tf.compat.v1.wrap_function` for details. These SavedModels also have a
`.variables` attribute containing imported variables, and a `.graph` attribute
representing the whole imported graph. For SavedModels exported from
<a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, variables are instead assigned to whichever attributes
they were assigned before export. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> export_dir
						</dt>
						<dd>The SavedModel directory to load from. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> tags
						</dt>
						<dd>A tag or sequence of tags identifying the MetaGraph to load. Optional
if the SavedModel contains a single MetaGraph, as for those exported from
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A trackable object with a `signatures` attribute mapping from signature
keys to functions. If the SavedModel was exported by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>,
it also points to trackable objects and functions which were attached
to the exported object. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>imported = tf.saved_model.load(path)
            f = imported.signatures["serving_default"]
            print(f(x=tf.constant([[1.]]))) </pre>
</div>
		</div>
	</div>
	<div id="load_v2" class="method">
		<h4>
			<span title="System.object">object</span> <strong>load_v2</strong>(<span title="System.string">string</span> export_dir, <span title="System.Collections.Generic.IDictionary<string, IEnumerable<int>>">IDictionary&lt;string, IEnumerable&lt;int&gt;&gt;</span> tags)
		</h4>
		<div class="content">Load a SavedModel from `export_dir`. <p></p> Signatures associated with the SavedModel are available as functions:
Objects exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> additionally have trackable
objects and functions assigned to attributes:
_Loading Keras models_ <p></p> Keras models are trackable, so they can be saved to SavedModel. The object
returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> is not a Keras object (i.e. doesn't have
`.fit`, `.predict`, etc. methods). A few attributes and functions are still
available: `.variables`, `.trainable_variables` and `.__call__`.
Use <a href="..\..\tf\keras\models\load_model.md"><code>tf.keras.models.load_model</code></a> to restore the Keras model. <p></p> _Importing SavedModels from TensorFlow 1.x_ <p></p> SavedModels from <a href="..\..\tf\estimator\Estimator.md"><code>tf.estimator.Estimator</code></a> or 1.x SavedModel APIs have a flat
graph instead of <a href="..\..\tf\function.md"><code>tf.function</code></a> objects. These SavedModels will have functions
corresponding to their signatures in the `.signatures` attribute, but also
have a `.prune` method which allows you to extract functions for new
subgraphs. This is equivalent to importing the SavedModel and naming feeds and
fetches in a Session from TensorFlow 1.x.
See `tf.compat.v1.wrap_function` for details. These SavedModels also have a
`.variables` attribute containing imported variables, and a `.graph` attribute
representing the whole imported graph. For SavedModels exported from
<a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, variables are instead assigned to whichever attributes
they were assigned before export. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> export_dir
						</dt>
						<dd>The SavedModel directory to load from. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, IEnumerable<int>>">IDictionary&lt;string, IEnumerable&lt;int&gt;&gt;</span></code> tags
						</dt>
						<dd>A tag or sequence of tags identifying the MetaGraph to load. Optional
if the SavedModel contains a single MetaGraph, as for those exported from
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A trackable object with a `signatures` attribute mapping from signature
keys to functions. If the SavedModel was exported by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>,
it also points to trackable objects and functions which were attached
to the exported object. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>imported = tf.saved_model.load(path)
            f = imported.signatures["serving_default"]
            print(f(x=tf.constant([[1.]]))) </pre>
</div>
		</div>
	</div>
	<div id="load_v2" class="method">
		<h4>
			<span title="System.object">object</span> <strong>load_v2</strong>(<span title="System.Byte[]">Byte[]</span> export_dir, <span title="System.Collections.Generic.IDictionary<string, IEnumerable<int>>">IDictionary&lt;string, IEnumerable&lt;int&gt;&gt;</span> tags)
		</h4>
		<div class="content">Load a SavedModel from `export_dir`. <p></p> Signatures associated with the SavedModel are available as functions:
Objects exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> additionally have trackable
objects and functions assigned to attributes:
_Loading Keras models_ <p></p> Keras models are trackable, so they can be saved to SavedModel. The object
returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> is not a Keras object (i.e. doesn't have
`.fit`, `.predict`, etc. methods). A few attributes and functions are still
available: `.variables`, `.trainable_variables` and `.__call__`.
Use <a href="..\..\tf\keras\models\load_model.md"><code>tf.keras.models.load_model</code></a> to restore the Keras model. <p></p> _Importing SavedModels from TensorFlow 1.x_ <p></p> SavedModels from <a href="..\..\tf\estimator\Estimator.md"><code>tf.estimator.Estimator</code></a> or 1.x SavedModel APIs have a flat
graph instead of <a href="..\..\tf\function.md"><code>tf.function</code></a> objects. These SavedModels will have functions
corresponding to their signatures in the `.signatures` attribute, but also
have a `.prune` method which allows you to extract functions for new
subgraphs. This is equivalent to importing the SavedModel and naming feeds and
fetches in a Session from TensorFlow 1.x.
See `tf.compat.v1.wrap_function` for details. These SavedModels also have a
`.variables` attribute containing imported variables, and a `.graph` attribute
representing the whole imported graph. For SavedModels exported from
<a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, variables are instead assigned to whichever attributes
they were assigned before export. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Byte[]">Byte[]</span></code> export_dir
						</dt>
						<dd>The SavedModel directory to load from. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, IEnumerable<int>>">IDictionary&lt;string, IEnumerable&lt;int&gt;&gt;</span></code> tags
						</dt>
						<dd>A tag or sequence of tags identifying the MetaGraph to load. Optional
if the SavedModel contains a single MetaGraph, as for those exported from
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A trackable object with a `signatures` attribute mapping from signature
keys to functions. If the SavedModel was exported by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>,
it also points to trackable objects and functions which were attached
to the exported object. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>imported = tf.saved_model.load(path)
            f = imported.signatures["serving_default"]
            print(f(x=tf.constant([[1.]]))) </pre>
</div>
		</div>
	</div>
	<div id="load_v2" class="method">
		<h4>
			<span title="System.object">object</span> <strong>load_v2</strong>(<span title="System.Byte[]">Byte[]</span> export_dir, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> tags)
		</h4>
		<div class="content">Load a SavedModel from `export_dir`. <p></p> Signatures associated with the SavedModel are available as functions:
Objects exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> additionally have trackable
objects and functions assigned to attributes:
_Loading Keras models_ <p></p> Keras models are trackable, so they can be saved to SavedModel. The object
returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> is not a Keras object (i.e. doesn't have
`.fit`, `.predict`, etc. methods). A few attributes and functions are still
available: `.variables`, `.trainable_variables` and `.__call__`.
Use <a href="..\..\tf\keras\models\load_model.md"><code>tf.keras.models.load_model</code></a> to restore the Keras model. <p></p> _Importing SavedModels from TensorFlow 1.x_ <p></p> SavedModels from <a href="..\..\tf\estimator\Estimator.md"><code>tf.estimator.Estimator</code></a> or 1.x SavedModel APIs have a flat
graph instead of <a href="..\..\tf\function.md"><code>tf.function</code></a> objects. These SavedModels will have functions
corresponding to their signatures in the `.signatures` attribute, but also
have a `.prune` method which allows you to extract functions for new
subgraphs. This is equivalent to importing the SavedModel and naming feeds and
fetches in a Session from TensorFlow 1.x.
See `tf.compat.v1.wrap_function` for details. These SavedModels also have a
`.variables` attribute containing imported variables, and a `.graph` attribute
representing the whole imported graph. For SavedModels exported from
<a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, variables are instead assigned to whichever attributes
they were assigned before export. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Byte[]">Byte[]</span></code> export_dir
						</dt>
						<dd>The SavedModel directory to load from. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> tags
						</dt>
						<dd>A tag or sequence of tags identifying the MetaGraph to load. Optional
if the SavedModel contains a single MetaGraph, as for those exported from
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A trackable object with a `signatures` attribute mapping from signature
keys to functions. If the SavedModel was exported by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>,
it also points to trackable objects and functions which were attached
to the exported object. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>imported = tf.saved_model.load(path)
            f = imported.signatures["serving_default"]
            print(f(x=tf.constant([[1.]]))) </pre>
</div>
		</div>
	</div>
	<div id="load_v2" class="method">
		<h4>
			<span title="System.object">object</span> <strong>load_v2</strong>(<span title="System.Byte[]">Byte[]</span> export_dir, <span title="System.string">string</span> tags)
		</h4>
		<div class="content">Load a SavedModel from `export_dir`. <p></p> Signatures associated with the SavedModel are available as functions:
Objects exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> additionally have trackable
objects and functions assigned to attributes:
_Loading Keras models_ <p></p> Keras models are trackable, so they can be saved to SavedModel. The object
returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> is not a Keras object (i.e. doesn't have
`.fit`, `.predict`, etc. methods). A few attributes and functions are still
available: `.variables`, `.trainable_variables` and `.__call__`.
Use <a href="..\..\tf\keras\models\load_model.md"><code>tf.keras.models.load_model</code></a> to restore the Keras model. <p></p> _Importing SavedModels from TensorFlow 1.x_ <p></p> SavedModels from <a href="..\..\tf\estimator\Estimator.md"><code>tf.estimator.Estimator</code></a> or 1.x SavedModel APIs have a flat
graph instead of <a href="..\..\tf\function.md"><code>tf.function</code></a> objects. These SavedModels will have functions
corresponding to their signatures in the `.signatures` attribute, but also
have a `.prune` method which allows you to extract functions for new
subgraphs. This is equivalent to importing the SavedModel and naming feeds and
fetches in a Session from TensorFlow 1.x.
See `tf.compat.v1.wrap_function` for details. These SavedModels also have a
`.variables` attribute containing imported variables, and a `.graph` attribute
representing the whole imported graph. For SavedModels exported from
<a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, variables are instead assigned to whichever attributes
they were assigned before export. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Byte[]">Byte[]</span></code> export_dir
						</dt>
						<dd>The SavedModel directory to load from. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> tags
						</dt>
						<dd>A tag or sequence of tags identifying the MetaGraph to load. Optional
if the SavedModel contains a single MetaGraph, as for those exported from
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A trackable object with a `signatures` attribute mapping from signature
keys to functions. If the SavedModel was exported by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>,
it also points to trackable objects and functions which were attached
to the exported object. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>imported = tf.saved_model.load(path)
            f = imported.signatures["serving_default"]
            print(f(x=tf.constant([[1.]]))) </pre>
</div>
		</div>
	</div>
	<div id="load_v2" class="method">
		<h4>
			<span title="System.object">object</span> <strong>load_v2</strong>(<span title="System.string">string</span> export_dir, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> tags)
		</h4>
		<div class="content">Load a SavedModel from `export_dir`. <p></p> Signatures associated with the SavedModel are available as functions:
Objects exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> additionally have trackable
objects and functions assigned to attributes:
_Loading Keras models_ <p></p> Keras models are trackable, so they can be saved to SavedModel. The object
returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> is not a Keras object (i.e. doesn't have
`.fit`, `.predict`, etc. methods). A few attributes and functions are still
available: `.variables`, `.trainable_variables` and `.__call__`.
Use <a href="..\..\tf\keras\models\load_model.md"><code>tf.keras.models.load_model</code></a> to restore the Keras model. <p></p> _Importing SavedModels from TensorFlow 1.x_ <p></p> SavedModels from <a href="..\..\tf\estimator\Estimator.md"><code>tf.estimator.Estimator</code></a> or 1.x SavedModel APIs have a flat
graph instead of <a href="..\..\tf\function.md"><code>tf.function</code></a> objects. These SavedModels will have functions
corresponding to their signatures in the `.signatures` attribute, but also
have a `.prune` method which allows you to extract functions for new
subgraphs. This is equivalent to importing the SavedModel and naming feeds and
fetches in a Session from TensorFlow 1.x.
See `tf.compat.v1.wrap_function` for details. These SavedModels also have a
`.variables` attribute containing imported variables, and a `.graph` attribute
representing the whole imported graph. For SavedModels exported from
<a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, variables are instead assigned to whichever attributes
they were assigned before export. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> export_dir
						</dt>
						<dd>The SavedModel directory to load from. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> tags
						</dt>
						<dd>A tag or sequence of tags identifying the MetaGraph to load. Optional
if the SavedModel contains a single MetaGraph, as for those exported from
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A trackable object with a `signatures` attribute mapping from signature
keys to functions. If the SavedModel was exported by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>,
it also points to trackable objects and functions which were attached
to the exported object. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>imported = tf.saved_model.load(path)
            f = imported.signatures["serving_default"]
            print(f(x=tf.constant([[1.]]))) </pre>
</div>
		</div>
	</div>
	<div id="load_v2_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>load_v2_dyn</strong>(<span title="System.object">object</span> export_dir, <span title="System.object">object</span> tags)
		</h4>
		<div class="content">Load a SavedModel from `export_dir`. <p></p> Signatures associated with the SavedModel are available as functions:
Objects exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> additionally have trackable
objects and functions assigned to attributes:
_Loading Keras models_ <p></p> Keras models are trackable, so they can be saved to SavedModel. The object
returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> is not a Keras object (i.e. doesn't have
`.fit`, `.predict`, etc. methods). A few attributes and functions are still
available: `.variables`, `.trainable_variables` and `.__call__`.
Use <a href="..\..\tf\keras\models\load_model.md"><code>tf.keras.models.load_model</code></a> to restore the Keras model. <p></p> _Importing SavedModels from TensorFlow 1.x_ <p></p> SavedModels from <a href="..\..\tf\estimator\Estimator.md"><code>tf.estimator.Estimator</code></a> or 1.x SavedModel APIs have a flat
graph instead of <a href="..\..\tf\function.md"><code>tf.function</code></a> objects. These SavedModels will have functions
corresponding to their signatures in the `.signatures` attribute, but also
have a `.prune` method which allows you to extract functions for new
subgraphs. This is equivalent to importing the SavedModel and naming feeds and
fetches in a Session from TensorFlow 1.x.
See `tf.compat.v1.wrap_function` for details. These SavedModels also have a
`.variables` attribute containing imported variables, and a `.graph` attribute
representing the whole imported graph. For SavedModels exported from
<a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, variables are instead assigned to whichever attributes
they were assigned before export. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> export_dir
						</dt>
						<dd>The SavedModel directory to load from. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> tags
						</dt>
						<dd>A tag or sequence of tags identifying the MetaGraph to load. Optional
if the SavedModel contains a single MetaGraph, as for those exported from
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A trackable object with a `signatures` attribute mapping from signature
keys to functions. If the SavedModel was exported by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a>,
it also points to trackable objects and functions which were attached
to the exported object. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>imported = tf.saved_model.load(path)
            f = imported.signatures["serving_default"]
            print(f(x=tf.constant([[1.]]))) </pre>
</div>
		</div>
	</div>
	<div id="main_op_with_restore" class="method">
		<h4>
			<span title="System.object">object</span> <strong>main_op_with_restore</strong>(<span title="System.object">object</span> restore_op_name)
		</h4>
		<div class="content">Returns a main op to init variables, tables and restore the graph. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.main_op_with_restore or tf.compat.v1.saved_model.main_op.main_op_with_restore. <p></p> Returns the main op including the group of ops that initializes all
variables, initialize local variables, initialize all tables and the restore
op name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> restore_op_name
						</dt>
						<dd>Name of the op to use to restore the graph. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The set of ops to be run as part of the main op upon the load operation. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="main_op_with_restore_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>main_op_with_restore_dyn</strong>(<span title="System.object">object</span> restore_op_name)
		</h4>
		<div class="content">Returns a main op to init variables, tables and restore the graph. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.main_op_with_restore or tf.compat.v1.saved_model.main_op.main_op_with_restore. <p></p> Returns the main op including the group of ops that initializes all
variables, initialize local variables, initialize all tables and the restore
op name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> restore_op_name
						</dt>
						<dd>Name of the op to use to restore the graph. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The set of ops to be run as part of the main op upon the load operation. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="predict_signature_def" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict_signature_def</strong>(<span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> inputs, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> outputs)
		</h4>
		<div class="content">Creates prediction signature from given inputs and outputs. <p></p> This function produces signatures intended for use with the TensorFlow Serving
Predict API (tensorflow_serving/apis/prediction_service.proto). This API
imposes no constraints on the input and output types. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> inputs
						</dt>
						<dd>dict of string to `Tensor`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> outputs
						</dt>
						<dd>dict of string to `Tensor`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A prediction-flavored signature_def. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="predict_signature_def_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict_signature_def_dyn</strong>(<span title="System.object">object</span> inputs, <span title="System.object">object</span> outputs)
		</h4>
		<div class="content">Creates prediction signature from given inputs and outputs. <p></p> This function produces signatures intended for use with the TensorFlow Serving
Predict API (tensorflow_serving/apis/prediction_service.proto). This API
imposes no constraints on the input and output types. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> inputs
						</dt>
						<dd>dict of string to `Tensor`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> outputs
						</dt>
						<dd>dict of string to `Tensor`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A prediction-flavored signature_def. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="regression_signature_def" class="method">
		<h4>
			<span title="System.object">object</span> <strong>regression_signature_def</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> examples, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> predictions)
		</h4>
		<div class="content">Creates regression signature from given examples and predictions. <p></p> This function produces signatures intended for use with the TensorFlow Serving
Regress API (tensorflow_serving/apis/prediction_service.proto), and so
constrains the input and output types to those allowed by TensorFlow Serving. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> examples
						</dt>
						<dd>A string `Tensor`, expected to accept serialized tf.Examples. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> predictions
						</dt>
						<dd>A float `Tensor`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A regression-flavored signature_def. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="regression_signature_def_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>regression_signature_def_dyn</strong>(<span title="System.object">object</span> examples, <span title="System.object">object</span> predictions)
		</h4>
		<div class="content">Creates regression signature from given examples and predictions. <p></p> This function produces signatures intended for use with the TensorFlow Serving
Regress API (tensorflow_serving/apis/prediction_service.proto), and so
constrains the input and output types to those allowed by TensorFlow Serving. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> examples
						</dt>
						<dd>A string `Tensor`, expected to accept serialized tf.Examples. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> predictions
						</dt>
						<dd>A float `Tensor`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A regression-flavored signature_def. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="save" class="method">
		<h4>
			<span title="System.void">void</span> <strong>save</strong>(<span title="System.object">object</span> obj, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> export_dir, <span title="System.object">object</span> signatures)
		</h4>
		<div class="content">Exports the Trackable object `obj` to [SavedModel format](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md). <p></p> Example usage:
The resulting SavedModel is then servable with an input named "x", its value
having any shape and dtype float32. <p></p> The optional `signatures` argument controls which methods in `obj` will be
available to programs which consume `SavedModel`s, for example serving
APIs. Python functions may be decorated with
`@tf.function(input_signature=...)` and passed as signatures directly, or
lazily with a call to `get_concrete_function` on the method decorated with
`@tf.function`. <p></p> If the `signatures` argument is omitted, `obj` will be searched for
`@tf.function`-decorated methods. If exactly one `@tf.function` is found, that
method will be used as the default signature for the SavedModel. This behavior
is expected to change in the future, when a corresponding
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> symbol is added. At that point signatures will be
completely optional, and any `@tf.function` attached to `obj` or its
dependencies will be exported for use with `load`. <p></p> When invoking a signature in an exported SavedModel, `Tensor` arguments are
identified by name. These names will come from the Python function's argument
names by default. They may be overridden by specifying a `name=...` argument
in the corresponding <a href="..\..\tf\TensorSpec.md"><code>tf.TensorSpec</code></a> object. Explicit naming is required if
multiple `Tensor`s are passed through a single argument to the Python
function. <p></p> The outputs of functions used as `signatures` must either be flat lists, in
which case outputs will be numbered, or a dictionary mapping string keys to
`Tensor`, in which case the keys will be used to name outputs. <p></p> Signatures are available in objects returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> as a
`.signatures` attribute. This is a reserved attribute: <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>
on an object with a custom `.signatures` attribute will raise an exception. <p></p> Since <a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> objects are also Trackable, this function can be
used to export Keras models. For example, exporting with a signature
specified:
Exporting from a function without a fixed signature:
<a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> instances constructed from inputs and outputs already have a
signature and so do not require a `@tf.function` decorator or a `signatures`
argument. If neither are specified, the model's forward pass is exported.
Variables must be tracked by assigning them to an attribute of a tracked
object or to an attribute of `obj` directly. TensorFlow objects (e.g. layers
from <a href="..\..\tf\keras\layers.md"><code>tf.keras.layers</code></a>, optimizers from <a href="..\..\tf\train.md"><code>tf.train</code></a>) track their variables
automatically. This is the same tracking scheme that <a href="..\..\tf\train\Checkpoint.md"><code>tf.train.Checkpoint</code></a>
uses, and an exported `Checkpoint` object may be restored as a training
checkpoint by pointing <a href="..\..\tf\train\Checkpoint\restore.md"><code>tf.train.Checkpoint.restore</code></a> to the SavedModel's
"variables/" subdirectory. Currently variables are the only stateful objects
supported by <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, but others (e.g. tables) will be supported
in the future. <p></p> <a href="..\..\tf\function.md"><code>tf.function</code></a> does not hard-code device annotations from outside the function
body, instead using the calling context's device. This means for example that
exporting a model which runs on a GPU and serving it on a CPU will generally
work, with some exceptions. <a href="..\..\tf\device.md"><code>tf.device</code></a> annotations inside the body of the
function will be hard-coded in the exported model; this type of annotation is
discouraged. Device-specific operations, e.g. with "cuDNN" in the name or with
device-specific layouts, may cause issues. Currently a `DistributionStrategy`
is another exception: active distribution strategies will cause device
placements to be hard-coded in a function. Exporting a single-device
computation and importing under a `DistributionStrategy` is not currently
supported, but may be in the future. <p></p> SavedModels exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> [strip default-valued
attributes](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md#stripping-default-valued-attributes)
automatically, which removes one source of incompatibilities when the consumer
of a SavedModel is running an older TensorFlow version than the
producer. There are however other sources of incompatibilities which are not
handled automatically, such as when the exported model contains operations
which the consumer does not have definitions for. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> obj
						</dt>
						<dd>A trackable object to export. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> export_dir
						</dt>
						<dd>A directory in which to write the SavedModel. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> signatures
						</dt>
						<dd>Optional, either a <a href="..\..\tf\function.md"><code>tf.function</code></a> with an input signature
specified or the result of `f.get_concrete_function` on a
`@tf.function`-decorated function `f`, in which case `f` will be used to
generate a signature for the SavedModel under the default serving
signature key. `signatures` may also be a dictionary, in which case it
maps from signature keys to either <a href="..\..\tf\function.md"><code>tf.function</code></a> instances with input
signatures or concrete functions. The keys of such a dictionary may be
arbitrary strings, but will typically be from the
<a href="..\..\tf\saved_model\signature_constants.md"><code>tf.saved_model.signature_constants</code></a> module. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>class Adder(tf.Module): <p></p> @tf.function(input_signature=[tf.TensorSpec(shape=None, dtype=tf.float32)])
def add(self, x):
  return x + x + 1. <p></p> to_export = Adder()
tf.saved_model.save(to_export, '/tmp/adder') </pre>
</div>
		</div>
	</div>
	<div id="save" class="method">
		<h4>
			<span title="System.void">void</span> <strong>save</strong>(<span title="System.object">object</span> obj, <span title="System.Byte[]">Byte[]</span> export_dir, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> signatures)
		</h4>
		<div class="content">Exports the Trackable object `obj` to [SavedModel format](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md). <p></p> Example usage:
The resulting SavedModel is then servable with an input named "x", its value
having any shape and dtype float32. <p></p> The optional `signatures` argument controls which methods in `obj` will be
available to programs which consume `SavedModel`s, for example serving
APIs. Python functions may be decorated with
`@tf.function(input_signature=...)` and passed as signatures directly, or
lazily with a call to `get_concrete_function` on the method decorated with
`@tf.function`. <p></p> If the `signatures` argument is omitted, `obj` will be searched for
`@tf.function`-decorated methods. If exactly one `@tf.function` is found, that
method will be used as the default signature for the SavedModel. This behavior
is expected to change in the future, when a corresponding
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> symbol is added. At that point signatures will be
completely optional, and any `@tf.function` attached to `obj` or its
dependencies will be exported for use with `load`. <p></p> When invoking a signature in an exported SavedModel, `Tensor` arguments are
identified by name. These names will come from the Python function's argument
names by default. They may be overridden by specifying a `name=...` argument
in the corresponding <a href="..\..\tf\TensorSpec.md"><code>tf.TensorSpec</code></a> object. Explicit naming is required if
multiple `Tensor`s are passed through a single argument to the Python
function. <p></p> The outputs of functions used as `signatures` must either be flat lists, in
which case outputs will be numbered, or a dictionary mapping string keys to
`Tensor`, in which case the keys will be used to name outputs. <p></p> Signatures are available in objects returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> as a
`.signatures` attribute. This is a reserved attribute: <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>
on an object with a custom `.signatures` attribute will raise an exception. <p></p> Since <a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> objects are also Trackable, this function can be
used to export Keras models. For example, exporting with a signature
specified:
Exporting from a function without a fixed signature:
<a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> instances constructed from inputs and outputs already have a
signature and so do not require a `@tf.function` decorator or a `signatures`
argument. If neither are specified, the model's forward pass is exported.
Variables must be tracked by assigning them to an attribute of a tracked
object or to an attribute of `obj` directly. TensorFlow objects (e.g. layers
from <a href="..\..\tf\keras\layers.md"><code>tf.keras.layers</code></a>, optimizers from <a href="..\..\tf\train.md"><code>tf.train</code></a>) track their variables
automatically. This is the same tracking scheme that <a href="..\..\tf\train\Checkpoint.md"><code>tf.train.Checkpoint</code></a>
uses, and an exported `Checkpoint` object may be restored as a training
checkpoint by pointing <a href="..\..\tf\train\Checkpoint\restore.md"><code>tf.train.Checkpoint.restore</code></a> to the SavedModel's
"variables/" subdirectory. Currently variables are the only stateful objects
supported by <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, but others (e.g. tables) will be supported
in the future. <p></p> <a href="..\..\tf\function.md"><code>tf.function</code></a> does not hard-code device annotations from outside the function
body, instead using the calling context's device. This means for example that
exporting a model which runs on a GPU and serving it on a CPU will generally
work, with some exceptions. <a href="..\..\tf\device.md"><code>tf.device</code></a> annotations inside the body of the
function will be hard-coded in the exported model; this type of annotation is
discouraged. Device-specific operations, e.g. with "cuDNN" in the name or with
device-specific layouts, may cause issues. Currently a `DistributionStrategy`
is another exception: active distribution strategies will cause device
placements to be hard-coded in a function. Exporting a single-device
computation and importing under a `DistributionStrategy` is not currently
supported, but may be in the future. <p></p> SavedModels exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> [strip default-valued
attributes](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md#stripping-default-valued-attributes)
automatically, which removes one source of incompatibilities when the consumer
of a SavedModel is running an older TensorFlow version than the
producer. There are however other sources of incompatibilities which are not
handled automatically, such as when the exported model contains operations
which the consumer does not have definitions for. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> obj
						</dt>
						<dd>A trackable object to export. 
						</dd>
						<dt>
							<code><span title="System.Byte[]">Byte[]</span></code> export_dir
						</dt>
						<dd>A directory in which to write the SavedModel. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> signatures
						</dt>
						<dd>Optional, either a <a href="..\..\tf\function.md"><code>tf.function</code></a> with an input signature
specified or the result of `f.get_concrete_function` on a
`@tf.function`-decorated function `f`, in which case `f` will be used to
generate a signature for the SavedModel under the default serving
signature key. `signatures` may also be a dictionary, in which case it
maps from signature keys to either <a href="..\..\tf\function.md"><code>tf.function</code></a> instances with input
signatures or concrete functions. The keys of such a dictionary may be
arbitrary strings, but will typically be from the
<a href="..\..\tf\saved_model\signature_constants.md"><code>tf.saved_model.signature_constants</code></a> module. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>class Adder(tf.Module): <p></p> @tf.function(input_signature=[tf.TensorSpec(shape=None, dtype=tf.float32)])
def add(self, x):
  return x + x + 1. <p></p> to_export = Adder()
tf.saved_model.save(to_export, '/tmp/adder') </pre>
</div>
		</div>
	</div>
	<div id="save" class="method">
		<h4>
			<span title="System.void">void</span> <strong>save</strong>(<span title="System.object">object</span> obj, <span title="System.Byte[]">Byte[]</span> export_dir, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> signatures)
		</h4>
		<div class="content">Exports the Trackable object `obj` to [SavedModel format](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md). <p></p> Example usage:
The resulting SavedModel is then servable with an input named "x", its value
having any shape and dtype float32. <p></p> The optional `signatures` argument controls which methods in `obj` will be
available to programs which consume `SavedModel`s, for example serving
APIs. Python functions may be decorated with
`@tf.function(input_signature=...)` and passed as signatures directly, or
lazily with a call to `get_concrete_function` on the method decorated with
`@tf.function`. <p></p> If the `signatures` argument is omitted, `obj` will be searched for
`@tf.function`-decorated methods. If exactly one `@tf.function` is found, that
method will be used as the default signature for the SavedModel. This behavior
is expected to change in the future, when a corresponding
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> symbol is added. At that point signatures will be
completely optional, and any `@tf.function` attached to `obj` or its
dependencies will be exported for use with `load`. <p></p> When invoking a signature in an exported SavedModel, `Tensor` arguments are
identified by name. These names will come from the Python function's argument
names by default. They may be overridden by specifying a `name=...` argument
in the corresponding <a href="..\..\tf\TensorSpec.md"><code>tf.TensorSpec</code></a> object. Explicit naming is required if
multiple `Tensor`s are passed through a single argument to the Python
function. <p></p> The outputs of functions used as `signatures` must either be flat lists, in
which case outputs will be numbered, or a dictionary mapping string keys to
`Tensor`, in which case the keys will be used to name outputs. <p></p> Signatures are available in objects returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> as a
`.signatures` attribute. This is a reserved attribute: <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>
on an object with a custom `.signatures` attribute will raise an exception. <p></p> Since <a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> objects are also Trackable, this function can be
used to export Keras models. For example, exporting with a signature
specified:
Exporting from a function without a fixed signature:
<a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> instances constructed from inputs and outputs already have a
signature and so do not require a `@tf.function` decorator or a `signatures`
argument. If neither are specified, the model's forward pass is exported.
Variables must be tracked by assigning them to an attribute of a tracked
object or to an attribute of `obj` directly. TensorFlow objects (e.g. layers
from <a href="..\..\tf\keras\layers.md"><code>tf.keras.layers</code></a>, optimizers from <a href="..\..\tf\train.md"><code>tf.train</code></a>) track their variables
automatically. This is the same tracking scheme that <a href="..\..\tf\train\Checkpoint.md"><code>tf.train.Checkpoint</code></a>
uses, and an exported `Checkpoint` object may be restored as a training
checkpoint by pointing <a href="..\..\tf\train\Checkpoint\restore.md"><code>tf.train.Checkpoint.restore</code></a> to the SavedModel's
"variables/" subdirectory. Currently variables are the only stateful objects
supported by <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, but others (e.g. tables) will be supported
in the future. <p></p> <a href="..\..\tf\function.md"><code>tf.function</code></a> does not hard-code device annotations from outside the function
body, instead using the calling context's device. This means for example that
exporting a model which runs on a GPU and serving it on a CPU will generally
work, with some exceptions. <a href="..\..\tf\device.md"><code>tf.device</code></a> annotations inside the body of the
function will be hard-coded in the exported model; this type of annotation is
discouraged. Device-specific operations, e.g. with "cuDNN" in the name or with
device-specific layouts, may cause issues. Currently a `DistributionStrategy`
is another exception: active distribution strategies will cause device
placements to be hard-coded in a function. Exporting a single-device
computation and importing under a `DistributionStrategy` is not currently
supported, but may be in the future. <p></p> SavedModels exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> [strip default-valued
attributes](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md#stripping-default-valued-attributes)
automatically, which removes one source of incompatibilities when the consumer
of a SavedModel is running an older TensorFlow version than the
producer. There are however other sources of incompatibilities which are not
handled automatically, such as when the exported model contains operations
which the consumer does not have definitions for. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> obj
						</dt>
						<dd>A trackable object to export. 
						</dd>
						<dt>
							<code><span title="System.Byte[]">Byte[]</span></code> export_dir
						</dt>
						<dd>A directory in which to write the SavedModel. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> signatures
						</dt>
						<dd>Optional, either a <a href="..\..\tf\function.md"><code>tf.function</code></a> with an input signature
specified or the result of `f.get_concrete_function` on a
`@tf.function`-decorated function `f`, in which case `f` will be used to
generate a signature for the SavedModel under the default serving
signature key. `signatures` may also be a dictionary, in which case it
maps from signature keys to either <a href="..\..\tf\function.md"><code>tf.function</code></a> instances with input
signatures or concrete functions. The keys of such a dictionary may be
arbitrary strings, but will typically be from the
<a href="..\..\tf\saved_model\signature_constants.md"><code>tf.saved_model.signature_constants</code></a> module. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>class Adder(tf.Module): <p></p> @tf.function(input_signature=[tf.TensorSpec(shape=None, dtype=tf.float32)])
def add(self, x):
  return x + x + 1. <p></p> to_export = Adder()
tf.saved_model.save(to_export, '/tmp/adder') </pre>
</div>
		</div>
	</div>
	<div id="save" class="method">
		<h4>
			<span title="System.void">void</span> <strong>save</strong>(<span title="System.object">object</span> obj, <span title="System.Byte[]">Byte[]</span> export_dir, <span title="System.object">object</span> signatures)
		</h4>
		<div class="content">Exports the Trackable object `obj` to [SavedModel format](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md). <p></p> Example usage:
The resulting SavedModel is then servable with an input named "x", its value
having any shape and dtype float32. <p></p> The optional `signatures` argument controls which methods in `obj` will be
available to programs which consume `SavedModel`s, for example serving
APIs. Python functions may be decorated with
`@tf.function(input_signature=...)` and passed as signatures directly, or
lazily with a call to `get_concrete_function` on the method decorated with
`@tf.function`. <p></p> If the `signatures` argument is omitted, `obj` will be searched for
`@tf.function`-decorated methods. If exactly one `@tf.function` is found, that
method will be used as the default signature for the SavedModel. This behavior
is expected to change in the future, when a corresponding
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> symbol is added. At that point signatures will be
completely optional, and any `@tf.function` attached to `obj` or its
dependencies will be exported for use with `load`. <p></p> When invoking a signature in an exported SavedModel, `Tensor` arguments are
identified by name. These names will come from the Python function's argument
names by default. They may be overridden by specifying a `name=...` argument
in the corresponding <a href="..\..\tf\TensorSpec.md"><code>tf.TensorSpec</code></a> object. Explicit naming is required if
multiple `Tensor`s are passed through a single argument to the Python
function. <p></p> The outputs of functions used as `signatures` must either be flat lists, in
which case outputs will be numbered, or a dictionary mapping string keys to
`Tensor`, in which case the keys will be used to name outputs. <p></p> Signatures are available in objects returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> as a
`.signatures` attribute. This is a reserved attribute: <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>
on an object with a custom `.signatures` attribute will raise an exception. <p></p> Since <a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> objects are also Trackable, this function can be
used to export Keras models. For example, exporting with a signature
specified:
Exporting from a function without a fixed signature:
<a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> instances constructed from inputs and outputs already have a
signature and so do not require a `@tf.function` decorator or a `signatures`
argument. If neither are specified, the model's forward pass is exported.
Variables must be tracked by assigning them to an attribute of a tracked
object or to an attribute of `obj` directly. TensorFlow objects (e.g. layers
from <a href="..\..\tf\keras\layers.md"><code>tf.keras.layers</code></a>, optimizers from <a href="..\..\tf\train.md"><code>tf.train</code></a>) track their variables
automatically. This is the same tracking scheme that <a href="..\..\tf\train\Checkpoint.md"><code>tf.train.Checkpoint</code></a>
uses, and an exported `Checkpoint` object may be restored as a training
checkpoint by pointing <a href="..\..\tf\train\Checkpoint\restore.md"><code>tf.train.Checkpoint.restore</code></a> to the SavedModel's
"variables/" subdirectory. Currently variables are the only stateful objects
supported by <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, but others (e.g. tables) will be supported
in the future. <p></p> <a href="..\..\tf\function.md"><code>tf.function</code></a> does not hard-code device annotations from outside the function
body, instead using the calling context's device. This means for example that
exporting a model which runs on a GPU and serving it on a CPU will generally
work, with some exceptions. <a href="..\..\tf\device.md"><code>tf.device</code></a> annotations inside the body of the
function will be hard-coded in the exported model; this type of annotation is
discouraged. Device-specific operations, e.g. with "cuDNN" in the name or with
device-specific layouts, may cause issues. Currently a `DistributionStrategy`
is another exception: active distribution strategies will cause device
placements to be hard-coded in a function. Exporting a single-device
computation and importing under a `DistributionStrategy` is not currently
supported, but may be in the future. <p></p> SavedModels exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> [strip default-valued
attributes](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md#stripping-default-valued-attributes)
automatically, which removes one source of incompatibilities when the consumer
of a SavedModel is running an older TensorFlow version than the
producer. There are however other sources of incompatibilities which are not
handled automatically, such as when the exported model contains operations
which the consumer does not have definitions for. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> obj
						</dt>
						<dd>A trackable object to export. 
						</dd>
						<dt>
							<code><span title="System.Byte[]">Byte[]</span></code> export_dir
						</dt>
						<dd>A directory in which to write the SavedModel. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> signatures
						</dt>
						<dd>Optional, either a <a href="..\..\tf\function.md"><code>tf.function</code></a> with an input signature
specified or the result of `f.get_concrete_function` on a
`@tf.function`-decorated function `f`, in which case `f` will be used to
generate a signature for the SavedModel under the default serving
signature key. `signatures` may also be a dictionary, in which case it
maps from signature keys to either <a href="..\..\tf\function.md"><code>tf.function</code></a> instances with input
signatures or concrete functions. The keys of such a dictionary may be
arbitrary strings, but will typically be from the
<a href="..\..\tf\saved_model\signature_constants.md"><code>tf.saved_model.signature_constants</code></a> module. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>class Adder(tf.Module): <p></p> @tf.function(input_signature=[tf.TensorSpec(shape=None, dtype=tf.float32)])
def add(self, x):
  return x + x + 1. <p></p> to_export = Adder()
tf.saved_model.save(to_export, '/tmp/adder') </pre>
</div>
		</div>
	</div>
	<div id="save" class="method">
		<h4>
			<span title="System.void">void</span> <strong>save</strong>(<span title="System.object">object</span> obj, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> export_dir, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> signatures)
		</h4>
		<div class="content">Exports the Trackable object `obj` to [SavedModel format](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md). <p></p> Example usage:
The resulting SavedModel is then servable with an input named "x", its value
having any shape and dtype float32. <p></p> The optional `signatures` argument controls which methods in `obj` will be
available to programs which consume `SavedModel`s, for example serving
APIs. Python functions may be decorated with
`@tf.function(input_signature=...)` and passed as signatures directly, or
lazily with a call to `get_concrete_function` on the method decorated with
`@tf.function`. <p></p> If the `signatures` argument is omitted, `obj` will be searched for
`@tf.function`-decorated methods. If exactly one `@tf.function` is found, that
method will be used as the default signature for the SavedModel. This behavior
is expected to change in the future, when a corresponding
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> symbol is added. At that point signatures will be
completely optional, and any `@tf.function` attached to `obj` or its
dependencies will be exported for use with `load`. <p></p> When invoking a signature in an exported SavedModel, `Tensor` arguments are
identified by name. These names will come from the Python function's argument
names by default. They may be overridden by specifying a `name=...` argument
in the corresponding <a href="..\..\tf\TensorSpec.md"><code>tf.TensorSpec</code></a> object. Explicit naming is required if
multiple `Tensor`s are passed through a single argument to the Python
function. <p></p> The outputs of functions used as `signatures` must either be flat lists, in
which case outputs will be numbered, or a dictionary mapping string keys to
`Tensor`, in which case the keys will be used to name outputs. <p></p> Signatures are available in objects returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> as a
`.signatures` attribute. This is a reserved attribute: <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>
on an object with a custom `.signatures` attribute will raise an exception. <p></p> Since <a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> objects are also Trackable, this function can be
used to export Keras models. For example, exporting with a signature
specified:
Exporting from a function without a fixed signature:
<a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> instances constructed from inputs and outputs already have a
signature and so do not require a `@tf.function` decorator or a `signatures`
argument. If neither are specified, the model's forward pass is exported.
Variables must be tracked by assigning them to an attribute of a tracked
object or to an attribute of `obj` directly. TensorFlow objects (e.g. layers
from <a href="..\..\tf\keras\layers.md"><code>tf.keras.layers</code></a>, optimizers from <a href="..\..\tf\train.md"><code>tf.train</code></a>) track their variables
automatically. This is the same tracking scheme that <a href="..\..\tf\train\Checkpoint.md"><code>tf.train.Checkpoint</code></a>
uses, and an exported `Checkpoint` object may be restored as a training
checkpoint by pointing <a href="..\..\tf\train\Checkpoint\restore.md"><code>tf.train.Checkpoint.restore</code></a> to the SavedModel's
"variables/" subdirectory. Currently variables are the only stateful objects
supported by <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, but others (e.g. tables) will be supported
in the future. <p></p> <a href="..\..\tf\function.md"><code>tf.function</code></a> does not hard-code device annotations from outside the function
body, instead using the calling context's device. This means for example that
exporting a model which runs on a GPU and serving it on a CPU will generally
work, with some exceptions. <a href="..\..\tf\device.md"><code>tf.device</code></a> annotations inside the body of the
function will be hard-coded in the exported model; this type of annotation is
discouraged. Device-specific operations, e.g. with "cuDNN" in the name or with
device-specific layouts, may cause issues. Currently a `DistributionStrategy`
is another exception: active distribution strategies will cause device
placements to be hard-coded in a function. Exporting a single-device
computation and importing under a `DistributionStrategy` is not currently
supported, but may be in the future. <p></p> SavedModels exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> [strip default-valued
attributes](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md#stripping-default-valued-attributes)
automatically, which removes one source of incompatibilities when the consumer
of a SavedModel is running an older TensorFlow version than the
producer. There are however other sources of incompatibilities which are not
handled automatically, such as when the exported model contains operations
which the consumer does not have definitions for. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> obj
						</dt>
						<dd>A trackable object to export. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> export_dir
						</dt>
						<dd>A directory in which to write the SavedModel. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> signatures
						</dt>
						<dd>Optional, either a <a href="..\..\tf\function.md"><code>tf.function</code></a> with an input signature
specified or the result of `f.get_concrete_function` on a
`@tf.function`-decorated function `f`, in which case `f` will be used to
generate a signature for the SavedModel under the default serving
signature key. `signatures` may also be a dictionary, in which case it
maps from signature keys to either <a href="..\..\tf\function.md"><code>tf.function</code></a> instances with input
signatures or concrete functions. The keys of such a dictionary may be
arbitrary strings, but will typically be from the
<a href="..\..\tf\saved_model\signature_constants.md"><code>tf.saved_model.signature_constants</code></a> module. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>class Adder(tf.Module): <p></p> @tf.function(input_signature=[tf.TensorSpec(shape=None, dtype=tf.float32)])
def add(self, x):
  return x + x + 1. <p></p> to_export = Adder()
tf.saved_model.save(to_export, '/tmp/adder') </pre>
</div>
		</div>
	</div>
	<div id="save" class="method">
		<h4>
			<span title="System.void">void</span> <strong>save</strong>(<span title="System.object">object</span> obj, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> export_dir, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> signatures)
		</h4>
		<div class="content">Exports the Trackable object `obj` to [SavedModel format](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md). <p></p> Example usage:
The resulting SavedModel is then servable with an input named "x", its value
having any shape and dtype float32. <p></p> The optional `signatures` argument controls which methods in `obj` will be
available to programs which consume `SavedModel`s, for example serving
APIs. Python functions may be decorated with
`@tf.function(input_signature=...)` and passed as signatures directly, or
lazily with a call to `get_concrete_function` on the method decorated with
`@tf.function`. <p></p> If the `signatures` argument is omitted, `obj` will be searched for
`@tf.function`-decorated methods. If exactly one `@tf.function` is found, that
method will be used as the default signature for the SavedModel. This behavior
is expected to change in the future, when a corresponding
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> symbol is added. At that point signatures will be
completely optional, and any `@tf.function` attached to `obj` or its
dependencies will be exported for use with `load`. <p></p> When invoking a signature in an exported SavedModel, `Tensor` arguments are
identified by name. These names will come from the Python function's argument
names by default. They may be overridden by specifying a `name=...` argument
in the corresponding <a href="..\..\tf\TensorSpec.md"><code>tf.TensorSpec</code></a> object. Explicit naming is required if
multiple `Tensor`s are passed through a single argument to the Python
function. <p></p> The outputs of functions used as `signatures` must either be flat lists, in
which case outputs will be numbered, or a dictionary mapping string keys to
`Tensor`, in which case the keys will be used to name outputs. <p></p> Signatures are available in objects returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> as a
`.signatures` attribute. This is a reserved attribute: <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>
on an object with a custom `.signatures` attribute will raise an exception. <p></p> Since <a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> objects are also Trackable, this function can be
used to export Keras models. For example, exporting with a signature
specified:
Exporting from a function without a fixed signature:
<a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> instances constructed from inputs and outputs already have a
signature and so do not require a `@tf.function` decorator or a `signatures`
argument. If neither are specified, the model's forward pass is exported.
Variables must be tracked by assigning them to an attribute of a tracked
object or to an attribute of `obj` directly. TensorFlow objects (e.g. layers
from <a href="..\..\tf\keras\layers.md"><code>tf.keras.layers</code></a>, optimizers from <a href="..\..\tf\train.md"><code>tf.train</code></a>) track their variables
automatically. This is the same tracking scheme that <a href="..\..\tf\train\Checkpoint.md"><code>tf.train.Checkpoint</code></a>
uses, and an exported `Checkpoint` object may be restored as a training
checkpoint by pointing <a href="..\..\tf\train\Checkpoint\restore.md"><code>tf.train.Checkpoint.restore</code></a> to the SavedModel's
"variables/" subdirectory. Currently variables are the only stateful objects
supported by <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, but others (e.g. tables) will be supported
in the future. <p></p> <a href="..\..\tf\function.md"><code>tf.function</code></a> does not hard-code device annotations from outside the function
body, instead using the calling context's device. This means for example that
exporting a model which runs on a GPU and serving it on a CPU will generally
work, with some exceptions. <a href="..\..\tf\device.md"><code>tf.device</code></a> annotations inside the body of the
function will be hard-coded in the exported model; this type of annotation is
discouraged. Device-specific operations, e.g. with "cuDNN" in the name or with
device-specific layouts, may cause issues. Currently a `DistributionStrategy`
is another exception: active distribution strategies will cause device
placements to be hard-coded in a function. Exporting a single-device
computation and importing under a `DistributionStrategy` is not currently
supported, but may be in the future. <p></p> SavedModels exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> [strip default-valued
attributes](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md#stripping-default-valued-attributes)
automatically, which removes one source of incompatibilities when the consumer
of a SavedModel is running an older TensorFlow version than the
producer. There are however other sources of incompatibilities which are not
handled automatically, such as when the exported model contains operations
which the consumer does not have definitions for. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> obj
						</dt>
						<dd>A trackable object to export. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> export_dir
						</dt>
						<dd>A directory in which to write the SavedModel. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> signatures
						</dt>
						<dd>Optional, either a <a href="..\..\tf\function.md"><code>tf.function</code></a> with an input signature
specified or the result of `f.get_concrete_function` on a
`@tf.function`-decorated function `f`, in which case `f` will be used to
generate a signature for the SavedModel under the default serving
signature key. `signatures` may also be a dictionary, in which case it
maps from signature keys to either <a href="..\..\tf\function.md"><code>tf.function</code></a> instances with input
signatures or concrete functions. The keys of such a dictionary may be
arbitrary strings, but will typically be from the
<a href="..\..\tf\saved_model\signature_constants.md"><code>tf.saved_model.signature_constants</code></a> module. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>class Adder(tf.Module): <p></p> @tf.function(input_signature=[tf.TensorSpec(shape=None, dtype=tf.float32)])
def add(self, x):
  return x + x + 1. <p></p> to_export = Adder()
tf.saved_model.save(to_export, '/tmp/adder') </pre>
</div>
		</div>
	</div>
	<div id="save" class="method">
		<h4>
			<span title="System.void">void</span> <strong>save</strong>(<span title="System.object">object</span> obj, <span title="System.string">string</span> export_dir, <span title="System.object">object</span> signatures)
		</h4>
		<div class="content">Exports the Trackable object `obj` to [SavedModel format](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md). <p></p> Example usage:
The resulting SavedModel is then servable with an input named "x", its value
having any shape and dtype float32. <p></p> The optional `signatures` argument controls which methods in `obj` will be
available to programs which consume `SavedModel`s, for example serving
APIs. Python functions may be decorated with
`@tf.function(input_signature=...)` and passed as signatures directly, or
lazily with a call to `get_concrete_function` on the method decorated with
`@tf.function`. <p></p> If the `signatures` argument is omitted, `obj` will be searched for
`@tf.function`-decorated methods. If exactly one `@tf.function` is found, that
method will be used as the default signature for the SavedModel. This behavior
is expected to change in the future, when a corresponding
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> symbol is added. At that point signatures will be
completely optional, and any `@tf.function` attached to `obj` or its
dependencies will be exported for use with `load`. <p></p> When invoking a signature in an exported SavedModel, `Tensor` arguments are
identified by name. These names will come from the Python function's argument
names by default. They may be overridden by specifying a `name=...` argument
in the corresponding <a href="..\..\tf\TensorSpec.md"><code>tf.TensorSpec</code></a> object. Explicit naming is required if
multiple `Tensor`s are passed through a single argument to the Python
function. <p></p> The outputs of functions used as `signatures` must either be flat lists, in
which case outputs will be numbered, or a dictionary mapping string keys to
`Tensor`, in which case the keys will be used to name outputs. <p></p> Signatures are available in objects returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> as a
`.signatures` attribute. This is a reserved attribute: <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>
on an object with a custom `.signatures` attribute will raise an exception. <p></p> Since <a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> objects are also Trackable, this function can be
used to export Keras models. For example, exporting with a signature
specified:
Exporting from a function without a fixed signature:
<a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> instances constructed from inputs and outputs already have a
signature and so do not require a `@tf.function` decorator or a `signatures`
argument. If neither are specified, the model's forward pass is exported.
Variables must be tracked by assigning them to an attribute of a tracked
object or to an attribute of `obj` directly. TensorFlow objects (e.g. layers
from <a href="..\..\tf\keras\layers.md"><code>tf.keras.layers</code></a>, optimizers from <a href="..\..\tf\train.md"><code>tf.train</code></a>) track their variables
automatically. This is the same tracking scheme that <a href="..\..\tf\train\Checkpoint.md"><code>tf.train.Checkpoint</code></a>
uses, and an exported `Checkpoint` object may be restored as a training
checkpoint by pointing <a href="..\..\tf\train\Checkpoint\restore.md"><code>tf.train.Checkpoint.restore</code></a> to the SavedModel's
"variables/" subdirectory. Currently variables are the only stateful objects
supported by <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, but others (e.g. tables) will be supported
in the future. <p></p> <a href="..\..\tf\function.md"><code>tf.function</code></a> does not hard-code device annotations from outside the function
body, instead using the calling context's device. This means for example that
exporting a model which runs on a GPU and serving it on a CPU will generally
work, with some exceptions. <a href="..\..\tf\device.md"><code>tf.device</code></a> annotations inside the body of the
function will be hard-coded in the exported model; this type of annotation is
discouraged. Device-specific operations, e.g. with "cuDNN" in the name or with
device-specific layouts, may cause issues. Currently a `DistributionStrategy`
is another exception: active distribution strategies will cause device
placements to be hard-coded in a function. Exporting a single-device
computation and importing under a `DistributionStrategy` is not currently
supported, but may be in the future. <p></p> SavedModels exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> [strip default-valued
attributes](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md#stripping-default-valued-attributes)
automatically, which removes one source of incompatibilities when the consumer
of a SavedModel is running an older TensorFlow version than the
producer. There are however other sources of incompatibilities which are not
handled automatically, such as when the exported model contains operations
which the consumer does not have definitions for. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> obj
						</dt>
						<dd>A trackable object to export. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> export_dir
						</dt>
						<dd>A directory in which to write the SavedModel. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> signatures
						</dt>
						<dd>Optional, either a <a href="..\..\tf\function.md"><code>tf.function</code></a> with an input signature
specified or the result of `f.get_concrete_function` on a
`@tf.function`-decorated function `f`, in which case `f` will be used to
generate a signature for the SavedModel under the default serving
signature key. `signatures` may also be a dictionary, in which case it
maps from signature keys to either <a href="..\..\tf\function.md"><code>tf.function</code></a> instances with input
signatures or concrete functions. The keys of such a dictionary may be
arbitrary strings, but will typically be from the
<a href="..\..\tf\saved_model\signature_constants.md"><code>tf.saved_model.signature_constants</code></a> module. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>class Adder(tf.Module): <p></p> @tf.function(input_signature=[tf.TensorSpec(shape=None, dtype=tf.float32)])
def add(self, x):
  return x + x + 1. <p></p> to_export = Adder()
tf.saved_model.save(to_export, '/tmp/adder') </pre>
</div>
		</div>
	</div>
	<div id="save" class="method">
		<h4>
			<span title="System.void">void</span> <strong>save</strong>(<span title="System.object">object</span> obj, <span title="System.string">string</span> export_dir, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> signatures)
		</h4>
		<div class="content">Exports the Trackable object `obj` to [SavedModel format](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md). <p></p> Example usage:
The resulting SavedModel is then servable with an input named "x", its value
having any shape and dtype float32. <p></p> The optional `signatures` argument controls which methods in `obj` will be
available to programs which consume `SavedModel`s, for example serving
APIs. Python functions may be decorated with
`@tf.function(input_signature=...)` and passed as signatures directly, or
lazily with a call to `get_concrete_function` on the method decorated with
`@tf.function`. <p></p> If the `signatures` argument is omitted, `obj` will be searched for
`@tf.function`-decorated methods. If exactly one `@tf.function` is found, that
method will be used as the default signature for the SavedModel. This behavior
is expected to change in the future, when a corresponding
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> symbol is added. At that point signatures will be
completely optional, and any `@tf.function` attached to `obj` or its
dependencies will be exported for use with `load`. <p></p> When invoking a signature in an exported SavedModel, `Tensor` arguments are
identified by name. These names will come from the Python function's argument
names by default. They may be overridden by specifying a `name=...` argument
in the corresponding <a href="..\..\tf\TensorSpec.md"><code>tf.TensorSpec</code></a> object. Explicit naming is required if
multiple `Tensor`s are passed through a single argument to the Python
function. <p></p> The outputs of functions used as `signatures` must either be flat lists, in
which case outputs will be numbered, or a dictionary mapping string keys to
`Tensor`, in which case the keys will be used to name outputs. <p></p> Signatures are available in objects returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> as a
`.signatures` attribute. This is a reserved attribute: <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>
on an object with a custom `.signatures` attribute will raise an exception. <p></p> Since <a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> objects are also Trackable, this function can be
used to export Keras models. For example, exporting with a signature
specified:
Exporting from a function without a fixed signature:
<a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> instances constructed from inputs and outputs already have a
signature and so do not require a `@tf.function` decorator or a `signatures`
argument. If neither are specified, the model's forward pass is exported.
Variables must be tracked by assigning them to an attribute of a tracked
object or to an attribute of `obj` directly. TensorFlow objects (e.g. layers
from <a href="..\..\tf\keras\layers.md"><code>tf.keras.layers</code></a>, optimizers from <a href="..\..\tf\train.md"><code>tf.train</code></a>) track their variables
automatically. This is the same tracking scheme that <a href="..\..\tf\train\Checkpoint.md"><code>tf.train.Checkpoint</code></a>
uses, and an exported `Checkpoint` object may be restored as a training
checkpoint by pointing <a href="..\..\tf\train\Checkpoint\restore.md"><code>tf.train.Checkpoint.restore</code></a> to the SavedModel's
"variables/" subdirectory. Currently variables are the only stateful objects
supported by <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, but others (e.g. tables) will be supported
in the future. <p></p> <a href="..\..\tf\function.md"><code>tf.function</code></a> does not hard-code device annotations from outside the function
body, instead using the calling context's device. This means for example that
exporting a model which runs on a GPU and serving it on a CPU will generally
work, with some exceptions. <a href="..\..\tf\device.md"><code>tf.device</code></a> annotations inside the body of the
function will be hard-coded in the exported model; this type of annotation is
discouraged. Device-specific operations, e.g. with "cuDNN" in the name or with
device-specific layouts, may cause issues. Currently a `DistributionStrategy`
is another exception: active distribution strategies will cause device
placements to be hard-coded in a function. Exporting a single-device
computation and importing under a `DistributionStrategy` is not currently
supported, but may be in the future. <p></p> SavedModels exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> [strip default-valued
attributes](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md#stripping-default-valued-attributes)
automatically, which removes one source of incompatibilities when the consumer
of a SavedModel is running an older TensorFlow version than the
producer. There are however other sources of incompatibilities which are not
handled automatically, such as when the exported model contains operations
which the consumer does not have definitions for. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> obj
						</dt>
						<dd>A trackable object to export. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> export_dir
						</dt>
						<dd>A directory in which to write the SavedModel. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> signatures
						</dt>
						<dd>Optional, either a <a href="..\..\tf\function.md"><code>tf.function</code></a> with an input signature
specified or the result of `f.get_concrete_function` on a
`@tf.function`-decorated function `f`, in which case `f` will be used to
generate a signature for the SavedModel under the default serving
signature key. `signatures` may also be a dictionary, in which case it
maps from signature keys to either <a href="..\..\tf\function.md"><code>tf.function</code></a> instances with input
signatures or concrete functions. The keys of such a dictionary may be
arbitrary strings, but will typically be from the
<a href="..\..\tf\saved_model\signature_constants.md"><code>tf.saved_model.signature_constants</code></a> module. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>class Adder(tf.Module): <p></p> @tf.function(input_signature=[tf.TensorSpec(shape=None, dtype=tf.float32)])
def add(self, x):
  return x + x + 1. <p></p> to_export = Adder()
tf.saved_model.save(to_export, '/tmp/adder') </pre>
</div>
		</div>
	</div>
	<div id="save" class="method">
		<h4>
			<span title="System.void">void</span> <strong>save</strong>(<span title="System.object">object</span> obj, <span title="System.string">string</span> export_dir, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> signatures)
		</h4>
		<div class="content">Exports the Trackable object `obj` to [SavedModel format](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md). <p></p> Example usage:
The resulting SavedModel is then servable with an input named "x", its value
having any shape and dtype float32. <p></p> The optional `signatures` argument controls which methods in `obj` will be
available to programs which consume `SavedModel`s, for example serving
APIs. Python functions may be decorated with
`@tf.function(input_signature=...)` and passed as signatures directly, or
lazily with a call to `get_concrete_function` on the method decorated with
`@tf.function`. <p></p> If the `signatures` argument is omitted, `obj` will be searched for
`@tf.function`-decorated methods. If exactly one `@tf.function` is found, that
method will be used as the default signature for the SavedModel. This behavior
is expected to change in the future, when a corresponding
<a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> symbol is added. At that point signatures will be
completely optional, and any `@tf.function` attached to `obj` or its
dependencies will be exported for use with `load`. <p></p> When invoking a signature in an exported SavedModel, `Tensor` arguments are
identified by name. These names will come from the Python function's argument
names by default. They may be overridden by specifying a `name=...` argument
in the corresponding <a href="..\..\tf\TensorSpec.md"><code>tf.TensorSpec</code></a> object. Explicit naming is required if
multiple `Tensor`s are passed through a single argument to the Python
function. <p></p> The outputs of functions used as `signatures` must either be flat lists, in
which case outputs will be numbered, or a dictionary mapping string keys to
`Tensor`, in which case the keys will be used to name outputs. <p></p> Signatures are available in objects returned by <a href="..\..\tf\saved_model\load.md"><code>tf.saved_model.load</code></a> as a
`.signatures` attribute. This is a reserved attribute: <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>
on an object with a custom `.signatures` attribute will raise an exception. <p></p> Since <a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> objects are also Trackable, this function can be
used to export Keras models. For example, exporting with a signature
specified:
Exporting from a function without a fixed signature:
<a href="..\..\tf\keras\Model.md"><code>tf.keras.Model</code></a> instances constructed from inputs and outputs already have a
signature and so do not require a `@tf.function` decorator or a `signatures`
argument. If neither are specified, the model's forward pass is exported.
Variables must be tracked by assigning them to an attribute of a tracked
object or to an attribute of `obj` directly. TensorFlow objects (e.g. layers
from <a href="..\..\tf\keras\layers.md"><code>tf.keras.layers</code></a>, optimizers from <a href="..\..\tf\train.md"><code>tf.train</code></a>) track their variables
automatically. This is the same tracking scheme that <a href="..\..\tf\train\Checkpoint.md"><code>tf.train.Checkpoint</code></a>
uses, and an exported `Checkpoint` object may be restored as a training
checkpoint by pointing <a href="..\..\tf\train\Checkpoint\restore.md"><code>tf.train.Checkpoint.restore</code></a> to the SavedModel's
"variables/" subdirectory. Currently variables are the only stateful objects
supported by <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a>, but others (e.g. tables) will be supported
in the future. <p></p> <a href="..\..\tf\function.md"><code>tf.function</code></a> does not hard-code device annotations from outside the function
body, instead using the calling context's device. This means for example that
exporting a model which runs on a GPU and serving it on a CPU will generally
work, with some exceptions. <a href="..\..\tf\device.md"><code>tf.device</code></a> annotations inside the body of the
function will be hard-coded in the exported model; this type of annotation is
discouraged. Device-specific operations, e.g. with "cuDNN" in the name or with
device-specific layouts, may cause issues. Currently a `DistributionStrategy`
is another exception: active distribution strategies will cause device
placements to be hard-coded in a function. Exporting a single-device
computation and importing under a `DistributionStrategy` is not currently
supported, but may be in the future. <p></p> SavedModels exported with <a href="..\..\tf\saved_model\save.md"><code>tf.saved_model.save</code></a> [strip default-valued
attributes](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md#stripping-default-valued-attributes)
automatically, which removes one source of incompatibilities when the consumer
of a SavedModel is running an older TensorFlow version than the
producer. There are however other sources of incompatibilities which are not
handled automatically, such as when the exported model contains operations
which the consumer does not have definitions for. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> obj
						</dt>
						<dd>A trackable object to export. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> export_dir
						</dt>
						<dd>A directory in which to write the SavedModel. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> signatures
						</dt>
						<dd>Optional, either a <a href="..\..\tf\function.md"><code>tf.function</code></a> with an input signature
specified or the result of `f.get_concrete_function` on a
`@tf.function`-decorated function `f`, in which case `f` will be used to
generate a signature for the SavedModel under the default serving
signature key. `signatures` may also be a dictionary, in which case it
maps from signature keys to either <a href="..\..\tf\function.md"><code>tf.function</code></a> instances with input
signatures or concrete functions. The keys of such a dictionary may be
arbitrary strings, but will typically be from the
<a href="..\..\tf\saved_model\signature_constants.md"><code>tf.saved_model.signature_constants</code></a> module. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>class Adder(tf.Module): <p></p> @tf.function(input_signature=[tf.TensorSpec(shape=None, dtype=tf.float32)])
def add(self, x):
  return x + x + 1. <p></p> to_export = Adder()
tf.saved_model.save(to_export, '/tmp/adder') </pre>
</div>
		</div>
	</div>
	<div id="simple_save" class="method">
		<h4>
			<span title="System.void">void</span> <strong>simple_save</strong>(<span title="System.object">object</span> session, <span title="System.object">object</span> export_dir, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> inputs, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> outputs, <a href="../tensorflow/Operation.htm">Operation</a> legacy_init_op)
		</h4>
		<div class="content">Convenience function to build a SavedModel suitable for serving. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.simple_save. <p></p> In many common cases, saving models for serving will be as simple as: <p></p> simple_save(session,
export_dir,
inputs={"x": x, "y": y},
outputs={"z": z}) <p></p> Although in many cases it's not necessary to understand all of the many ways
to configure a SavedModel, this method has a few practical implications:
- It will be treated as a graph for inference / serving (i.e. uses the tag
`saved_model.SERVING`)
- The SavedModel will load in TensorFlow Serving and supports the
[Predict
API](https://github.com/tensorflow/serving/blob/master/tensorflow_serving/apis/predict.proto).
To use the Classify, Regress, or MultiInference APIs, please
use either
[tf.Estimator](https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator)
or the lower level
[SavedModel
APIs](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md).
- Some TensorFlow ops depend on information on disk or other information
called "assets". These are generally handled automatically by adding the
assets to the `GraphKeys.ASSET_FILEPATHS` collection. Only assets in that
collection are exported; if you need more custom behavior, you'll need to
use the
[SavedModelBuilder](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/builder.py). <p></p> More information about SavedModel and signatures can be found here:
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> session
						</dt>
						<dd>The TensorFlow session from which to save the meta graph and
variables. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> export_dir
						</dt>
						<dd>The path to which the SavedModel will be stored. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> inputs
						</dt>
						<dd>dict mapping string input names to tensors. These are added
to the SignatureDef as the inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> outputs
						</dt>
						<dd>dict mapping string output names to tensors. These are added
to the SignatureDef as the outputs. 
						</dd>
						<dt>
							<code><a href="../tensorflow/Operation.htm">Operation</a></code> legacy_init_op
						</dt>
						<dd>Legacy support for op or group of ops to execute after the
restore op upon a load. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="simple_save" class="method">
		<h4>
			<span title="System.void">void</span> <strong>simple_save</strong>(<span title="System.object">object</span> session, <span title="System.object">object</span> export_dir, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> inputs, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> outputs, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> legacy_init_op)
		</h4>
		<div class="content">Convenience function to build a SavedModel suitable for serving. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.simple_save. <p></p> In many common cases, saving models for serving will be as simple as: <p></p> simple_save(session,
export_dir,
inputs={"x": x, "y": y},
outputs={"z": z}) <p></p> Although in many cases it's not necessary to understand all of the many ways
to configure a SavedModel, this method has a few practical implications:
- It will be treated as a graph for inference / serving (i.e. uses the tag
`saved_model.SERVING`)
- The SavedModel will load in TensorFlow Serving and supports the
[Predict
API](https://github.com/tensorflow/serving/blob/master/tensorflow_serving/apis/predict.proto).
To use the Classify, Regress, or MultiInference APIs, please
use either
[tf.Estimator](https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator)
or the lower level
[SavedModel
APIs](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md).
- Some TensorFlow ops depend on information on disk or other information
called "assets". These are generally handled automatically by adding the
assets to the `GraphKeys.ASSET_FILEPATHS` collection. Only assets in that
collection are exported; if you need more custom behavior, you'll need to
use the
[SavedModelBuilder](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/builder.py). <p></p> More information about SavedModel and signatures can be found here:
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> session
						</dt>
						<dd>The TensorFlow session from which to save the meta graph and
variables. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> export_dir
						</dt>
						<dd>The path to which the SavedModel will be stored. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> inputs
						</dt>
						<dd>dict mapping string input names to tensors. These are added
to the SignatureDef as the inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> outputs
						</dt>
						<dd>dict mapping string output names to tensors. These are added
to the SignatureDef as the outputs. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> legacy_init_op
						</dt>
						<dd>Legacy support for op or group of ops to execute after the
restore op upon a load. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="simple_save" class="method">
		<h4>
			<span title="System.void">void</span> <strong>simple_save</strong>(<span title="System.object">object</span> session, <span title="System.object">object</span> export_dir, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> inputs, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> outputs, <span title="System.object">object</span> legacy_init_op)
		</h4>
		<div class="content">Convenience function to build a SavedModel suitable for serving. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.simple_save. <p></p> In many common cases, saving models for serving will be as simple as: <p></p> simple_save(session,
export_dir,
inputs={"x": x, "y": y},
outputs={"z": z}) <p></p> Although in many cases it's not necessary to understand all of the many ways
to configure a SavedModel, this method has a few practical implications:
- It will be treated as a graph for inference / serving (i.e. uses the tag
`saved_model.SERVING`)
- The SavedModel will load in TensorFlow Serving and supports the
[Predict
API](https://github.com/tensorflow/serving/blob/master/tensorflow_serving/apis/predict.proto).
To use the Classify, Regress, or MultiInference APIs, please
use either
[tf.Estimator](https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator)
or the lower level
[SavedModel
APIs](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md).
- Some TensorFlow ops depend on information on disk or other information
called "assets". These are generally handled automatically by adding the
assets to the `GraphKeys.ASSET_FILEPATHS` collection. Only assets in that
collection are exported; if you need more custom behavior, you'll need to
use the
[SavedModelBuilder](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/builder.py). <p></p> More information about SavedModel and signatures can be found here:
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> session
						</dt>
						<dd>The TensorFlow session from which to save the meta graph and
variables. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> export_dir
						</dt>
						<dd>The path to which the SavedModel will be stored. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> inputs
						</dt>
						<dd>dict mapping string input names to tensors. These are added
to the SignatureDef as the inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> outputs
						</dt>
						<dd>dict mapping string output names to tensors. These are added
to the SignatureDef as the outputs. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> legacy_init_op
						</dt>
						<dd>Legacy support for op or group of ops to execute after the
restore op upon a load. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="simple_save_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>simple_save_dyn</strong>(<span title="System.object">object</span> session, <span title="System.object">object</span> export_dir, <span title="System.object">object</span> inputs, <span title="System.object">object</span> outputs, <span title="System.object">object</span> legacy_init_op)
		</h4>
		<div class="content">Convenience function to build a SavedModel suitable for serving. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.simple_save. <p></p> In many common cases, saving models for serving will be as simple as: <p></p> simple_save(session,
export_dir,
inputs={"x": x, "y": y},
outputs={"z": z}) <p></p> Although in many cases it's not necessary to understand all of the many ways
to configure a SavedModel, this method has a few practical implications:
- It will be treated as a graph for inference / serving (i.e. uses the tag
`saved_model.SERVING`)
- The SavedModel will load in TensorFlow Serving and supports the
[Predict
API](https://github.com/tensorflow/serving/blob/master/tensorflow_serving/apis/predict.proto).
To use the Classify, Regress, or MultiInference APIs, please
use either
[tf.Estimator](https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator)
or the lower level
[SavedModel
APIs](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md).
- Some TensorFlow ops depend on information on disk or other information
called "assets". These are generally handled automatically by adding the
assets to the `GraphKeys.ASSET_FILEPATHS` collection. Only assets in that
collection are exported; if you need more custom behavior, you'll need to
use the
[SavedModelBuilder](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/builder.py). <p></p> More information about SavedModel and signatures can be found here:
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> session
						</dt>
						<dd>The TensorFlow session from which to save the meta graph and
variables. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> export_dir
						</dt>
						<dd>The path to which the SavedModel will be stored. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> inputs
						</dt>
						<dd>dict mapping string input names to tensors. These are added
to the SignatureDef as the inputs. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> outputs
						</dt>
						<dd>dict mapping string output names to tensors. These are added
to the SignatureDef as the outputs. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> legacy_init_op
						</dt>
						<dd>Legacy support for op or group of ops to execute after the
restore op upon a load. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	
	<h3 class="section">Public properties</h3>

	<div id="build_signature_def_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>build_signature_def_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="build_tensor_info_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>build_tensor_info_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="classification_signature_def_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>classification_signature_def_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="contains_saved_model_fn_" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>contains_saved_model_fn_</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="get_tensor_from_tensor_info_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>get_tensor_from_tensor_info_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="is_valid_signature_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>is_valid_signature_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="load_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>load_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="load_v2_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>load_v2_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="main_op_with_restore_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>main_op_with_restore_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="predict_signature_def_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>predict_signature_def_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="regression_signature_def_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>regression_signature_def_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="save_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>save_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="simple_save_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>simple_save_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
  <h3 class="section">Public fields</h3>

  <div id="SAVED_MODEL_SCHEMA_VERSION" class="method">
    <h4>int <strong>SAVED_MODEL_SCHEMA_VERSION</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.int">int</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="VARIABLES_FILENAME" class="method">
    <h4>string <strong>VARIABLES_FILENAME</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="ASSETS_DIRECTORY" class="method">
    <h4>string <strong>ASSETS_DIRECTORY</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="CLASSIFY_METHOD_NAME" class="method">
    <h4>string <strong>CLASSIFY_METHOD_NAME</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="CLASSIFY_OUTPUT_SCORES" class="method">
    <h4>string <strong>CLASSIFY_OUTPUT_SCORES</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="CLASSIFY_INPUTS" class="method">
    <h4>string <strong>CLASSIFY_INPUTS</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="REGRESS_INPUTS" class="method">
    <h4>string <strong>REGRESS_INPUTS</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="ASSETS_KEY" class="method">
    <h4>string <strong>ASSETS_KEY</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="CLASSIFY_OUTPUT_CLASSES" class="method">
    <h4>string <strong>CLASSIFY_OUTPUT_CLASSES</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="SAVED_MODEL_FILENAME_PB" class="method">
    <h4>string <strong>SAVED_MODEL_FILENAME_PB</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="DEFAULT_SERVING_SIGNATURE_DEF_KEY" class="method">
    <h4>string <strong>DEFAULT_SERVING_SIGNATURE_DEF_KEY</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="PREDICT_INPUTS" class="method">
    <h4>string <strong>PREDICT_INPUTS</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="REGRESS_METHOD_NAME" class="method">
    <h4>string <strong>REGRESS_METHOD_NAME</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="LEGACY_INIT_OP_KEY" class="method">
    <h4>string <strong>LEGACY_INIT_OP_KEY</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="SAVED_MODEL_FILENAME_PBTXT" class="method">
    <h4>string <strong>SAVED_MODEL_FILENAME_PBTXT</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="PREDICT_METHOD_NAME" class="method">
    <h4>string <strong>PREDICT_METHOD_NAME</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="REGRESS_OUTPUTS" class="method">
    <h4>string <strong>REGRESS_OUTPUTS</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="VARIABLES_DIRECTORY" class="method">
    <h4>string <strong>VARIABLES_DIRECTORY</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="MAIN_OP_KEY" class="method">
    <h4>string <strong>MAIN_OP_KEY</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="PREDICT_OUTPUTS" class="method">
    <h4>string <strong>PREDICT_OUTPUTS</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="SERVING" class="method">
    <h4>string <strong>SERVING</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="TRAINING" class="method">
    <h4>string <strong>TRAINING</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="GPU" class="method">
    <h4>string <strong>GPU</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
  <div id="TPU" class="method">
    <h4>string <strong>TPU</strong></h4>
    <div class="content">
      <table>
        <tr>
          <td>
            <code>return <span title="System.string">string</span></code>
          </td>
        </tr>
      </table>
    </div>
  </div>
	</section>
	</article><footer>
	<span id="version">Built from v1.15.0.0 of LostTech.TensorFlow</span>
	<span id="docu-link">
		Generated by <a href="http://docu.jagregory.com">docu</a>
	</span>
</footer>
  </body>
</html>