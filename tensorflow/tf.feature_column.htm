<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    <title>tf.feature_column - LostTech.TensorFlow Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body>
  	<header><h1>LostTech.TensorFlow : API Documentation</h1>
	</header>

    <nav id="namespaces">
      <iframe src="../namespaces.htm"></iframe>
    </nav><nav id="types">
  <h2 class="fixed">Types in tensorflow</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../tensorflow/AggregationMethod.htm">AggregationMethod</a>
        </li>
				<li>
            <a href="../tensorflow/ConditionalAccumulator.htm">ConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/ConditionalAccumulatorBase.htm">ConditionalAccumulatorBase</a>
        </li>
				<li>
            <a href="../tensorflow/constant_initializer.htm">constant_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/CriticalSection.htm">CriticalSection</a>
        </li>
				<li>
            <a href="../tensorflow/DeviceSpec.htm">DeviceSpec</a>
        </li>
				<li>
            <a href="../tensorflow/Dimension.htm">Dimension</a>
        </li>
				<li>
            <a href="../tensorflow/DType.htm">DType</a>
        </li>
				<li>
            <a href="../tensorflow/FIFOQueue.htm">FIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/FixedLenFeature.htm">FixedLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/FixedLengthRecordReader.htm">FixedLengthRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/FixedLenSequenceFeature.htm">FixedLenSequenceFeature</a>
        </li>
				<li>
            <a href="../tensorflow/glorot_normal_initializer.htm">glorot_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/glorot_uniform_initializer.htm">glorot_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/GradientTape.htm">GradientTape</a>
        </li>
				<li>
            <a href="../tensorflow/Graph.htm">Graph</a>
        </li>
				<li>
            <a href="../tensorflow/Graph._ControlDependenciesController.htm">Graph._ControlDependenciesController</a>
        </li>
				<li>
            <a href="../tensorflow/Graph.I_ControlDependenciesController.htm">Graph.I_ControlDependenciesController</a>
        </li>
				<li>
            <a href="../tensorflow/GraphKeys.htm">GraphKeys</a>
        </li>
				<li>
            <a href="../tensorflow/HeadingAxes.htm">HeadingAxes</a>
        </li>
				<li>
            <a href="../tensorflow/IAggregationMethod.htm">IAggregationMethod</a>
        </li>
				<li>
            <a href="../tensorflow/IConditionalAccumulator.htm">IConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/IConditionalAccumulatorBase.htm">IConditionalAccumulatorBase</a>
        </li>
				<li>
            <a href="../tensorflow/Iconstant_initializer.htm">Iconstant_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/ICriticalSection.htm">ICriticalSection</a>
        </li>
				<li>
            <a href="../tensorflow/IdentityReader.htm">IdentityReader</a>
        </li>
				<li>
            <a href="../tensorflow/IDeviceSpec.htm">IDeviceSpec</a>
        </li>
				<li>
            <a href="../tensorflow/IDimension.htm">IDimension</a>
        </li>
				<li>
            <a href="../tensorflow/IDType.htm">IDType</a>
        </li>
				<li>
            <a href="../tensorflow/IFIFOQueue.htm">IFIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IFixedLenFeature.htm">IFixedLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/IFixedLengthRecordReader.htm">IFixedLengthRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/IFixedLenSequenceFeature.htm">IFixedLenSequenceFeature</a>
        </li>
				<li>
            <a href="../tensorflow/Iglorot_normal_initializer.htm">Iglorot_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Iglorot_uniform_initializer.htm">Iglorot_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IGradientTape.htm">IGradientTape</a>
        </li>
				<li>
            <a href="../tensorflow/IGraph.htm">IGraph</a>
        </li>
				<li>
            <a href="../tensorflow/IGraphKeys.htm">IGraphKeys</a>
        </li>
				<li>
            <a href="../tensorflow/IIdentityReader.htm">IIdentityReader</a>
        </li>
				<li>
            <a href="../tensorflow/IIndexedSlices.htm">IIndexedSlices</a>
        </li>
				<li>
            <a href="../tensorflow/IIndexedSlicesSpec.htm">IIndexedSlicesSpec</a>
        </li>
				<li>
            <a href="../tensorflow/IInteractiveSession.htm">IInteractiveSession</a>
        </li>
				<li>
            <a href="../tensorflow/ILazyLoader.htm">ILazyLoader</a>
        </li>
				<li>
            <a href="../tensorflow/ILMDBReader.htm">ILMDBReader</a>
        </li>
				<li>
            <a href="../tensorflow/IModule.htm">IModule</a>
        </li>
				<li>
            <a href="../tensorflow/Iname_scope.htm">Iname_scope</a>
        </li>
				<li>
            <a href="../tensorflow/IndexedSlices.htm">IndexedSlices</a>
        </li>
				<li>
            <a href="../tensorflow/IndexedSlicesSpec.htm">IndexedSlicesSpec</a>
        </li>
				<li>
            <a href="../tensorflow/InteractiveSession.htm">InteractiveSession</a>
        </li>
				<li>
            <a href="../tensorflow/Iones_initializer.htm">Iones_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IOperation.htm">IOperation</a>
        </li>
				<li>
            <a href="../tensorflow/IOpError.htm">IOpError</a>
        </li>
				<li>
            <a href="../tensorflow/IOptionalSpec.htm">IOptionalSpec</a>
        </li>
				<li>
            <a href="../tensorflow/Iorthogonal_initializer.htm">Iorthogonal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IPaddingFIFOQueue.htm">IPaddingFIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IPriorityQueue.htm">IPriorityQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IQueueBase.htm">IQueueBase</a>
        </li>
				<li>
            <a href="../tensorflow/IRaggedTensor.htm">IRaggedTensor</a>
        </li>
				<li>
            <a href="../tensorflow/IRaggedTensorSpec.htm">IRaggedTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/Irandom_normal_initializer.htm">Irandom_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Irandom_uniform_initializer.htm">Irandom_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IRandomShuffleQueue.htm">IRandomShuffleQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IReaderBase.htm">IReaderBase</a>
        </li>
				<li>
            <a href="../tensorflow/IRegisterGradient.htm">IRegisterGradient</a>
        </li>
				<li>
            <a href="../tensorflow/ISession.htm">ISession</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseConditionalAccumulator.htm">ISparseConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseFeature.htm">ISparseFeature</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseTensor.htm">ISparseTensor</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseTensorSpec.htm">ISparseTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseTensorValue.htm">ISparseTensorValue</a>
        </li>
				<li>
            <a href="../tensorflow/ITensor.htm">ITensor</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorArray.htm">ITensorArray</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorArraySpec.htm">ITensorArraySpec</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorShape.htm">ITensorShape</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorSpec.htm">ITensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/ITextLineReader.htm">ITextLineReader</a>
        </li>
				<li>
            <a href="../tensorflow/ITFRecordReader.htm">ITFRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/Itruncated_normal_initializer.htm">Itruncated_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/ITypeSpec.htm">ITypeSpec</a>
        </li>
				<li>
            <a href="../tensorflow/IUnconnectedGradients.htm">IUnconnectedGradients</a>
        </li>
				<li>
            <a href="../tensorflow/Iuniform_unit_scaling_initializer.htm">Iuniform_unit_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IVariable.htm">IVariable</a>
        </li>
				<li>
            <a href="../tensorflow/Ivariable_scope.htm">Ivariable_scope</a>
        </li>
				<li>
            <a href="../tensorflow/IVariableScope.htm">IVariableScope</a>
        </li>
				<li>
            <a href="../tensorflow/Ivariance_scaling_initializer.htm">Ivariance_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IVarLenFeature.htm">IVarLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/IWholeFileReader.htm">IWholeFileReader</a>
        </li>
				<li>
            <a href="../tensorflow/Izeros_initializer.htm">Izeros_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/LazyLoader.htm">LazyLoader</a>
        </li>
				<li>
            <a href="../tensorflow/LMDBReader.htm">LMDBReader</a>
        </li>
				<li>
            <a href="../tensorflow/Module.htm">Module</a>
        </li>
				<li>
            <a href="../tensorflow/name_scope.htm">name_scope</a>
        </li>
				<li>
            <a href="../tensorflow/ones_initializer.htm">ones_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Operation.htm">Operation</a>
        </li>
				<li>
            <a href="../tensorflow/Operation._InputList.htm">Operation._InputList</a>
        </li>
				<li>
            <a href="../tensorflow/Operation.I_InputList.htm">Operation.I_InputList</a>
        </li>
				<li>
            <a href="../tensorflow/OpError.htm">OpError</a>
        </li>
				<li>
            <a href="../tensorflow/OptionalSpec.htm">OptionalSpec</a>
        </li>
				<li>
            <a href="../tensorflow/orthogonal_initializer.htm">orthogonal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/PaddingFIFOQueue.htm">PaddingFIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/PriorityQueue.htm">PriorityQueue</a>
        </li>
				<li>
            <a href="../tensorflow/QueueBase.htm">QueueBase</a>
        </li>
				<li>
            <a href="../tensorflow/RaggedTensor.htm">RaggedTensor</a>
        </li>
				<li>
            <a href="../tensorflow/RaggedTensorSpec.htm">RaggedTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/random_normal_initializer.htm">random_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/random_uniform_initializer.htm">random_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/RandomShuffleQueue.htm">RandomShuffleQueue</a>
        </li>
				<li>
            <a href="../tensorflow/ReaderBase.htm">ReaderBase</a>
        </li>
				<li>
            <a href="../tensorflow/RegisterGradient.htm">RegisterGradient</a>
        </li>
				<li>
            <a href="../tensorflow/Session.htm">Session</a>
        </li>
				<li>
            <a href="../tensorflow/SparseConditionalAccumulator.htm">SparseConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/SparseFeature.htm">SparseFeature</a>
        </li>
				<li>
            <a href="../tensorflow/SparseTensor.htm">SparseTensor</a>
        </li>
				<li>
            <a href="../tensorflow/SparseTensorSpec.htm">SparseTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/SparseTensorValue.htm">SparseTensorValue</a>
        </li>
				<li>
            <a href="../tensorflow/Tensor.htm">Tensor</a>
        </li>
				<li>
            <a href="../tensorflow/Tensor`1.htm">Tensor&lt;T&gt;</a>
        </li>
				<li>
            <a href="../tensorflow/TensorArray.htm">TensorArray</a>
        </li>
				<li>
            <a href="../tensorflow/TensorArraySpec.htm">TensorArraySpec</a>
        </li>
				<li>
            <a href="../tensorflow/TensorDimension.htm">TensorDimension</a>
        </li>
				<li>
            <a href="../tensorflow/TensorDimensionSlice.htm">TensorDimensionSlice</a>
        </li>
				<li>
            <a href="../tensorflow/TensorShape.htm">TensorShape</a>
        </li>
				<li>
            <a href="../tensorflow/TensorSpec.htm">TensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/TextLineReader.htm">TextLineReader</a>
        </li>
				<li>
            <a href="../tensorflow/tf.htm">tf</a>
        </li>
				<li>
            <a href="../tensorflow/tf.audio.htm">tf.audio</a>
        </li>
				<li>
            <a href="../tensorflow/tf.autograph.htm">tf.autograph</a>
        </li>
				<li>
            <a href="../tensorflow/tf.autograph.experimental.htm">tf.autograph.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.bitwise.htm">tf.bitwise</a>
        </li>
				<li>
            <a href="../tensorflow/tf.compat.htm">tf.compat</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.htm">tf.config</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.experimental.htm">tf.config.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.optimizer.htm">tf.config.optimizer</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.threading.htm">tf.config.threading</a>
        </li>
				<li>
            <a href="../tensorflow/tf.data.htm">tf.data</a>
        </li>
				<li>
            <a href="../tensorflow/tf.data.experimental.htm">tf.data.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.debugging.htm">tf.debugging</a>
        </li>
				<li>
            <a href="../tensorflow/tf.distribute.htm">tf.distribute</a>
        </li>
				<li>
            <a href="../tensorflow/tf.distributions.htm">tf.distributions</a>
        </li>
				<li>
            <a href="../tensorflow/tf.errors.htm">tf.errors</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.htm">tf.estimator</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.experimental.htm">tf.estimator.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.export.htm">tf.estimator.export</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.inputs.htm">tf.estimator.inputs</a>
        </li>
				<li>
            <a href="../tensorflow/tf.experimental.htm">tf.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.feature_column.htm" class="current">tf.feature_column</a>
        </li>
				<li>
            <a href="../tensorflow/tf.gfile.htm">tf.gfile</a>
        </li>
				<li>
            <a href="../tensorflow/tf.graph_util.htm">tf.graph_util</a>
        </li>
				<li>
            <a href="../tensorflow/tf.image.htm">tf.image</a>
        </li>
				<li>
            <a href="../tensorflow/tf.initializers.htm">tf.initializers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.io.htm">tf.io</a>
        </li>
				<li>
            <a href="../tensorflow/tf.io.gfile.htm">tf.io.gfile</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.htm">tf.keras</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.activations.htm">tf.keras.activations</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.htm">tf.keras.applications</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.densenet.htm">tf.keras.applications.densenet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.imagenet_utils.htm">tf.keras.applications.imagenet_utils</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.inception_resnet_v2.htm">tf.keras.applications.inception_resnet_v2</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.inception_v3.htm">tf.keras.applications.inception_v3</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.mobilenet.htm">tf.keras.applications.mobilenet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.mobilenet_v2.htm">tf.keras.applications.mobilenet_v2</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.nasnet.htm">tf.keras.applications.nasnet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.resnet.htm">tf.keras.applications.resnet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.resnet_v2.htm">tf.keras.applications.resnet_v2</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.vgg16.htm">tf.keras.applications.vgg16</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.vgg19.htm">tf.keras.applications.vgg19</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.xception.htm">tf.keras.applications.xception</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.backend.htm">tf.keras.backend</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.constraints.htm">tf.keras.constraints</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.htm">tf.keras.datasets</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.boston_housing.htm">tf.keras.datasets.boston_housing</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.cifar10.htm">tf.keras.datasets.cifar10</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.cifar100.htm">tf.keras.datasets.cifar100</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.fashion_mnist.htm">tf.keras.datasets.fashion_mnist</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.imdb.htm">tf.keras.datasets.imdb</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.mnist.htm">tf.keras.datasets.mnist</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.reuters.htm">tf.keras.datasets.reuters</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.estimator.htm">tf.keras.estimator</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.experimental.htm">tf.keras.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.initializers.htm">tf.keras.initializers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.layers.htm">tf.keras.layers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.losses.htm">tf.keras.losses</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.metrics.htm">tf.keras.metrics</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.mixed_precision.htm">tf.keras.mixed_precision</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.mixed_precision.experimental.htm">tf.keras.mixed_precision.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.models.htm">tf.keras.models</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.optimizers.htm">tf.keras.optimizers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.optimizers.schedules.htm">tf.keras.optimizers.schedules</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.preprocessing.htm">tf.keras.preprocessing</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.preprocessing.image.htm">tf.keras.preprocessing.image</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.regularizers.htm">tf.keras.regularizers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.utils.htm">tf.keras.utils</a>
        </li>
				<li>
            <a href="../tensorflow/tf.layers.htm">tf.layers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.layers.experimental.htm">tf.layers.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.linalg.htm">tf.linalg</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.htm">tf.lite</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.htm">tf.lite.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.microfrontend.htm">tf.lite.experimental.microfrontend</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.microfrontend.python.htm">tf.lite.experimental.microfrontend.python</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.microfrontend.python.ops.htm">tf.lite.experimental.microfrontend.python.ops</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.nn.htm">tf.lite.experimental.nn</a>
        </li>
				<li>
            <a href="../tensorflow/tf.logging.htm">tf.logging</a>
        </li>
				<li>
            <a href="../tensorflow/tf.losses.htm">tf.losses</a>
        </li>
				<li>
            <a href="../tensorflow/tf.math.htm">tf.math</a>
        </li>
				<li>
            <a href="../tensorflow/tf.metrics.htm">tf.metrics</a>
        </li>
				<li>
            <a href="../tensorflow/tf.nest.htm">tf.nest</a>
        </li>
				<li>
            <a href="../tensorflow/tf.nn.htm">tf.nn</a>
        </li>
				<li>
            <a href="../tensorflow/tf.profiler.htm">tf.profiler</a>
        </li>
				<li>
            <a href="../tensorflow/tf.quantization.htm">tf.quantization</a>
        </li>
				<li>
            <a href="../tensorflow/tf.ragged.htm">tf.ragged</a>
        </li>
				<li>
            <a href="../tensorflow/tf.random.htm">tf.random</a>
        </li>
				<li>
            <a href="../tensorflow/tf.random.experimental.htm">tf.random.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.resource_loader.htm">tf.resource_loader</a>
        </li>
				<li>
            <a href="../tensorflow/tf.saved_model.htm">tf.saved_model</a>
        </li>
				<li>
            <a href="../tensorflow/tf.saved_model.main_op.htm">tf.saved_model.main_op</a>
        </li>
				<li>
            <a href="../tensorflow/tf.sets.htm">tf.sets</a>
        </li>
				<li>
            <a href="../tensorflow/tf.signal.htm">tf.signal</a>
        </li>
				<li>
            <a href="../tensorflow/tf.sparse.htm">tf.sparse</a>
        </li>
				<li>
            <a href="../tensorflow/tf.strings.htm">tf.strings</a>
        </li>
				<li>
            <a href="../tensorflow/tf.summary.htm">tf.summary</a>
        </li>
				<li>
            <a href="../tensorflow/tf.summary.experimental.htm">tf.summary.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.sysconfig.htm">tf.sysconfig</a>
        </li>
				<li>
            <a href="../tensorflow/tf.test.htm">tf.test</a>
        </li>
				<li>
            <a href="../tensorflow/tf.tpu.htm">tf.tpu</a>
        </li>
				<li>
            <a href="../tensorflow/tf.tpu.experimental.htm">tf.tpu.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.train.htm">tf.train</a>
        </li>
				<li>
            <a href="../tensorflow/tf.train.experimental.htm">tf.train.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.user_ops.htm">tf.user_ops</a>
        </li>
				<li>
            <a href="../tensorflow/tf.xla.htm">tf.xla</a>
        </li>
				<li>
            <a href="../tensorflow/tf.xla.experimental.htm">tf.xla.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/TFRecordReader.htm">TFRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/truncated_normal_initializer.htm">truncated_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/TypeSpec.htm">TypeSpec</a>
        </li>
				<li>
            <a href="../tensorflow/UnconnectedGradients.htm">UnconnectedGradients</a>
        </li>
				<li>
            <a href="../tensorflow/uniform_unit_scaling_initializer.htm">uniform_unit_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Variable.htm">Variable</a>
        </li>
				<li>
            <a href="../tensorflow/variable_scope.htm">variable_scope</a>
        </li>
				<li>
            <a href="../tensorflow/VariableAggregation.htm">VariableAggregation</a>
        </li>
				<li>
            <a href="../tensorflow/VariableScope.htm">VariableScope</a>
        </li>
				<li>
            <a href="../tensorflow/VariableSynchronization.htm">VariableSynchronization</a>
        </li>
				<li>
            <a href="../tensorflow/variance_scaling_initializer.htm">variance_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/VarLenFeature.htm">VarLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/WholeFileReader.htm">WholeFileReader</a>
        </li>
				<li>
            <a href="../tensorflow/zeros_initializer.htm">zeros_initializer</a>
        </li>
		</ul>
	</div>
</nav>
	<article>
    <header>
		<p class="class"><strong>Type</strong> tf.feature_column</p>
	</header>
	<section>
		<header>
		<p><strong>Namespace</strong> tensorflow</p>
		</header>
    <div class="sub-header">
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../tensorflow/tf.feature_column.htm#bucketized_column">bucketized_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#bucketized_column">bucketized_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_hash_bucket">categorical_column_with_hash_bucket</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_hash_bucket">categorical_column_with_hash_bucket</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_hash_bucket">categorical_column_with_hash_bucket</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_hash_bucket">categorical_column_with_hash_bucket</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_hash_bucket">categorical_column_with_hash_bucket</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_hash_bucket">categorical_column_with_hash_bucket</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_hash_bucket_dyn">categorical_column_with_hash_bucket_dyn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_identity">categorical_column_with_identity</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_identity">categorical_column_with_identity</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_identity">categorical_column_with_identity</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_identity">categorical_column_with_identity</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_identity">categorical_column_with_identity</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_identity">categorical_column_with_identity</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_identity_dyn">categorical_column_with_identity_dyn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_file">categorical_column_with_vocabulary_file</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_file">categorical_column_with_vocabulary_file</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_file">categorical_column_with_vocabulary_file</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_file">categorical_column_with_vocabulary_file</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_file">categorical_column_with_vocabulary_file</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_file">categorical_column_with_vocabulary_file</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_list">categorical_column_with_vocabulary_list</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_list">categorical_column_with_vocabulary_list</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_list">categorical_column_with_vocabulary_list</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_list">categorical_column_with_vocabulary_list</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_list">categorical_column_with_vocabulary_list</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_list">categorical_column_with_vocabulary_list</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_list">categorical_column_with_vocabulary_list</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_list">categorical_column_with_vocabulary_list</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_list_dyn">categorical_column_with_vocabulary_list_dyn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#crossed_column">crossed_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#crossed_column_dyn">crossed_column_dyn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#embedding_column">embedding_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#embedding_column">embedding_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#indicator_column">indicator_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#indicator_column_dyn">indicator_column_dyn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer">input_layer</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer_dyn">input_layer_dyn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#linear_model">linear_model</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#linear_model">linear_model</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#linear_model">linear_model</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#linear_model">linear_model</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#linear_model_dyn">linear_model_dyn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column">numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column_dyn">numeric_column_dyn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#sequence_numeric_column">sequence_numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#sequence_numeric_column">sequence_numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#sequence_numeric_column">sequence_numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#sequence_numeric_column">sequence_numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#sequence_numeric_column">sequence_numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#sequence_numeric_column">sequence_numeric_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#shared_embedding_columns">shared_embedding_columns</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#shared_embedding_columns">shared_embedding_columns</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#shared_embeddings">shared_embeddings</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#shared_embeddings">shared_embeddings</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#shared_embeddings_dyn">shared_embeddings_dyn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#weighted_categorical_column">weighted_categorical_column</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#weighted_categorical_column_dyn">weighted_categorical_column_dyn</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../tensorflow/tf.feature_column.htm#bucketized_column_fn">bucketized_column_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_hash_bucket_fn">categorical_column_with_hash_bucket_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_identity_fn">categorical_column_with_identity_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_file_fn">categorical_column_with_vocabulary_file_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#categorical_column_with_vocabulary_list_fn">categorical_column_with_vocabulary_list_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#crossed_column_fn">crossed_column_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#embedding_column_fn">embedding_column_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#indicator_column_fn">indicator_column_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#input_layer_fn">input_layer_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#linear_model_fn">linear_model_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#make_parse_example_spec_fn">make_parse_example_spec_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#numeric_column_fn">numeric_column_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#sequence_categorical_column_with_hash_bucket_fn">sequence_categorical_column_with_hash_bucket_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#sequence_categorical_column_with_identity_fn">sequence_categorical_column_with_identity_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#sequence_categorical_column_with_vocabulary_file_fn">sequence_categorical_column_with_vocabulary_file_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#sequence_categorical_column_with_vocabulary_list_fn">sequence_categorical_column_with_vocabulary_list_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#sequence_numeric_column_fn">sequence_numeric_column_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#shared_embedding_columns_fn">shared_embedding_columns_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#shared_embeddings_fn">shared_embeddings_fn</a></li>
				<li><a href="../tensorflow/tf.feature_column.htm#weighted_categorical_column_fn">weighted_categorical_column_fn</a></li>
			</ul>
		
	</div>
	
	
	<h3 class="section">Public static methods</h3>

	<div id="bucketized_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/BucketizedColumn.htm">BucketizedColumn</a> <strong>bucketized_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_FeatureColumn.htm">_FeatureColumn</a> source_column, <span title="System.double">double</span> boundaries)
		</h4>
		<div class="content">Represents discretized dense input. <p></p> Buckets include the left boundary, and exclude the right boundary. Namely,
`boundaries=[0., 1., 2.]` generates buckets `(-inf, 0.)`, `[0., 1.)`,
`[1., 2.)`, and `[2., +inf)`. <p></p> For example, if the inputs are
then the output will be
Example:
`bucketized_column` can also be crossed with another categorical column using
`crossed_column`: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_FeatureColumn.htm">_FeatureColumn</a></code> source_column
						</dt>
						<dd>A one-dimensional dense column which is generated with
`numeric_column`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> boundaries
						</dt>
						<dd>A sorted list or tuple of floats specifying the boundaries. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/BucketizedColumn.htm">BucketizedColumn</a></code>
					</dt>
					<dd>A `BucketizedColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>boundaries = [0, 10, 100]
            input tensor = [[-5, 10000]
                            [150,   10]
                            [5,    100]] </pre>
</div>
		</div>
	</div>
	<div id="bucketized_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/BucketizedColumn.htm">BucketizedColumn</a> <strong>bucketized_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_FeatureColumn.htm">_FeatureColumn</a> source_column, <span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> boundaries)
		</h4>
		<div class="content">Represents discretized dense input. <p></p> Buckets include the left boundary, and exclude the right boundary. Namely,
`boundaries=[0., 1., 2.]` generates buckets `(-inf, 0.)`, `[0., 1.)`,
`[1., 2.)`, and `[2., +inf)`. <p></p> For example, if the inputs are
then the output will be
Example:
`bucketized_column` can also be crossed with another categorical column using
`crossed_column`: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_FeatureColumn.htm">_FeatureColumn</a></code> source_column
						</dt>
						<dd>A one-dimensional dense column which is generated with
`numeric_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> boundaries
						</dt>
						<dd>A sorted list or tuple of floats specifying the boundaries. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/BucketizedColumn.htm">BucketizedColumn</a></code>
					</dt>
					<dd>A `BucketizedColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>boundaries = [0, 10, 100]
            input tensor = [[-5, 10000]
                            [150,   10]
                            [5,    100]] </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_hash_bucket" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/HashedCategoricalColumn.htm">HashedCategoricalColumn</a> <strong>categorical_column_with_hash_bucket</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> hash_bucket_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">Represents sparse feature where ids are set by hashing. <p></p> Use this when your sparse features are in string or integer format, and you
want to distribute your inputs into a finite number of buckets by hashing.
output_id = Hash(input_feature_string) % bucket_size for string type input.
For int type input, the value is converted to its string representation first
and then hashed by the same formula. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> hash_bucket_size
						</dt>
						<dd>An int > 1. The number of buckets. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/HashedCategoricalColumn.htm">HashedCategoricalColumn</a></code>
					</dt>
					<dd>A `HashedCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>keywords = categorical_column_with_hash_bucket("keywords", 10K)
            columns = [keywords,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction = linear_model(features, columns) <p></p> # or
keywords_embedded = embedding_column(keywords, 16)
columns = [keywords_embedded,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
dense_tensor = input_layer(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_hash_bucket" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/HashedCategoricalColumn.htm">HashedCategoricalColumn</a> <strong>categorical_column_with_hash_bucket</strong>(<span title="System.string">string</span> key, <span title="System.string">string</span> hash_bucket_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">Represents sparse feature where ids are set by hashing. <p></p> Use this when your sparse features are in string or integer format, and you
want to distribute your inputs into a finite number of buckets by hashing.
output_id = Hash(input_feature_string) % bucket_size for string type input.
For int type input, the value is converted to its string representation first
and then hashed by the same formula. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> hash_bucket_size
						</dt>
						<dd>An int > 1. The number of buckets. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/HashedCategoricalColumn.htm">HashedCategoricalColumn</a></code>
					</dt>
					<dd>A `HashedCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>keywords = categorical_column_with_hash_bucket("keywords", 10K)
            columns = [keywords,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction = linear_model(features, columns) <p></p> # or
keywords_embedded = embedding_column(keywords, 16)
columns = [keywords_embedded,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
dense_tensor = input_layer(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_hash_bucket" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/HashedCategoricalColumn.htm">HashedCategoricalColumn</a> <strong>categorical_column_with_hash_bucket</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.int">int</span> hash_bucket_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">Represents sparse feature where ids are set by hashing. <p></p> Use this when your sparse features are in string or integer format, and you
want to distribute your inputs into a finite number of buckets by hashing.
output_id = Hash(input_feature_string) % bucket_size for string type input.
For int type input, the value is converted to its string representation first
and then hashed by the same formula. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> hash_bucket_size
						</dt>
						<dd>An int > 1. The number of buckets. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/HashedCategoricalColumn.htm">HashedCategoricalColumn</a></code>
					</dt>
					<dd>A `HashedCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>keywords = categorical_column_with_hash_bucket("keywords", 10K)
            columns = [keywords,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction = linear_model(features, columns) <p></p> # or
keywords_embedded = embedding_column(keywords, 16)
columns = [keywords_embedded,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
dense_tensor = input_layer(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_hash_bucket" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/HashedCategoricalColumn.htm">HashedCategoricalColumn</a> <strong>categorical_column_with_hash_bucket</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> hash_bucket_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">Represents sparse feature where ids are set by hashing. <p></p> Use this when your sparse features are in string or integer format, and you
want to distribute your inputs into a finite number of buckets by hashing.
output_id = Hash(input_feature_string) % bucket_size for string type input.
For int type input, the value is converted to its string representation first
and then hashed by the same formula. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> hash_bucket_size
						</dt>
						<dd>An int > 1. The number of buckets. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/HashedCategoricalColumn.htm">HashedCategoricalColumn</a></code>
					</dt>
					<dd>A `HashedCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>keywords = categorical_column_with_hash_bucket("keywords", 10K)
            columns = [keywords,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction = linear_model(features, columns) <p></p> # or
keywords_embedded = embedding_column(keywords, 16)
columns = [keywords_embedded,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
dense_tensor = input_layer(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_hash_bucket" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/HashedCategoricalColumn.htm">HashedCategoricalColumn</a> <strong>categorical_column_with_hash_bucket</strong>(<span title="System.string">string</span> key, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> hash_bucket_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">Represents sparse feature where ids are set by hashing. <p></p> Use this when your sparse features are in string or integer format, and you
want to distribute your inputs into a finite number of buckets by hashing.
output_id = Hash(input_feature_string) % bucket_size for string type input.
For int type input, the value is converted to its string representation first
and then hashed by the same formula. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> hash_bucket_size
						</dt>
						<dd>An int > 1. The number of buckets. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/HashedCategoricalColumn.htm">HashedCategoricalColumn</a></code>
					</dt>
					<dd>A `HashedCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>keywords = categorical_column_with_hash_bucket("keywords", 10K)
            columns = [keywords,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction = linear_model(features, columns) <p></p> # or
keywords_embedded = embedding_column(keywords, 16)
columns = [keywords_embedded,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
dense_tensor = input_layer(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_hash_bucket" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/HashedCategoricalColumn.htm">HashedCategoricalColumn</a> <strong>categorical_column_with_hash_bucket</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.string">string</span> hash_bucket_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">Represents sparse feature where ids are set by hashing. <p></p> Use this when your sparse features are in string or integer format, and you
want to distribute your inputs into a finite number of buckets by hashing.
output_id = Hash(input_feature_string) % bucket_size for string type input.
For int type input, the value is converted to its string representation first
and then hashed by the same formula. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> hash_bucket_size
						</dt>
						<dd>An int > 1. The number of buckets. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/HashedCategoricalColumn.htm">HashedCategoricalColumn</a></code>
					</dt>
					<dd>A `HashedCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>keywords = categorical_column_with_hash_bucket("keywords", 10K)
            columns = [keywords,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction = linear_model(features, columns) <p></p> # or
keywords_embedded = embedding_column(keywords, 16)
columns = [keywords_embedded,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
dense_tensor = input_layer(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_hash_bucket_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>categorical_column_with_hash_bucket_dyn</strong>(<span title="System.object">object</span> key, <span title="System.object">object</span> hash_bucket_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">Represents sparse feature where ids are set by hashing. <p></p> Use this when your sparse features are in string or integer format, and you
want to distribute your inputs into a finite number of buckets by hashing.
output_id = Hash(input_feature_string) % bucket_size for string type input.
For int type input, the value is converted to its string representation first
and then hashed by the same formula. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> hash_bucket_size
						</dt>
						<dd>An int > 1. The number of buckets. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `HashedCategoricalColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>keywords = categorical_column_with_hash_bucket("keywords", 10K)
            columns = [keywords,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction = linear_model(features, columns) <p></p> # or
keywords_embedded = embedding_column(keywords, 16)
columns = [keywords_embedded,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
dense_tensor = input_layer(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_identity" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/IdentityCategoricalColumn.htm">IdentityCategoricalColumn</a> <strong>categorical_column_with_identity</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.string">string</span> num_buckets, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> default_value)
		</h4>
		<div class="content">A `CategoricalColumn` that returns identity values. <p></p> Use this when your inputs are integers in the range `[0, num_buckets)`, and
you want to use the input value itself as the categorical ID. Values outside
this range will result in `default_value` if specified, otherwise it will
fail. <p></p> Typically, this is used for contiguous ranges of integer indexes, but
it doesn't have to be. This might be inefficient, however, if many of IDs
are unused. Consider `categorical_column_with_hash_bucket` in that case. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> In the following examples, each input in the range `[0, 1000000)` is assigned
the same value. All other inputs are assigned `default_value` 0. Note that a
literal 0 in inputs will result in the same default ID. <p></p> Linear model:
Embedding for a DNN model: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> num_buckets
						</dt>
						<dd>Range of inputs and outputs is `[0, num_buckets)`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> default_value
						</dt>
						<dd>If `None`, this column's graph operations will fail for
out-of-range inputs. Otherwise, this value must be in the range
`[0, num_buckets)`, and will replace inputs in that range. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/IdentityCategoricalColumn.htm">IdentityCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` that returns identity values. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>video_id = categorical_column_with_identity(
                key='video_id', num_buckets=1000000, default_value=0)
            columns = [video_id,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_identity" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/IdentityCategoricalColumn.htm">IdentityCategoricalColumn</a> <strong>categorical_column_with_identity</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> num_buckets, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> default_value)
		</h4>
		<div class="content">A `CategoricalColumn` that returns identity values. <p></p> Use this when your inputs are integers in the range `[0, num_buckets)`, and
you want to use the input value itself as the categorical ID. Values outside
this range will result in `default_value` if specified, otherwise it will
fail. <p></p> Typically, this is used for contiguous ranges of integer indexes, but
it doesn't have to be. This might be inefficient, however, if many of IDs
are unused. Consider `categorical_column_with_hash_bucket` in that case. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> In the following examples, each input in the range `[0, 1000000)` is assigned
the same value. All other inputs are assigned `default_value` 0. Note that a
literal 0 in inputs will result in the same default ID. <p></p> Linear model:
Embedding for a DNN model: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_buckets
						</dt>
						<dd>Range of inputs and outputs is `[0, num_buckets)`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> default_value
						</dt>
						<dd>If `None`, this column's graph operations will fail for
out-of-range inputs. Otherwise, this value must be in the range
`[0, num_buckets)`, and will replace inputs in that range. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/IdentityCategoricalColumn.htm">IdentityCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` that returns identity values. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>video_id = categorical_column_with_identity(
                key='video_id', num_buckets=1000000, default_value=0)
            columns = [video_id,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_identity" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/IdentityCategoricalColumn.htm">IdentityCategoricalColumn</a> <strong>categorical_column_with_identity</strong>(<span title="System.string">string</span> key, <span title="System.string">string</span> num_buckets, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> default_value)
		</h4>
		<div class="content">A `CategoricalColumn` that returns identity values. <p></p> Use this when your inputs are integers in the range `[0, num_buckets)`, and
you want to use the input value itself as the categorical ID. Values outside
this range will result in `default_value` if specified, otherwise it will
fail. <p></p> Typically, this is used for contiguous ranges of integer indexes, but
it doesn't have to be. This might be inefficient, however, if many of IDs
are unused. Consider `categorical_column_with_hash_bucket` in that case. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> In the following examples, each input in the range `[0, 1000000)` is assigned
the same value. All other inputs are assigned `default_value` 0. Note that a
literal 0 in inputs will result in the same default ID. <p></p> Linear model:
Embedding for a DNN model: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> num_buckets
						</dt>
						<dd>Range of inputs and outputs is `[0, num_buckets)`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> default_value
						</dt>
						<dd>If `None`, this column's graph operations will fail for
out-of-range inputs. Otherwise, this value must be in the range
`[0, num_buckets)`, and will replace inputs in that range. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/IdentityCategoricalColumn.htm">IdentityCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` that returns identity values. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>video_id = categorical_column_with_identity(
                key='video_id', num_buckets=1000000, default_value=0)
            columns = [video_id,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_identity" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/IdentityCategoricalColumn.htm">IdentityCategoricalColumn</a> <strong>categorical_column_with_identity</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.int">int</span> num_buckets, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> default_value)
		</h4>
		<div class="content">A `CategoricalColumn` that returns identity values. <p></p> Use this when your inputs are integers in the range `[0, num_buckets)`, and
you want to use the input value itself as the categorical ID. Values outside
this range will result in `default_value` if specified, otherwise it will
fail. <p></p> Typically, this is used for contiguous ranges of integer indexes, but
it doesn't have to be. This might be inefficient, however, if many of IDs
are unused. Consider `categorical_column_with_hash_bucket` in that case. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> In the following examples, each input in the range `[0, 1000000)` is assigned
the same value. All other inputs are assigned `default_value` 0. Note that a
literal 0 in inputs will result in the same default ID. <p></p> Linear model:
Embedding for a DNN model: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_buckets
						</dt>
						<dd>Range of inputs and outputs is `[0, num_buckets)`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> default_value
						</dt>
						<dd>If `None`, this column's graph operations will fail for
out-of-range inputs. Otherwise, this value must be in the range
`[0, num_buckets)`, and will replace inputs in that range. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/IdentityCategoricalColumn.htm">IdentityCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` that returns identity values. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>video_id = categorical_column_with_identity(
                key='video_id', num_buckets=1000000, default_value=0)
            columns = [video_id,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_identity" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/IdentityCategoricalColumn.htm">IdentityCategoricalColumn</a> <strong>categorical_column_with_identity</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> num_buckets, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> default_value)
		</h4>
		<div class="content">A `CategoricalColumn` that returns identity values. <p></p> Use this when your inputs are integers in the range `[0, num_buckets)`, and
you want to use the input value itself as the categorical ID. Values outside
this range will result in `default_value` if specified, otherwise it will
fail. <p></p> Typically, this is used for contiguous ranges of integer indexes, but
it doesn't have to be. This might be inefficient, however, if many of IDs
are unused. Consider `categorical_column_with_hash_bucket` in that case. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> In the following examples, each input in the range `[0, 1000000)` is assigned
the same value. All other inputs are assigned `default_value` 0. Note that a
literal 0 in inputs will result in the same default ID. <p></p> Linear model:
Embedding for a DNN model: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> num_buckets
						</dt>
						<dd>Range of inputs and outputs is `[0, num_buckets)`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> default_value
						</dt>
						<dd>If `None`, this column's graph operations will fail for
out-of-range inputs. Otherwise, this value must be in the range
`[0, num_buckets)`, and will replace inputs in that range. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/IdentityCategoricalColumn.htm">IdentityCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` that returns identity values. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>video_id = categorical_column_with_identity(
                key='video_id', num_buckets=1000000, default_value=0)
            columns = [video_id,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_identity" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/IdentityCategoricalColumn.htm">IdentityCategoricalColumn</a> <strong>categorical_column_with_identity</strong>(<span title="System.string">string</span> key, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> num_buckets, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> default_value)
		</h4>
		<div class="content">A `CategoricalColumn` that returns identity values. <p></p> Use this when your inputs are integers in the range `[0, num_buckets)`, and
you want to use the input value itself as the categorical ID. Values outside
this range will result in `default_value` if specified, otherwise it will
fail. <p></p> Typically, this is used for contiguous ranges of integer indexes, but
it doesn't have to be. This might be inefficient, however, if many of IDs
are unused. Consider `categorical_column_with_hash_bucket` in that case. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> In the following examples, each input in the range `[0, 1000000)` is assigned
the same value. All other inputs are assigned `default_value` 0. Note that a
literal 0 in inputs will result in the same default ID. <p></p> Linear model:
Embedding for a DNN model: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> num_buckets
						</dt>
						<dd>Range of inputs and outputs is `[0, num_buckets)`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> default_value
						</dt>
						<dd>If `None`, this column's graph operations will fail for
out-of-range inputs. Otherwise, this value must be in the range
`[0, num_buckets)`, and will replace inputs in that range. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/IdentityCategoricalColumn.htm">IdentityCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` that returns identity values. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>video_id = categorical_column_with_identity(
                key='video_id', num_buckets=1000000, default_value=0)
            columns = [video_id,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_identity_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>categorical_column_with_identity_dyn</strong>(<span title="System.object">object</span> key, <span title="System.object">object</span> num_buckets, <span title="System.object">object</span> default_value)
		</h4>
		<div class="content">A `CategoricalColumn` that returns identity values. <p></p> Use this when your inputs are integers in the range `[0, num_buckets)`, and
you want to use the input value itself as the categorical ID. Values outside
this range will result in `default_value` if specified, otherwise it will
fail. <p></p> Typically, this is used for contiguous ranges of integer indexes, but
it doesn't have to be. This might be inefficient, however, if many of IDs
are unused. Consider `categorical_column_with_hash_bucket` in that case. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> In the following examples, each input in the range `[0, 1000000)` is assigned
the same value. All other inputs are assigned `default_value` 0. Note that a
literal 0 in inputs will result in the same default ID. <p></p> Linear model:
Embedding for a DNN model: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> num_buckets
						</dt>
						<dd>Range of inputs and outputs is `[0, num_buckets)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> default_value
						</dt>
						<dd>If `None`, this column's graph operations will fail for
out-of-range inputs. Otherwise, this value must be in the range
`[0, num_buckets)`, and will replace inputs in that range. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `CategoricalColumn` that returns identity values. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>video_id = categorical_column_with_identity(
                key='video_id', num_buckets=1000000, default_value=0)
            columns = [video_id,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_file" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyFileCategoricalColumn.htm">VocabularyFileCategoricalColumn</a> <strong>categorical_column_with_vocabulary_file</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> vocabulary_file, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> vocabulary_size, <span title="System.int">int</span> num_oov_buckets, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A `CategoricalColumn` with a vocabulary file. <p></p> Use this when your inputs are in string or integer format, and you have a
vocabulary file that maps each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
File '/us/states.txt' contains 50 lines, each with a 2-character U.S. state
abbreviation. All inputs with values in that file are assigned an ID 0-49,
corresponding to its line number. All other values are hashed and assigned an
ID 50-54.
Example with `default_value`:
File '/us/states.txt' contains 51 lines - the first line is 'XX', and the
other 50 each have a 2-character U.S. state abbreviation. Both a literal 'XX'
in input, and other values missing from the file, will be assigned ID 0. All
others are assigned the corresponding line number 1-50.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> vocabulary_file
						</dt>
						<dd>The vocabulary file name. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> vocabulary_size
						</dt>
						<dd>Number of the elements in the vocabulary. This must be no
greater than length of `vocabulary_file`, if less than length, later
values are ignored. If None, it is set to the length of `vocabulary_file`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of
the input value. A positive `num_oov_buckets` can not be specified with
`default_value`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyFileCategoricalColumn.htm">VocabularyFileCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with a vocabulary file. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>states = categorical_column_with_vocabulary_file(
                key='states', vocabulary_file='/us/states.txt', vocabulary_size=50,
                num_oov_buckets=5)
            columns = [states,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_file" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyFileCategoricalColumn.htm">VocabularyFileCategoricalColumn</a> <strong>categorical_column_with_vocabulary_file</strong>(<span title="System.string">string</span> key, <span title="System.string">string</span> vocabulary_file, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> vocabulary_size, <span title="System.int">int</span> num_oov_buckets, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A `CategoricalColumn` with a vocabulary file. <p></p> Use this when your inputs are in string or integer format, and you have a
vocabulary file that maps each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
File '/us/states.txt' contains 50 lines, each with a 2-character U.S. state
abbreviation. All inputs with values in that file are assigned an ID 0-49,
corresponding to its line number. All other values are hashed and assigned an
ID 50-54.
Example with `default_value`:
File '/us/states.txt' contains 51 lines - the first line is 'XX', and the
other 50 each have a 2-character U.S. state abbreviation. Both a literal 'XX'
in input, and other values missing from the file, will be assigned ID 0. All
others are assigned the corresponding line number 1-50.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> vocabulary_file
						</dt>
						<dd>The vocabulary file name. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> vocabulary_size
						</dt>
						<dd>Number of the elements in the vocabulary. This must be no
greater than length of `vocabulary_file`, if less than length, later
values are ignored. If None, it is set to the length of `vocabulary_file`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of
the input value. A positive `num_oov_buckets` can not be specified with
`default_value`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyFileCategoricalColumn.htm">VocabularyFileCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with a vocabulary file. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>states = categorical_column_with_vocabulary_file(
                key='states', vocabulary_file='/us/states.txt', vocabulary_size=50,
                num_oov_buckets=5)
            columns = [states,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_file" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyFileCategoricalColumn.htm">VocabularyFileCategoricalColumn</a> <strong>categorical_column_with_vocabulary_file</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> vocabulary_file, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> vocabulary_size, <span title="System.int">int</span> num_oov_buckets, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A `CategoricalColumn` with a vocabulary file. <p></p> Use this when your inputs are in string or integer format, and you have a
vocabulary file that maps each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
File '/us/states.txt' contains 50 lines, each with a 2-character U.S. state
abbreviation. All inputs with values in that file are assigned an ID 0-49,
corresponding to its line number. All other values are hashed and assigned an
ID 50-54.
Example with `default_value`:
File '/us/states.txt' contains 51 lines - the first line is 'XX', and the
other 50 each have a 2-character U.S. state abbreviation. Both a literal 'XX'
in input, and other values missing from the file, will be assigned ID 0. All
others are assigned the corresponding line number 1-50.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> vocabulary_file
						</dt>
						<dd>The vocabulary file name. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> vocabulary_size
						</dt>
						<dd>Number of the elements in the vocabulary. This must be no
greater than length of `vocabulary_file`, if less than length, later
values are ignored. If None, it is set to the length of `vocabulary_file`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of
the input value. A positive `num_oov_buckets` can not be specified with
`default_value`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyFileCategoricalColumn.htm">VocabularyFileCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with a vocabulary file. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>states = categorical_column_with_vocabulary_file(
                key='states', vocabulary_file='/us/states.txt', vocabulary_size=50,
                num_oov_buckets=5)
            columns = [states,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_file" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyFileCategoricalColumn.htm">VocabularyFileCategoricalColumn</a> <strong>categorical_column_with_vocabulary_file</strong>(<span title="System.string">string</span> key, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> vocabulary_file, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> vocabulary_size, <span title="System.int">int</span> num_oov_buckets, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A `CategoricalColumn` with a vocabulary file. <p></p> Use this when your inputs are in string or integer format, and you have a
vocabulary file that maps each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
File '/us/states.txt' contains 50 lines, each with a 2-character U.S. state
abbreviation. All inputs with values in that file are assigned an ID 0-49,
corresponding to its line number. All other values are hashed and assigned an
ID 50-54.
Example with `default_value`:
File '/us/states.txt' contains 51 lines - the first line is 'XX', and the
other 50 each have a 2-character U.S. state abbreviation. Both a literal 'XX'
in input, and other values missing from the file, will be assigned ID 0. All
others are assigned the corresponding line number 1-50.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> vocabulary_file
						</dt>
						<dd>The vocabulary file name. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> vocabulary_size
						</dt>
						<dd>Number of the elements in the vocabulary. This must be no
greater than length of `vocabulary_file`, if less than length, later
values are ignored. If None, it is set to the length of `vocabulary_file`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of
the input value. A positive `num_oov_buckets` can not be specified with
`default_value`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyFileCategoricalColumn.htm">VocabularyFileCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with a vocabulary file. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>states = categorical_column_with_vocabulary_file(
                key='states', vocabulary_file='/us/states.txt', vocabulary_size=50,
                num_oov_buckets=5)
            columns = [states,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_file" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyFileCategoricalColumn.htm">VocabularyFileCategoricalColumn</a> <strong>categorical_column_with_vocabulary_file</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.string">string</span> vocabulary_file, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> vocabulary_size, <span title="System.int">int</span> num_oov_buckets, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A `CategoricalColumn` with a vocabulary file. <p></p> Use this when your inputs are in string or integer format, and you have a
vocabulary file that maps each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
File '/us/states.txt' contains 50 lines, each with a 2-character U.S. state
abbreviation. All inputs with values in that file are assigned an ID 0-49,
corresponding to its line number. All other values are hashed and assigned an
ID 50-54.
Example with `default_value`:
File '/us/states.txt' contains 51 lines - the first line is 'XX', and the
other 50 each have a 2-character U.S. state abbreviation. Both a literal 'XX'
in input, and other values missing from the file, will be assigned ID 0. All
others are assigned the corresponding line number 1-50.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> vocabulary_file
						</dt>
						<dd>The vocabulary file name. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> vocabulary_size
						</dt>
						<dd>Number of the elements in the vocabulary. This must be no
greater than length of `vocabulary_file`, if less than length, later
values are ignored. If None, it is set to the length of `vocabulary_file`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of
the input value. A positive `num_oov_buckets` can not be specified with
`default_value`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyFileCategoricalColumn.htm">VocabularyFileCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with a vocabulary file. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>states = categorical_column_with_vocabulary_file(
                key='states', vocabulary_file='/us/states.txt', vocabulary_size=50,
                num_oov_buckets=5)
            columns = [states,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_file" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyFileCategoricalColumn.htm">VocabularyFileCategoricalColumn</a> <strong>categorical_column_with_vocabulary_file</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.int">int</span> vocabulary_file, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> vocabulary_size, <span title="System.int">int</span> num_oov_buckets, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">A `CategoricalColumn` with a vocabulary file. <p></p> Use this when your inputs are in string or integer format, and you have a
vocabulary file that maps each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
File '/us/states.txt' contains 50 lines, each with a 2-character U.S. state
abbreviation. All inputs with values in that file are assigned an ID 0-49,
corresponding to its line number. All other values are hashed and assigned an
ID 50-54.
Example with `default_value`:
File '/us/states.txt' contains 51 lines - the first line is 'XX', and the
other 50 each have a 2-character U.S. state abbreviation. Both a literal 'XX'
in input, and other values missing from the file, will be assigned ID 0. All
others are assigned the corresponding line number 1-50.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> vocabulary_file
						</dt>
						<dd>The vocabulary file name. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> vocabulary_size
						</dt>
						<dd>Number of the elements in the vocabulary. This must be no
greater than length of `vocabulary_file`, if less than length, later
values are ignored. If None, it is set to the length of `vocabulary_file`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[vocabulary_size, vocabulary_size+num_oov_buckets)` based on a hash of
the input value. A positive `num_oov_buckets` can not be specified with
`default_value`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyFileCategoricalColumn.htm">VocabularyFileCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with a vocabulary file. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>states = categorical_column_with_vocabulary_file(
                key='states', vocabulary_file='/us/states.txt', vocabulary_size=50,
                num_oov_buckets=5)
            columns = [states,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_list" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a> <strong>categorical_column_with_vocabulary_list</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> vocabulary_list, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.int">int</span> default_value, <span title="System.int">int</span> num_oov_buckets)
		</h4>
		<div class="content">A `CategoricalColumn` with in-memory vocabulary. <p></p> Use this when your inputs are in string or integer format, and you have an
in-memory vocabulary mapping each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-3 corresponding to its index (e.g., input 'B' produces output 2). All other
inputs are hashed and assigned an ID 4-5.
Example with `default_value`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-4 corresponding to its index (e.g., input 'B' produces output 3). All other
inputs are assigned `default_value` 0.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the column
name and the dictionary key for feature parsing configs, feature `Tensor`
objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> vocabulary_list
						</dt>
						<dd>An ordered iterable defining the vocabulary. Each feature
is mapped to the index of its value (if present) in `vocabulary_list`.
Must be castable to `dtype`. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. If
`None`, it will be inferred from `vocabulary_list`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a
hash of the input value. A positive `num_oov_buckets` can not be specified
with `default_value`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with in-memory vocabulary. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>colors = categorical_column_with_vocabulary_list(
                key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),
                num_oov_buckets=2)
            columns = [colors,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_list" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a> <strong>categorical_column_with_vocabulary_list</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <a href="../numpy/ndarray.htm">ndarray</a> vocabulary_list, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.int">int</span> default_value, <span title="System.int">int</span> num_oov_buckets)
		</h4>
		<div class="content">A `CategoricalColumn` with in-memory vocabulary. <p></p> Use this when your inputs are in string or integer format, and you have an
in-memory vocabulary mapping each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-3 corresponding to its index (e.g., input 'B' produces output 2). All other
inputs are hashed and assigned an ID 4-5.
Example with `default_value`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-4 corresponding to its index (e.g., input 'B' produces output 3). All other
inputs are assigned `default_value` 0.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the column
name and the dictionary key for feature parsing configs, feature `Tensor`
objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> vocabulary_list
						</dt>
						<dd>An ordered iterable defining the vocabulary. Each feature
is mapped to the index of its value (if present) in `vocabulary_list`.
Must be castable to `dtype`. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. If
`None`, it will be inferred from `vocabulary_list`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a
hash of the input value. A positive `num_oov_buckets` can not be specified
with `default_value`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with in-memory vocabulary. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>colors = categorical_column_with_vocabulary_list(
                key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),
                num_oov_buckets=2)
            columns = [colors,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_list" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a> <strong>categorical_column_with_vocabulary_list</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.int">int</span> vocabulary_list, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.int">int</span> default_value, <span title="System.int">int</span> num_oov_buckets)
		</h4>
		<div class="content">A `CategoricalColumn` with in-memory vocabulary. <p></p> Use this when your inputs are in string or integer format, and you have an
in-memory vocabulary mapping each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-3 corresponding to its index (e.g., input 'B' produces output 2). All other
inputs are hashed and assigned an ID 4-5.
Example with `default_value`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-4 corresponding to its index (e.g., input 'B' produces output 3). All other
inputs are assigned `default_value` 0.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the column
name and the dictionary key for feature parsing configs, feature `Tensor`
objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> vocabulary_list
						</dt>
						<dd>An ordered iterable defining the vocabulary. Each feature
is mapped to the index of its value (if present) in `vocabulary_list`.
Must be castable to `dtype`. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. If
`None`, it will be inferred from `vocabulary_list`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a
hash of the input value. A positive `num_oov_buckets` can not be specified
with `default_value`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with in-memory vocabulary. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>colors = categorical_column_with_vocabulary_list(
                key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),
                num_oov_buckets=2)
            columns = [colors,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_list" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a> <strong>categorical_column_with_vocabulary_list</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.string">string</span> vocabulary_list, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.int">int</span> default_value, <span title="System.int">int</span> num_oov_buckets)
		</h4>
		<div class="content">A `CategoricalColumn` with in-memory vocabulary. <p></p> Use this when your inputs are in string or integer format, and you have an
in-memory vocabulary mapping each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-3 corresponding to its index (e.g., input 'B' produces output 2). All other
inputs are hashed and assigned an ID 4-5.
Example with `default_value`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-4 corresponding to its index (e.g., input 'B' produces output 3). All other
inputs are assigned `default_value` 0.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the column
name and the dictionary key for feature parsing configs, feature `Tensor`
objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> vocabulary_list
						</dt>
						<dd>An ordered iterable defining the vocabulary. Each feature
is mapped to the index of its value (if present) in `vocabulary_list`.
Must be castable to `dtype`. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. If
`None`, it will be inferred from `vocabulary_list`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a
hash of the input value. A positive `num_oov_buckets` can not be specified
with `default_value`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with in-memory vocabulary. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>colors = categorical_column_with_vocabulary_list(
                key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),
                num_oov_buckets=2)
            columns = [colors,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_list" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a> <strong>categorical_column_with_vocabulary_list</strong>(<span title="System.string">string</span> key, <a href="../numpy/ndarray.htm">ndarray</a> vocabulary_list, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.int">int</span> default_value, <span title="System.int">int</span> num_oov_buckets)
		</h4>
		<div class="content">A `CategoricalColumn` with in-memory vocabulary. <p></p> Use this when your inputs are in string or integer format, and you have an
in-memory vocabulary mapping each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-3 corresponding to its index (e.g., input 'B' produces output 2). All other
inputs are hashed and assigned an ID 4-5.
Example with `default_value`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-4 corresponding to its index (e.g., input 'B' produces output 3). All other
inputs are assigned `default_value` 0.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the column
name and the dictionary key for feature parsing configs, feature `Tensor`
objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> vocabulary_list
						</dt>
						<dd>An ordered iterable defining the vocabulary. Each feature
is mapped to the index of its value (if present) in `vocabulary_list`.
Must be castable to `dtype`. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. If
`None`, it will be inferred from `vocabulary_list`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a
hash of the input value. A positive `num_oov_buckets` can not be specified
with `default_value`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with in-memory vocabulary. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>colors = categorical_column_with_vocabulary_list(
                key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),
                num_oov_buckets=2)
            columns = [colors,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_list" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a> <strong>categorical_column_with_vocabulary_list</strong>(<span title="System.string">string</span> key, <span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> vocabulary_list, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.int">int</span> default_value, <span title="System.int">int</span> num_oov_buckets)
		</h4>
		<div class="content">A `CategoricalColumn` with in-memory vocabulary. <p></p> Use this when your inputs are in string or integer format, and you have an
in-memory vocabulary mapping each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-3 corresponding to its index (e.g., input 'B' produces output 2). All other
inputs are hashed and assigned an ID 4-5.
Example with `default_value`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-4 corresponding to its index (e.g., input 'B' produces output 3). All other
inputs are assigned `default_value` 0.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the column
name and the dictionary key for feature parsing configs, feature `Tensor`
objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> vocabulary_list
						</dt>
						<dd>An ordered iterable defining the vocabulary. Each feature
is mapped to the index of its value (if present) in `vocabulary_list`.
Must be castable to `dtype`. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. If
`None`, it will be inferred from `vocabulary_list`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a
hash of the input value. A positive `num_oov_buckets` can not be specified
with `default_value`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with in-memory vocabulary. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>colors = categorical_column_with_vocabulary_list(
                key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),
                num_oov_buckets=2)
            columns = [colors,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_list" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a> <strong>categorical_column_with_vocabulary_list</strong>(<span title="System.string">string</span> key, <span title="System.string">string</span> vocabulary_list, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.int">int</span> default_value, <span title="System.int">int</span> num_oov_buckets)
		</h4>
		<div class="content">A `CategoricalColumn` with in-memory vocabulary. <p></p> Use this when your inputs are in string or integer format, and you have an
in-memory vocabulary mapping each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-3 corresponding to its index (e.g., input 'B' produces output 2). All other
inputs are hashed and assigned an ID 4-5.
Example with `default_value`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-4 corresponding to its index (e.g., input 'B' produces output 3). All other
inputs are assigned `default_value` 0.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the column
name and the dictionary key for feature parsing configs, feature `Tensor`
objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> vocabulary_list
						</dt>
						<dd>An ordered iterable defining the vocabulary. Each feature
is mapped to the index of its value (if present) in `vocabulary_list`.
Must be castable to `dtype`. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. If
`None`, it will be inferred from `vocabulary_list`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a
hash of the input value. A positive `num_oov_buckets` can not be specified
with `default_value`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with in-memory vocabulary. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>colors = categorical_column_with_vocabulary_list(
                key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),
                num_oov_buckets=2)
            columns = [colors,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_list" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a> <strong>categorical_column_with_vocabulary_list</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> vocabulary_list, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.int">int</span> default_value, <span title="System.int">int</span> num_oov_buckets)
		</h4>
		<div class="content">A `CategoricalColumn` with in-memory vocabulary. <p></p> Use this when your inputs are in string or integer format, and you have an
in-memory vocabulary mapping each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-3 corresponding to its index (e.g., input 'B' produces output 2). All other
inputs are hashed and assigned an ID 4-5.
Example with `default_value`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-4 corresponding to its index (e.g., input 'B' produces output 3). All other
inputs are assigned `default_value` 0.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the column
name and the dictionary key for feature parsing configs, feature `Tensor`
objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> vocabulary_list
						</dt>
						<dd>An ordered iterable defining the vocabulary. Each feature
is mapped to the index of its value (if present) in `vocabulary_list`.
Must be castable to `dtype`. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. If
`None`, it will be inferred from `vocabulary_list`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a
hash of the input value. A positive `num_oov_buckets` can not be specified
with `default_value`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/VocabularyListCategoricalColumn.htm">VocabularyListCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` with in-memory vocabulary. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>colors = categorical_column_with_vocabulary_list(
                key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),
                num_oov_buckets=2)
            columns = [colors,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="categorical_column_with_vocabulary_list_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>categorical_column_with_vocabulary_list_dyn</strong>(<span title="System.object">object</span> key, <span title="System.object">object</span> vocabulary_list, <span title="System.object">object</span> dtype, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> num_oov_buckets)
		</h4>
		<div class="content">A `CategoricalColumn` with in-memory vocabulary. <p></p> Use this when your inputs are in string or integer format, and you have an
in-memory vocabulary mapping each value to an integer ID. By default,
out-of-vocabulary values are ignored. Use either (but not both) of
`num_oov_buckets` and `default_value` to specify how to include
out-of-vocabulary values. <p></p> For input dictionary `features`, `features[key]` is either `Tensor` or
`SparseTensor`. If `Tensor`, missing values can be represented by `-1` for int
and `''` for string, which will be dropped by this feature column. <p></p> Example with `num_oov_buckets`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-3 corresponding to its index (e.g., input 'B' produces output 2). All other
inputs are hashed and assigned an ID 4-5.
Example with `default_value`:
In the following example, each input in `vocabulary_list` is assigned an ID
0-4 corresponding to its index (e.g., input 'B' produces output 3). All other
inputs are assigned `default_value` 0.
And to make an embedding with either: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the column
name and the dictionary key for feature parsing configs, feature `Tensor`
objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> vocabulary_list
						</dt>
						<dd>An ordered iterable defining the vocabulary. Each feature
is mapped to the index of its value (if present) in `vocabulary_list`.
Must be castable to `dtype`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> dtype
						</dt>
						<dd>The type of features. Only string and integer types are supported. If
`None`, it will be inferred from `vocabulary_list`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> default_value
						</dt>
						<dd>The integer ID value to return for out-of-vocabulary feature
values, defaults to `-1`. This can not be specified with a positive
`num_oov_buckets`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> num_oov_buckets
						</dt>
						<dd>Non-negative integer, the number of out-of-vocabulary
buckets. All out-of-vocabulary inputs will be assigned IDs in the range
`[len(vocabulary_list), len(vocabulary_list)+num_oov_buckets)` based on a
hash of the input value. A positive `num_oov_buckets` can not be specified
with `default_value`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `CategoricalColumn` with in-memory vocabulary. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>colors = categorical_column_with_vocabulary_list(
                key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),
                num_oov_buckets=2)
            columns = [colors,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="crossed_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/CrossedColumn.htm">CrossedColumn</a> <strong>crossed_column</strong>(<span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> keys, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> hash_bucket_size, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> hash_key)
		</h4>
		<div class="content">Returns a column for performing crosses of categorical features. <p></p> Crossed features will be hashed according to `hash_bucket_size`. Conceptually,
the transformation can be thought of as:
Hash(cartesian product of features) % `hash_bucket_size` <p></p> For example, if the input features are: <p></p> * SparseTensor referred by first key:
* SparseTensor referred by second key:
then crossed feature will look like:
Here is an example to create a linear model with crosses of string features:
You could also use vocabulary lookup before crossing:
If an input feature is of numeric type, you can use
`categorical_column_with_identity`, or `bucketized_column`, as in the example:
To use crossed column in DNN model, you need to add it in an embedding column
as in this example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> keys
						</dt>
						<dd>An iterable identifying the features to be crossed. Each element can
be either:
* string: Will use the corresponding feature which must be of string type.
* `CategoricalColumn`: Will use the transformed tensor produced by this
column. Does not support hashed categorical column. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> hash_bucket_size
						</dt>
						<dd>An int > 1. The number of buckets. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> hash_key
						</dt>
						<dd>Specify the hash_key that will be used by the `FingerprintCat64`
function to combine the crosses fingerprints on SparseCrossOp (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/CrossedColumn.htm">CrossedColumn</a></code>
					</dt>
					<dd>A `CrossedColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>shape = [2, 2]
            {
                [0, 0]: "a"
                [1, 0]: "b"
                [1, 1]: "c"
            } <p></p> </pre>
</div>
		</div>
	</div>
	<div id="crossed_column_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>crossed_column_dyn</strong>(<span title="System.object">object</span> keys, <span title="System.object">object</span> hash_bucket_size, <span title="System.object">object</span> hash_key)
		</h4>
		<div class="content">Returns a column for performing crosses of categorical features. <p></p> Crossed features will be hashed according to `hash_bucket_size`. Conceptually,
the transformation can be thought of as:
Hash(cartesian product of features) % `hash_bucket_size` <p></p> For example, if the input features are: <p></p> * SparseTensor referred by first key:
* SparseTensor referred by second key:
then crossed feature will look like:
Here is an example to create a linear model with crosses of string features:
You could also use vocabulary lookup before crossing:
If an input feature is of numeric type, you can use
`categorical_column_with_identity`, or `bucketized_column`, as in the example:
To use crossed column in DNN model, you need to add it in an embedding column
as in this example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> keys
						</dt>
						<dd>An iterable identifying the features to be crossed. Each element can
be either:
* string: Will use the corresponding feature which must be of string type.
* `CategoricalColumn`: Will use the transformed tensor produced by this
column. Does not support hashed categorical column. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> hash_bucket_size
						</dt>
						<dd>An int > 1. The number of buckets. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> hash_key
						</dt>
						<dd>Specify the hash_key that will be used by the `FingerprintCat64`
function to combine the crosses fingerprints on SparseCrossOp (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `CrossedColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>shape = [2, 2]
            {
                [0, 0]: "a"
                [1, 0]: "b"
                [1, 1]: "c"
            } <p></p> </pre>
</div>
		</div>
	</div>
	<div id="embedding_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/EmbeddingColumn.htm">EmbeddingColumn</a> <strong>embedding_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_CategoricalColumn.htm">_CategoricalColumn</a> categorical_column, <span title="System.int">int</span> dimension, <span title="System.string">string</span> combiner, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> initializer, <span title="System.string">string</span> ckpt_to_load_from, <span title="System.string">string</span> tensor_name_in_ckpt, <span title="System.Nullable<double>">Nullable&lt;double&gt;</span> max_norm, <span title="System.bool">bool</span> trainable)
		</h4>
		<div class="content">`DenseColumn` that converts from sparse, categorical input. <p></p> Use this when your inputs are sparse, but you want to convert them to a dense
representation (e.g., to feed to a DNN). <p></p> Inputs must be a `CategoricalColumn` created by any of the
`categorical_column_*` function. Here is an example of using
`embedding_column` with `DNNClassifier`:
Here is an example using `embedding_column` with model_fn: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_CategoricalColumn.htm">_CategoricalColumn</a></code> categorical_column
						</dt>
						<dd>A `CategoricalColumn` created by a
`categorical_column_with_*` function. This column produces the sparse IDs
that are inputs to the embedding lookup. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> dimension
						</dt>
						<dd>An integer specifying dimension of the embedding, must be > 0. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> combiner
						</dt>
						<dd>A string specifying how to reduce if there are multiple entries in
a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with
'mean' the default. 'sqrtn' often achieves good accuracy, in particular
with bag-of-words columns. Each of this can be thought as example level
normalizations on the column. For more information, see
`tf.embedding_lookup_sparse`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> initializer
						</dt>
						<dd>A variable initializer function to be used in embedding
variable initialization. If not specified, defaults to
`truncated_normal_initializer` with mean `0.0` and
standard deviation `1/sqrt(dimension)`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> ckpt_to_load_from
						</dt>
						<dd>String representing checkpoint name/pattern from which to
restore column weights. Required if `tensor_name_in_ckpt` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> tensor_name_in_ckpt
						</dt>
						<dd>Name of the `Tensor` in `ckpt_to_load_from` from which
to restore the column weights. Required if `ckpt_to_load_from` is not
`None`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<double>">Nullable&lt;double&gt;</span></code> max_norm
						</dt>
						<dd>If not `None`, embedding values are l2-normalized to this value. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>Whether or not the embedding is trainable. Default is True. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/EmbeddingColumn.htm">EmbeddingColumn</a></code>
					</dt>
					<dd>`DenseColumn` that converts from sparse input. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>video_id = categorical_column_with_identity(
                key='video_id', num_buckets=1000000, default_value=0)
            columns = [embedding_column(video_id, 9),...] <p></p> estimator = tf.estimator.DNNClassifier(feature_columns=columns,...) <p></p> label_column =...
def input_fn():
  features = tf.io.parse_example(
     ..., features=make_parse_example_spec(columns + [label_column]))
  labels = features.pop(label_column.name)
  return features, labels <p></p> estimator.train(input_fn=input_fn, steps=100) </pre>
</div>
		</div>
	</div>
	<div id="embedding_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/EmbeddingColumn.htm">EmbeddingColumn</a> <strong>embedding_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_CategoricalColumn.htm">_CategoricalColumn</a> categorical_column, <span title="System.int">int</span> dimension, <span title="System.string">string</span> combiner, <span title="System.string">string</span> initializer, <span title="System.string">string</span> ckpt_to_load_from, <span title="System.string">string</span> tensor_name_in_ckpt, <span title="System.Nullable<double>">Nullable&lt;double&gt;</span> max_norm, <span title="System.bool">bool</span> trainable)
		</h4>
		<div class="content">`DenseColumn` that converts from sparse, categorical input. <p></p> Use this when your inputs are sparse, but you want to convert them to a dense
representation (e.g., to feed to a DNN). <p></p> Inputs must be a `CategoricalColumn` created by any of the
`categorical_column_*` function. Here is an example of using
`embedding_column` with `DNNClassifier`:
Here is an example using `embedding_column` with model_fn: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_CategoricalColumn.htm">_CategoricalColumn</a></code> categorical_column
						</dt>
						<dd>A `CategoricalColumn` created by a
`categorical_column_with_*` function. This column produces the sparse IDs
that are inputs to the embedding lookup. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> dimension
						</dt>
						<dd>An integer specifying dimension of the embedding, must be > 0. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> combiner
						</dt>
						<dd>A string specifying how to reduce if there are multiple entries in
a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with
'mean' the default. 'sqrtn' often achieves good accuracy, in particular
with bag-of-words columns. Each of this can be thought as example level
normalizations on the column. For more information, see
`tf.embedding_lookup_sparse`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> initializer
						</dt>
						<dd>A variable initializer function to be used in embedding
variable initialization. If not specified, defaults to
`truncated_normal_initializer` with mean `0.0` and
standard deviation `1/sqrt(dimension)`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> ckpt_to_load_from
						</dt>
						<dd>String representing checkpoint name/pattern from which to
restore column weights. Required if `tensor_name_in_ckpt` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> tensor_name_in_ckpt
						</dt>
						<dd>Name of the `Tensor` in `ckpt_to_load_from` from which
to restore the column weights. Required if `ckpt_to_load_from` is not
`None`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<double>">Nullable&lt;double&gt;</span></code> max_norm
						</dt>
						<dd>If not `None`, embedding values are l2-normalized to this value. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>Whether or not the embedding is trainable. Default is True. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/EmbeddingColumn.htm">EmbeddingColumn</a></code>
					</dt>
					<dd>`DenseColumn` that converts from sparse input. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>video_id = categorical_column_with_identity(
                key='video_id', num_buckets=1000000, default_value=0)
            columns = [embedding_column(video_id, 9),...] <p></p> estimator = tf.estimator.DNNClassifier(feature_columns=columns,...) <p></p> label_column =...
def input_fn():
  features = tf.io.parse_example(
     ..., features=make_parse_example_spec(columns + [label_column]))
  labels = features.pop(label_column.name)
  return features, labels <p></p> estimator.train(input_fn=input_fn, steps=100) </pre>
</div>
		</div>
	</div>
	<div id="indicator_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/IndicatorColumn.htm">IndicatorColumn</a> <strong>indicator_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_CategoricalColumn.htm">_CategoricalColumn</a> categorical_column)
		</h4>
		<div class="content">Represents multi-hot representation of given categorical column. <p></p> - For DNN model, `indicator_column` can be used to wrap any
`categorical_column_*` (e.g., to feed to DNN). Consider to Use
`embedding_column` if the number of buckets/unique(values) are large. <p></p> - For Wide (aka linear) model, `indicator_column` is the internal
representation for categorical column when passing categorical column
directly (as any element in feature_columns) to `linear_model`. See
`linear_model` for details. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_CategoricalColumn.htm">_CategoricalColumn</a></code> categorical_column
						</dt>
						<dd>A `CategoricalColumn` which is created by
`categorical_column_with_*` or `crossed_column` functions. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/IndicatorColumn.htm">IndicatorColumn</a></code>
					</dt>
					<dd>An `IndicatorColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>name = indicator_column(categorical_column_with_vocabulary_list(
                'name', ['bob', 'george', 'wanda'])
            columns = [name,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> dense_tensor == [[1, 0, 0]]  # If "name" bytes_list is ["bob"]
dense_tensor == [[1, 0, 1]]  # If "name" bytes_list is ["bob", "wanda"]
dense_tensor == [[2, 0, 0]]  # If "name" bytes_list is ["bob", "bob"] </pre>
</div>
		</div>
	</div>
	<div id="indicator_column_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>indicator_column_dyn</strong>(<span title="System.object">object</span> categorical_column)
		</h4>
		<div class="content">Represents multi-hot representation of given categorical column. <p></p> - For DNN model, `indicator_column` can be used to wrap any
`categorical_column_*` (e.g., to feed to DNN). Consider to Use
`embedding_column` if the number of buckets/unique(values) are large. <p></p> - For Wide (aka linear) model, `indicator_column` is the internal
representation for categorical column when passing categorical column
directly (as any element in feature_columns) to `linear_model`. See
`linear_model` for details. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> categorical_column
						</dt>
						<dd>A `CategoricalColumn` which is created by
`categorical_column_with_*` or `crossed_column` functions. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>An `IndicatorColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>name = indicator_column(categorical_column_with_vocabulary_list(
                'name', ['bob', 'george', 'wanda'])
            columns = [name,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> dense_tensor == [[1, 0, 0]]  # If "name" bytes_list is ["bob"]
dense_tensor == [[1, 0, 1]]  # If "name" bytes_list is ["bob", "wanda"]
dense_tensor == [[2, 0, 0]]  # If "name" bytes_list is ["bob", "bob"] </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> features, <span title="System.ValueTuple<_EmbeddingColumn>">ValueTuple&lt;_EmbeddingColumn&gt;</span> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple<_EmbeddingColumn>">ValueTuple&lt;_EmbeddingColumn&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> features, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> features, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> features, <a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> features, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> features, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> features, <span title="System.Collections.Generic.IEnumerator<_NumericColumn>">IEnumerator&lt;_NumericColumn&gt;</span> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerator<_NumericColumn>">IEnumerator&lt;_NumericColumn&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> features, <span title="System.Collections.Generic.IEnumerator<_NumericColumn>">IEnumerator&lt;_NumericColumn&gt;</span> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerator<_NumericColumn>">IEnumerator&lt;_NumericColumn&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> features, <a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> features, <span title="System.ValueTuple<_EmbeddingColumn>">ValueTuple&lt;_EmbeddingColumn&gt;</span> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple<_EmbeddingColumn>">ValueTuple&lt;_EmbeddingColumn&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> features, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> features, <span title="System.Collections.Generic.IEnumerator<_NumericColumn>">IEnumerator&lt;_NumericColumn&gt;</span> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerator<_NumericColumn>">IEnumerator&lt;_NumericColumn&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> features, <span title="System.ValueTuple<_EmbeddingColumn>">ValueTuple&lt;_EmbeddingColumn&gt;</span> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple<_EmbeddingColumn>">ValueTuple&lt;_EmbeddingColumn&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> features, <a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>input_layer</strong>(<a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> features, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> feature_columns, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_vars, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="input_layer_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>input_layer_dyn</strong>(<span title="System.object">object</span> features, <span title="System.object">object</span> feature_columns, <span title="System.object">object</span> weight_collections, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> trainable, <span title="System.object">object</span> cols_to_vars, <span title="System.object">object</span> cols_to_output_tensors)
		</h4>
		<div class="content">Returns a dense `Tensor` as input layer based on given `feature_columns`. <p></p> Generally a single example in training data is described with FeatureColumns.
At the first layer of the model, this column oriented data should be converted
to a single `Tensor`. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values can be a `SparseTensor` or a `Tensor` depends on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_DenseColumn` such as `numeric_column`, `embedding_column`,
`bucketized_column`, `indicator_column`. If you have categorical features,
you can wrap them with an `embedding_column` or `indicator_column`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to list of `Variable`s.  For example, after
the call, we might have cols_to_vars =
{_EmbeddingColumn(
categorical_column=_HashedCategoricalColumn(
key='sparse_feature', hash_bucket_size=5, dtype=tf.string),
dimension=10): [<tf.Variable 'some_variable:0' shape=(5, 10),
<tf.Variable 'some_variable:1' shape=(5, 10)]}
If a column creates no variables, its value will be an empty list. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> cols_to_output_tensors
						</dt>
						<dd>If not `None`, must be a dictionary that will be
filled with a mapping from '_FeatureColumn' to the associated
output `Tensor`s. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `Tensor` which represents input layer of a model. Its shape
is (batch_size, first_layer_dimension) and its dtype is `float32`.
first_layer_dimension is determined based on given `feature_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            keywords_embedded = embedding_column(
                categorical_column_with_hash_bucket("keywords", 10K), dimensions=16)
            columns = [price, keywords_embedded,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns)
            for units in [128, 64, 32]:
              dense_tensor = tf.compat.v1.layers.dense(dense_tensor, units, tf.nn.relu)
            prediction = tf.compat.v1.layers.dense(dense_tensor, 1) </pre>
</div>
		</div>
	</div>
	<div id="linear_model" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>linear_model</strong>(<span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> features, <span title="System.string">string</span> feature_columns, <span title="System.int">int</span> units, <span title="System.string">string</span> sparse_combiner, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, IEnumerable<object>>">IDictionary&lt;object, IEnumerable&lt;object&gt;&gt;</span> cols_to_vars)
		</h4>
		<div class="content">Returns a linear prediction `Tensor` based on given `feature_columns`. <p></p> This function generates a weighted sum based on output dimension `units`.
Weighted sum refers to logits in classification problems. It refers to the
prediction itself for linear regression problems. <p></p> Note on supported columns: `linear_model` treats categorical columns as
`indicator_column`s. To be specific, assume the input as `SparseTensor` looks
like:
`linear_model` assigns weights for the presence of "a", "b", "c' implicitly,
just like `indicator_column`, while `input_layer` explicitly requires wrapping
each of categorical columns with an `embedding_column` or an
`indicator_column`. <p></p> Example of usage:
The `sparse_combiner` argument works as follows
For example, for two features represented as the categorical columns:
with `sparse_combiner` as "mean", the linear model outputs consequently
are: <p></p> ```
y_0 = 1.0 / 2.0 * ( w_a + w_b ) + w_d + b
y_1 = w_c + 1.0 / 3.0 * ( w_e + 2.0 * w_f ) + b
``` <p></p> where `y_i` is the output, `b` is the bias, and `w_x` is the weight
assigned to the presence of `x` in the input features. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values are `Tensor` or `SparseTensor` depending on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_FeatureColumn`s. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> units
						</dt>
						<dd>An integer, dimensionality of the output space. Default value is 1. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> sparse_combiner
						</dt>
						<dd>A string specifying how to reduce if a categorical column
is multivalent. Except `numeric_column`, almost all columns passed to
`linear_model` are considered as categorical columns.  It combines each
categorical column independently. Currently "mean", "sqrtn" and "sum" are
supported, with "sum" the default for linear model. "sqrtn" often achieves
good accuracy, in particular with bag-of-words columns.
* "sum": do not normalize features in the column
* "mean": do l1 normalization on features in the column
* "sqrtn": do l2 normalization on features in the column 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that, variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, IEnumerable<object>>">IDictionary&lt;object, IEnumerable&lt;object&gt;&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to associated list of `Variable`s.  For
example, after the call, we might have cols_to_vars = {
_NumericColumn(
key='numeric_feature1', shape=(1,):
[<tf.Variable 'linear_model/price2/weights:0' shape=(1, 1)>],
'bias': [<tf.Variable 'linear_model/bias_weights:0' shape=(1,)>],
_NumericColumn(
key='numeric_feature2', shape=(2,)):
[<tf.Variable 'linear_model/price1/weights:0' shape=(2, 1)>]}
If a column creates no variables, its value will be an empty list. Note
that cols_to_vars will also contain a string key 'bias' that maps to a
list of Variables. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents predictions/logits of a linear model. Its shape
is (batch_size, units) and its dtype is `float32`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>shape = [2, 2]
            {
                [0, 0]: "a"
                [1, 0]: "b"
                [1, 1]: "c"
            } </pre>
</div>
		</div>
	</div>
	<div id="linear_model" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>linear_model</strong>(<span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> features, <span title="System.ValueTuple<_CrossedColumn>">ValueTuple&lt;_CrossedColumn&gt;</span> feature_columns, <span title="System.int">int</span> units, <span title="System.string">string</span> sparse_combiner, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, IEnumerable<object>>">IDictionary&lt;object, IEnumerable&lt;object&gt;&gt;</span> cols_to_vars)
		</h4>
		<div class="content">Returns a linear prediction `Tensor` based on given `feature_columns`. <p></p> This function generates a weighted sum based on output dimension `units`.
Weighted sum refers to logits in classification problems. It refers to the
prediction itself for linear regression problems. <p></p> Note on supported columns: `linear_model` treats categorical columns as
`indicator_column`s. To be specific, assume the input as `SparseTensor` looks
like:
`linear_model` assigns weights for the presence of "a", "b", "c' implicitly,
just like `indicator_column`, while `input_layer` explicitly requires wrapping
each of categorical columns with an `embedding_column` or an
`indicator_column`. <p></p> Example of usage:
The `sparse_combiner` argument works as follows
For example, for two features represented as the categorical columns:
with `sparse_combiner` as "mean", the linear model outputs consequently
are: <p></p> ```
y_0 = 1.0 / 2.0 * ( w_a + w_b ) + w_d + b
y_1 = w_c + 1.0 / 3.0 * ( w_e + 2.0 * w_f ) + b
``` <p></p> where `y_i` is the output, `b` is the bias, and `w_x` is the weight
assigned to the presence of `x` in the input features. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values are `Tensor` or `SparseTensor` depending on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple<_CrossedColumn>">ValueTuple&lt;_CrossedColumn&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_FeatureColumn`s. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> units
						</dt>
						<dd>An integer, dimensionality of the output space. Default value is 1. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> sparse_combiner
						</dt>
						<dd>A string specifying how to reduce if a categorical column
is multivalent. Except `numeric_column`, almost all columns passed to
`linear_model` are considered as categorical columns.  It combines each
categorical column independently. Currently "mean", "sqrtn" and "sum" are
supported, with "sum" the default for linear model. "sqrtn" often achieves
good accuracy, in particular with bag-of-words columns.
* "sum": do not normalize features in the column
* "mean": do l1 normalization on features in the column
* "sqrtn": do l2 normalization on features in the column 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that, variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, IEnumerable<object>>">IDictionary&lt;object, IEnumerable&lt;object&gt;&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to associated list of `Variable`s.  For
example, after the call, we might have cols_to_vars = {
_NumericColumn(
key='numeric_feature1', shape=(1,):
[<tf.Variable 'linear_model/price2/weights:0' shape=(1, 1)>],
'bias': [<tf.Variable 'linear_model/bias_weights:0' shape=(1,)>],
_NumericColumn(
key='numeric_feature2', shape=(2,)):
[<tf.Variable 'linear_model/price1/weights:0' shape=(2, 1)>]}
If a column creates no variables, its value will be an empty list. Note
that cols_to_vars will also contain a string key 'bias' that maps to a
list of Variables. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents predictions/logits of a linear model. Its shape
is (batch_size, units) and its dtype is `float32`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>shape = [2, 2]
            {
                [0, 0]: "a"
                [1, 0]: "b"
                [1, 1]: "c"
            } </pre>
</div>
		</div>
	</div>
	<div id="linear_model" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>linear_model</strong>(<span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> features, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> feature_columns, <span title="System.int">int</span> units, <span title="System.string">string</span> sparse_combiner, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, IEnumerable<object>>">IDictionary&lt;object, IEnumerable&lt;object&gt;&gt;</span> cols_to_vars)
		</h4>
		<div class="content">Returns a linear prediction `Tensor` based on given `feature_columns`. <p></p> This function generates a weighted sum based on output dimension `units`.
Weighted sum refers to logits in classification problems. It refers to the
prediction itself for linear regression problems. <p></p> Note on supported columns: `linear_model` treats categorical columns as
`indicator_column`s. To be specific, assume the input as `SparseTensor` looks
like:
`linear_model` assigns weights for the presence of "a", "b", "c' implicitly,
just like `indicator_column`, while `input_layer` explicitly requires wrapping
each of categorical columns with an `embedding_column` or an
`indicator_column`. <p></p> Example of usage:
The `sparse_combiner` argument works as follows
For example, for two features represented as the categorical columns:
with `sparse_combiner` as "mean", the linear model outputs consequently
are: <p></p> ```
y_0 = 1.0 / 2.0 * ( w_a + w_b ) + w_d + b
y_1 = w_c + 1.0 / 3.0 * ( w_e + 2.0 * w_f ) + b
``` <p></p> where `y_i` is the output, `b` is the bias, and `w_x` is the weight
assigned to the presence of `x` in the input features. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values are `Tensor` or `SparseTensor` depending on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_FeatureColumn`s. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> units
						</dt>
						<dd>An integer, dimensionality of the output space. Default value is 1. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> sparse_combiner
						</dt>
						<dd>A string specifying how to reduce if a categorical column
is multivalent. Except `numeric_column`, almost all columns passed to
`linear_model` are considered as categorical columns.  It combines each
categorical column independently. Currently "mean", "sqrtn" and "sum" are
supported, with "sum" the default for linear model. "sqrtn" often achieves
good accuracy, in particular with bag-of-words columns.
* "sum": do not normalize features in the column
* "mean": do l1 normalization on features in the column
* "sqrtn": do l2 normalization on features in the column 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that, variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, IEnumerable<object>>">IDictionary&lt;object, IEnumerable&lt;object&gt;&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to associated list of `Variable`s.  For
example, after the call, we might have cols_to_vars = {
_NumericColumn(
key='numeric_feature1', shape=(1,):
[<tf.Variable 'linear_model/price2/weights:0' shape=(1, 1)>],
'bias': [<tf.Variable 'linear_model/bias_weights:0' shape=(1,)>],
_NumericColumn(
key='numeric_feature2', shape=(2,)):
[<tf.Variable 'linear_model/price1/weights:0' shape=(2, 1)>]}
If a column creates no variables, its value will be an empty list. Note
that cols_to_vars will also contain a string key 'bias' that maps to a
list of Variables. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents predictions/logits of a linear model. Its shape
is (batch_size, units) and its dtype is `float32`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>shape = [2, 2]
            {
                [0, 0]: "a"
                [1, 0]: "b"
                [1, 1]: "c"
            } </pre>
</div>
		</div>
	</div>
	<div id="linear_model" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>linear_model</strong>(<span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> features, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> feature_columns, <span title="System.int">int</span> units, <span title="System.string">string</span> sparse_combiner, <span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> weight_collections, <span title="System.bool">bool</span> trainable, <span title="System.Collections.Generic.IDictionary<object, IEnumerable<object>>">IDictionary&lt;object, IEnumerable&lt;object&gt;&gt;</span> cols_to_vars)
		</h4>
		<div class="content">Returns a linear prediction `Tensor` based on given `feature_columns`. <p></p> This function generates a weighted sum based on output dimension `units`.
Weighted sum refers to logits in classification problems. It refers to the
prediction itself for linear regression problems. <p></p> Note on supported columns: `linear_model` treats categorical columns as
`indicator_column`s. To be specific, assume the input as `SparseTensor` looks
like:
`linear_model` assigns weights for the presence of "a", "b", "c' implicitly,
just like `indicator_column`, while `input_layer` explicitly requires wrapping
each of categorical columns with an `embedding_column` or an
`indicator_column`. <p></p> Example of usage:
The `sparse_combiner` argument works as follows
For example, for two features represented as the categorical columns:
with `sparse_combiner` as "mean", the linear model outputs consequently
are: <p></p> ```
y_0 = 1.0 / 2.0 * ( w_a + w_b ) + w_d + b
y_1 = w_c + 1.0 / 3.0 * ( w_e + 2.0 * w_f ) + b
``` <p></p> where `y_i` is the output, `b` is the bias, and `w_x` is the weight
assigned to the presence of `x` in the input features. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values are `Tensor` or `SparseTensor` depending on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_FeatureColumn`s. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> units
						</dt>
						<dd>An integer, dimensionality of the output space. Default value is 1. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> sparse_combiner
						</dt>
						<dd>A string specifying how to reduce if a categorical column
is multivalent. Except `numeric_column`, almost all columns passed to
`linear_model` are considered as categorical columns.  It combines each
categorical column independently. Currently "mean", "sqrtn" and "sum" are
supported, with "sum" the default for linear model. "sqrtn" often achieves
good accuracy, in particular with bag-of-words columns.
* "sum": do not normalize features in the column
* "mean": do l1 normalization on features in the column
* "sqrtn": do l2 normalization on features in the column 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that, variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, IEnumerable<object>>">IDictionary&lt;object, IEnumerable&lt;object&gt;&gt;</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to associated list of `Variable`s.  For
example, after the call, we might have cols_to_vars = {
_NumericColumn(
key='numeric_feature1', shape=(1,):
[<tf.Variable 'linear_model/price2/weights:0' shape=(1, 1)>],
'bias': [<tf.Variable 'linear_model/bias_weights:0' shape=(1,)>],
_NumericColumn(
key='numeric_feature2', shape=(2,)):
[<tf.Variable 'linear_model/price1/weights:0' shape=(2, 1)>]}
If a column creates no variables, its value will be an empty list. Note
that cols_to_vars will also contain a string key 'bias' that maps to a
list of Variables. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A `Tensor` which represents predictions/logits of a linear model. Its shape
is (batch_size, units) and its dtype is `float32`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>shape = [2, 2]
            {
                [0, 0]: "a"
                [1, 0]: "b"
                [1, 1]: "c"
            } </pre>
</div>
		</div>
	</div>
	<div id="linear_model_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>linear_model_dyn</strong>(<span title="System.object">object</span> features, <span title="System.object">object</span> feature_columns, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> units, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> sparse_combiner, <span title="System.object">object</span> weight_collections, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> trainable, <span title="System.object">object</span> cols_to_vars)
		</h4>
		<div class="content">Returns a linear prediction `Tensor` based on given `feature_columns`. <p></p> This function generates a weighted sum based on output dimension `units`.
Weighted sum refers to logits in classification problems. It refers to the
prediction itself for linear regression problems. <p></p> Note on supported columns: `linear_model` treats categorical columns as
`indicator_column`s. To be specific, assume the input as `SparseTensor` looks
like:
`linear_model` assigns weights for the presence of "a", "b", "c' implicitly,
just like `indicator_column`, while `input_layer` explicitly requires wrapping
each of categorical columns with an `embedding_column` or an
`indicator_column`. <p></p> Example of usage:
The `sparse_combiner` argument works as follows
For example, for two features represented as the categorical columns:
with `sparse_combiner` as "mean", the linear model outputs consequently
are: <p></p> ```
y_0 = 1.0 / 2.0 * ( w_a + w_b ) + w_d + b
y_1 = w_c + 1.0 / 3.0 * ( w_e + 2.0 * w_f ) + b
``` <p></p> where `y_i` is the output, `b` is the bias, and `w_x` is the weight
assigned to the presence of `x` in the input features. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> features
						</dt>
						<dd>A mapping from key to tensors. `_FeatureColumn`s look up via these
keys. For example `numeric_column('price')` will look at 'price' key in
this dict. Values are `Tensor` or `SparseTensor` depending on
corresponding `_FeatureColumn`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> feature_columns
						</dt>
						<dd>An iterable containing the FeatureColumns to use as inputs
to your model. All items should be instances of classes derived from
`_FeatureColumn`s. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> units
						</dt>
						<dd>An integer, dimensionality of the output space. Default value is 1. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> sparse_combiner
						</dt>
						<dd>A string specifying how to reduce if a categorical column
is multivalent. Except `numeric_column`, almost all columns passed to
`linear_model` are considered as categorical columns.  It combines each
categorical column independently. Currently "mean", "sqrtn" and "sum" are
supported, with "sum" the default for linear model. "sqrtn" often achieves
good accuracy, in particular with bag-of-words columns.
* "sum": do not normalize features in the column
* "mean": do l1 normalization on features in the column
* "sqrtn": do l2 normalization on features in the column 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weight_collections
						</dt>
						<dd>A list of collection names to which the Variable will be
added. Note that, variables will also be added to collections
<a href="..\..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a> and `ops.GraphKeys.MODEL_VARIABLES`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> trainable
						</dt>
						<dd>If `True` also add the variable to the graph collection
`GraphKeys.TRAINABLE_VARIABLES` (see <a href="..\..\tf\Variable.md"><code>tf.Variable</code></a>). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> cols_to_vars
						</dt>
						<dd>If not `None`, must be a dictionary that will be filled with a
mapping from `_FeatureColumn` to associated list of `Variable`s.  For
example, after the call, we might have cols_to_vars = {
_NumericColumn(
key='numeric_feature1', shape=(1,):
[<tf.Variable 'linear_model/price2/weights:0' shape=(1, 1)>],
'bias': [<tf.Variable 'linear_model/bias_weights:0' shape=(1,)>],
_NumericColumn(
key='numeric_feature2', shape=(2,)):
[<tf.Variable 'linear_model/price1/weights:0' shape=(2, 1)>]}
If a column creates no variables, its value will be an empty list. Note
that cols_to_vars will also contain a string key 'bias' that maps to a
list of Variables. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `Tensor` which represents predictions/logits of a linear model. Its shape
is (batch_size, units) and its dtype is `float32`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>shape = [2, 2]
            {
                [0, 0]: "a"
                [1, 0]: "b"
                [1, 1]: "c"
            } </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a> key, <span title="System.int">int</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.int">int</span> shape, <a href="../numpy/ndarray.htm">ndarray</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.int">int</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <a href="../numpy/ndarray.htm">ndarray</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <span title="System.int">int</span> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a> key, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <a href="../numpy/ndarray.htm">ndarray</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.object">object</span> key, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a> key, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.object">object</span> key, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <a href="../numpy/ndarray.htm">ndarray</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.object">object</span> key, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.object">object</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.object">object</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <a href="../numpy/ndarray.htm">ndarray</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.object">object</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.object">object</span> key, <span title="System.int">int</span> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.object">object</span> key, <span title="System.int">int</span> shape, <a href="../numpy/ndarray.htm">ndarray</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.object">object</span> key, <span title="System.int">int</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.string">string</span> key, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.string">string</span> key, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <a href="../numpy/ndarray.htm">ndarray</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.string">string</span> key, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.string">string</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a> key, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <a href="../numpy/ndarray.htm">ndarray</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.string">string</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.string">string</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <a href="../numpy/ndarray.htm">ndarray</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <a href="../numpy/ndarray.htm">ndarray</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> shape, <a href="../numpy/ndarray.htm">ndarray</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a> key, <span title="System.int">int</span> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a> key, <span title="System.int">int</span> shape, <a href="../numpy/ndarray.htm">ndarray</a> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_DenseColumn.htm">_DenseColumn</a></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> key, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a> <strong>numeric_column</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/NumericColumn.htm">NumericColumn</a></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="numeric_column_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>numeric_column_dyn</strong>(<span title="System.object">object</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <span title="System.object">object</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.object">object</span> normalizer_fn)
		</h4>
		<div class="content">Represents real valued or numerical features. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>A unique string identifying the input feature. It is used as the
column name and the dictionary key for feature parsing configs, feature
`Tensor` objects, and feature columns. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>An iterable of integers specifies the shape of the `Tensor`. An
integer can be given which means a single dimension `Tensor` with given
width. The `Tensor` representing the column will have the shape of
[batch_size] + `shape`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` or an iterable of
values compatible with `dtype` which the column takes on during
`tf.Example` parsing if data is missing. A default value of `None` will
cause <a href="..\..\tf\io\parse_example.md"><code>tf.io.parse_example</code></a> to fail if an example does not contain this
column. If a single value is provided, the same value will be applied as
the default value for every item. If an iterable of values is provided,
the shape of the `default_value` should be equal to the given `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>defines the type of values. Default value is <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Must be a
non-quantized, real integer or floating point type. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `NumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>price = numeric_column('price')
            columns = [price,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            dense_tensor = input_layer(features, columns) <p></p> # or
bucketized_price = bucketized_column(price, boundaries=[...])
columns = [bucketized_price,...]
features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
linear_prediction = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="sequence_numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.sequence_feature_column/SequenceNumericColumn.htm">SequenceNumericColumn</a> <strong>sequence_numeric_column</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> normalizer_fn)
		</h4>
		<div class="content">Returns a feature column that represents sequences of numeric data. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input features. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>The shape of the input data per sequence id. E.g. if `shape=(2,)`,
each example must contain `2 * sequence_length` values. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` that is used for
padding the sparse data into a dense `Tensor`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of values. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.sequence_feature_column/SequenceNumericColumn.htm">SequenceNumericColumn</a></code>
					</dt>
					<dd>A `SequenceNumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>temperature = sequence_numeric_column('temperature')
            columns = [temperature] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.sequence_feature_column/SequenceNumericColumn.htm">SequenceNumericColumn</a> <strong>sequence_numeric_column</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> shape, <span title="System.int">int</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Returns a feature column that represents sequences of numeric data. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input features. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>The shape of the input data per sequence id. E.g. if `shape=(2,)`,
each example must contain `2 * sequence_length` values. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` that is used for
padding the sparse data into a dense `Tensor`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of values. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.sequence_feature_column/SequenceNumericColumn.htm">SequenceNumericColumn</a></code>
					</dt>
					<dd>A `SequenceNumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>temperature = sequence_numeric_column('temperature')
            columns = [temperature] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.sequence_feature_column/SequenceNumericColumn.htm">SequenceNumericColumn</a> <strong>sequence_numeric_column</strong>(<span title="System.string">string</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <span title="System.int">int</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Returns a feature column that represents sequences of numeric data. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input features. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>The shape of the input data per sequence id. E.g. if `shape=(2,)`,
each example must contain `2 * sequence_length` values. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` that is used for
padding the sparse data into a dense `Tensor`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of values. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.sequence_feature_column/SequenceNumericColumn.htm">SequenceNumericColumn</a></code>
					</dt>
					<dd>A `SequenceNumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>temperature = sequence_numeric_column('temperature')
            columns = [temperature] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.sequence_feature_column/SequenceNumericColumn.htm">SequenceNumericColumn</a> <strong>sequence_numeric_column</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> shape, <span title="System.int">int</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> normalizer_fn)
		</h4>
		<div class="content">Returns a feature column that represents sequences of numeric data. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input features. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>The shape of the input data per sequence id. E.g. if `shape=(2,)`,
each example must contain `2 * sequence_length` values. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` that is used for
padding the sparse data into a dense `Tensor`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of values. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.sequence_feature_column/SequenceNumericColumn.htm">SequenceNumericColumn</a></code>
					</dt>
					<dd>A `SequenceNumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>temperature = sequence_numeric_column('temperature')
            columns = [temperature] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.sequence_feature_column/SequenceNumericColumn.htm">SequenceNumericColumn</a> <strong>sequence_numeric_column</strong>(<span title="System.string">string</span> key, <span title="System.int">int</span> shape, <span title="System.double">double</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> normalizer_fn)
		</h4>
		<div class="content">Returns a feature column that represents sequences of numeric data. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input features. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>The shape of the input data per sequence id. E.g. if `shape=(2,)`,
each example must contain `2 * sequence_length` values. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` that is used for
padding the sparse data into a dense `Tensor`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of values. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.sequence_feature_column/SequenceNumericColumn.htm">SequenceNumericColumn</a></code>
					</dt>
					<dd>A `SequenceNumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>temperature = sequence_numeric_column('temperature')
            columns = [temperature] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="sequence_numeric_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.sequence_feature_column/SequenceNumericColumn.htm">SequenceNumericColumn</a> <strong>sequence_numeric_column</strong>(<span title="System.string">string</span> key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shape, <span title="System.int">int</span> default_value, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> normalizer_fn)
		</h4>
		<div class="content">Returns a feature column that represents sequences of numeric data. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> key
						</dt>
						<dd>A unique string identifying the input features. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shape
						</dt>
						<dd>The shape of the input data per sequence id. E.g. if `shape=(2,)`,
each example must contain `2 * sequence_length` values. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> default_value
						</dt>
						<dd>A single value compatible with `dtype` that is used for
padding the sparse data into a dense `Tensor`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of values. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> normalizer_fn
						</dt>
						<dd>If not `None`, a function that can be used to normalize the
value of the tensor after `default_value` is applied for parsing.
Normalizer function takes the input `Tensor` as its argument, and returns
the output `Tensor`. (e.g. lambda x: (x - 3.0) / 4.2). Please note that
even though the most common use case of this function is normalization, it
can be used for any kind of Tensorflow transformations. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.sequence_feature_column/SequenceNumericColumn.htm">SequenceNumericColumn</a></code>
					</dt>
					<dd>A `SequenceNumericColumn`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>temperature = sequence_numeric_column('temperature')
            columns = [temperature] <p></p> features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
sequence_feature_layer = SequenceFeatures(columns)
sequence_input, sequence_length = sequence_feature_layer(features)
sequence_length_mask = tf.sequence_mask(sequence_length) <p></p> rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
rnn_layer = tf.keras.layers.RNN(rnn_cell)
outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) </pre>
</div>
		</div>
	</div>
	<div id="shared_embedding_columns" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<_SharedEmbeddingColumn>">IList&lt;_SharedEmbeddingColumn&gt;</span> <strong>shared_embedding_columns</strong>(<span title="System.Collections.Generic.IEnumerable<_IdentityCategoricalColumn>">IEnumerable&lt;_IdentityCategoricalColumn&gt;</span> categorical_columns, <span title="System.int">int</span> dimension, <span title="System.string">string</span> combiner, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> initializer, <span title="System.string">string</span> shared_embedding_collection_name, <span title="System.string">string</span> ckpt_to_load_from, <span title="System.string">string</span> tensor_name_in_ckpt, <span title="System.Nullable<double>">Nullable&lt;double&gt;</span> max_norm, <span title="System.bool">bool</span> trainable)
		</h4>
		<div class="content">List of dense columns that convert from sparse, categorical input. <p></p> This is similar to `embedding_column`, except that it produces a list of
embedding columns that share the same embedding weights. <p></p> Use this when your inputs are sparse and of the same type (e.g. watched and
impression video IDs that share the same vocabulary), and you want to convert
them to a dense representation (e.g., to feed to a DNN). <p></p> Inputs must be a list of categorical columns created by any of the
`categorical_column_*` function. They must all be of the same type and have
the same arguments except `key`. E.g. they can be
categorical_column_with_vocabulary_file with the same vocabulary_file. Some or
all columns could also be weighted_categorical_column. <p></p> Here is an example embedding of two features for a DNNClassifier model:
Here is an example using `shared_embedding_columns` with model_fn: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<_IdentityCategoricalColumn>">IEnumerable&lt;_IdentityCategoricalColumn&gt;</span></code> categorical_columns
						</dt>
						<dd>List of categorical columns created by a
`categorical_column_with_*` function. These columns produce the sparse IDs
that are inputs to the embedding lookup. All columns must be of the same
type and have the same arguments except `key`. E.g. they can be
categorical_column_with_vocabulary_file with the same vocabulary_file.
Some or all columns could also be weighted_categorical_column. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> dimension
						</dt>
						<dd>An integer specifying dimension of the embedding, must be > 0. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> combiner
						</dt>
						<dd>A string specifying how to reduce if there are multiple entries in
a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with
'mean' the default. 'sqrtn' often achieves good accuracy, in particular
with bag-of-words columns. Each of this can be thought as example level
normalizations on the column. For more information, see
`tf.embedding_lookup_sparse`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> initializer
						</dt>
						<dd>A variable initializer function to be used in embedding
variable initialization. If not specified, defaults to
`truncated_normal_initializer` with mean `0.0` and
standard deviation `1/sqrt(dimension)`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shared_embedding_collection_name
						</dt>
						<dd>Optional name of the collection where
shared embedding weights are added. If not given, a reasonable name will
be chosen based on the names of `categorical_columns`. This is also used
in `variable_scope` when creating shared embedding weights. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> ckpt_to_load_from
						</dt>
						<dd>String representing checkpoint name/pattern from which to
restore column weights. Required if `tensor_name_in_ckpt` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> tensor_name_in_ckpt
						</dt>
						<dd>Name of the `Tensor` in `ckpt_to_load_from` from which
to restore the column weights. Required if `ckpt_to_load_from` is not
`None`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<double>">Nullable&lt;double&gt;</span></code> max_norm
						</dt>
						<dd>If not `None`, each embedding is clipped if its l2-norm is larger
than this value, before combining. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>Whether or not the embedding is trainable. Default is True. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<_SharedEmbeddingColumn>">IList&lt;_SharedEmbeddingColumn&gt;</span></code>
					</dt>
					<dd>A list of dense columns that converts from sparse input. The order of
results follows the ordering of `categorical_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>watched_video_id = categorical_column_with_vocabulary_file(
                'watched_video_id', video_vocabulary_file, video_vocabulary_size)
            impression_video_id = categorical_column_with_vocabulary_file(
                'impression_video_id', video_vocabulary_file, video_vocabulary_size)
            columns = shared_embedding_columns(
                [watched_video_id, impression_video_id], dimension=10) <p></p> estimator = tf.estimator.DNNClassifier(feature_columns=columns,...) <p></p> label_column =...
def input_fn():
  features = tf.io.parse_example(
     ..., features=make_parse_example_spec(columns + [label_column]))
  labels = features.pop(label_column.name)
  return features, labels <p></p> estimator.train(input_fn=input_fn, steps=100) </pre>
</div>
		</div>
	</div>
	<div id="shared_embedding_columns" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<_SharedEmbeddingColumn>">IList&lt;_SharedEmbeddingColumn&gt;</span> <strong>shared_embedding_columns</strong>(<span title="System.Collections.Generic.IEnumerable<_IdentityCategoricalColumn>">IEnumerable&lt;_IdentityCategoricalColumn&gt;</span> categorical_columns, <span title="System.int">int</span> dimension, <span title="System.string">string</span> combiner, <span title="System.string">string</span> initializer, <span title="System.string">string</span> shared_embedding_collection_name, <span title="System.string">string</span> ckpt_to_load_from, <span title="System.string">string</span> tensor_name_in_ckpt, <span title="System.Nullable<double>">Nullable&lt;double&gt;</span> max_norm, <span title="System.bool">bool</span> trainable)
		</h4>
		<div class="content">List of dense columns that convert from sparse, categorical input. <p></p> This is similar to `embedding_column`, except that it produces a list of
embedding columns that share the same embedding weights. <p></p> Use this when your inputs are sparse and of the same type (e.g. watched and
impression video IDs that share the same vocabulary), and you want to convert
them to a dense representation (e.g., to feed to a DNN). <p></p> Inputs must be a list of categorical columns created by any of the
`categorical_column_*` function. They must all be of the same type and have
the same arguments except `key`. E.g. they can be
categorical_column_with_vocabulary_file with the same vocabulary_file. Some or
all columns could also be weighted_categorical_column. <p></p> Here is an example embedding of two features for a DNNClassifier model:
Here is an example using `shared_embedding_columns` with model_fn: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<_IdentityCategoricalColumn>">IEnumerable&lt;_IdentityCategoricalColumn&gt;</span></code> categorical_columns
						</dt>
						<dd>List of categorical columns created by a
`categorical_column_with_*` function. These columns produce the sparse IDs
that are inputs to the embedding lookup. All columns must be of the same
type and have the same arguments except `key`. E.g. they can be
categorical_column_with_vocabulary_file with the same vocabulary_file.
Some or all columns could also be weighted_categorical_column. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> dimension
						</dt>
						<dd>An integer specifying dimension of the embedding, must be > 0. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> combiner
						</dt>
						<dd>A string specifying how to reduce if there are multiple entries in
a single row. Currently 'mean', 'sqrtn' and 'sum' are supported, with
'mean' the default. 'sqrtn' often achieves good accuracy, in particular
with bag-of-words columns. Each of this can be thought as example level
normalizations on the column. For more information, see
`tf.embedding_lookup_sparse`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> initializer
						</dt>
						<dd>A variable initializer function to be used in embedding
variable initialization. If not specified, defaults to
`truncated_normal_initializer` with mean `0.0` and
standard deviation `1/sqrt(dimension)`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shared_embedding_collection_name
						</dt>
						<dd>Optional name of the collection where
shared embedding weights are added. If not given, a reasonable name will
be chosen based on the names of `categorical_columns`. This is also used
in `variable_scope` when creating shared embedding weights. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> ckpt_to_load_from
						</dt>
						<dd>String representing checkpoint name/pattern from which to
restore column weights. Required if `tensor_name_in_ckpt` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> tensor_name_in_ckpt
						</dt>
						<dd>Name of the `Tensor` in `ckpt_to_load_from` from which
to restore the column weights. Required if `ckpt_to_load_from` is not
`None`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<double>">Nullable&lt;double&gt;</span></code> max_norm
						</dt>
						<dd>If not `None`, each embedding is clipped if its l2-norm is larger
than this value, before combining. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> trainable
						</dt>
						<dd>Whether or not the embedding is trainable. Default is True. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<_SharedEmbeddingColumn>">IList&lt;_SharedEmbeddingColumn&gt;</span></code>
					</dt>
					<dd>A list of dense columns that converts from sparse input. The order of
results follows the ordering of `categorical_columns`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>watched_video_id = categorical_column_with_vocabulary_file(
                'watched_video_id', video_vocabulary_file, video_vocabulary_size)
            impression_video_id = categorical_column_with_vocabulary_file(
                'impression_video_id', video_vocabulary_file, video_vocabulary_size)
            columns = shared_embedding_columns(
                [watched_video_id, impression_video_id], dimension=10) <p></p> estimator = tf.estimator.DNNClassifier(feature_columns=columns,...) <p></p> label_column =...
def input_fn():
  features = tf.io.parse_example(
     ..., features=make_parse_example_spec(columns + [label_column]))
  labels = features.pop(label_column.name)
  return features, labels <p></p> estimator.train(input_fn=input_fn, steps=100) </pre>
</div>
		</div>
	</div>
	<div id="shared_embeddings" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>shared_embeddings</strong>(<span title="System.Collections.Generic.IEnumerable<IdentityCategoricalColumn>">IEnumerable&lt;IdentityCategoricalColumn&gt;</span> categorical_columns, <span title="System.int">int</span> dimension, <span title="System.string">string</span> combiner, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> initializer, <span title="System.string">string</span> shared_embedding_collection_name, <span title="System.string">string</span> ckpt_to_load_from, <span title="System.string">string</span> tensor_name_in_ckpt, <span title="System.Nullable<double>">Nullable&lt;double&gt;</span> max_norm, <span title="System.bool">bool</span> trainable)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="shared_embeddings" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>shared_embeddings</strong>(<span title="System.Collections.Generic.IEnumerable<IdentityCategoricalColumn>">IEnumerable&lt;IdentityCategoricalColumn&gt;</span> categorical_columns, <span title="System.int">int</span> dimension, <span title="System.string">string</span> combiner, <span title="System.string">string</span> initializer, <span title="System.string">string</span> shared_embedding_collection_name, <span title="System.string">string</span> ckpt_to_load_from, <span title="System.string">string</span> tensor_name_in_ckpt, <span title="System.Nullable<double>">Nullable&lt;double&gt;</span> max_norm, <span title="System.bool">bool</span> trainable)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="shared_embeddings_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>shared_embeddings_dyn</strong>(<span title="System.object">object</span> categorical_columns, <span title="System.object">object</span> dimension, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> combiner, <span title="System.object">object</span> initializer, <span title="System.object">object</span> shared_embedding_collection_name, <span title="System.object">object</span> ckpt_to_load_from, <span title="System.object">object</span> tensor_name_in_ckpt, <span title="System.object">object</span> max_norm, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> trainable)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="weighted_categorical_column" class="method">
		<h4>
			<a href="../tensorflow.python.feature_column.feature_column_v2/WeightedCategoricalColumn.htm">WeightedCategoricalColumn</a> <strong>weighted_categorical_column</strong>(<a href="../tensorflow.python.feature_column.feature_column/_CategoricalColumn.htm">_CategoricalColumn</a> categorical_column, <span title="System.string">string</span> weight_feature_key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">Applies weight values to a `CategoricalColumn`. <p></p> Use this when each of your sparse inputs has both an ID and a value. For
example, if you're representing text documents as a collection of word
frequencies, you can provide 2 parallel sparse input features ('terms' and
'frequencies' below). <p></p> Example: <p></p> Input `tf.Example` objects: <p></p> ```proto
[
features {
feature {
key: "terms"
value {bytes_list {value: "very" value: "model"}}
}
feature {
key: "frequencies"
value {float_list {value: 0.3 value: 0.1}}
}
},
features {
feature {
key: "terms"
value {bytes_list {value: "when" value: "course" value: "human"}}
}
feature {
key: "frequencies"
value {float_list {value: 0.4 value: 0.1 value: 0.2}}
}
}
]
```
This assumes the input dictionary contains a `SparseTensor` for key
'terms', and a `SparseTensor` for key 'frequencies'. These 2 tensors must have
the same indices and dense shape. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.feature_column.feature_column/_CategoricalColumn.htm">_CategoricalColumn</a></code> categorical_column
						</dt>
						<dd>A `CategoricalColumn` created by
`categorical_column_with_*` functions. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> weight_feature_key
						</dt>
						<dd>String key for weight values. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>Type of weights, such as <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Only float and integer weights
are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.python.feature_column.feature_column_v2/WeightedCategoricalColumn.htm">WeightedCategoricalColumn</a></code>
					</dt>
					<dd>A `CategoricalColumn` composed of two sparse features: one represents id,
the other represents weight (value) of the id feature in that example. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>categorical_column = categorical_column_with_hash_bucket(
                column_name='terms', hash_bucket_size=1000)
            weighted_column = weighted_categorical_column(
                categorical_column=categorical_column, weight_feature_key='frequencies')
            columns = [weighted_column,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	<div id="weighted_categorical_column_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>weighted_categorical_column_dyn</strong>(<span title="System.object">object</span> categorical_column, <span title="System.object">object</span> weight_feature_key, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype)
		</h4>
		<div class="content">Applies weight values to a `CategoricalColumn`. <p></p> Use this when each of your sparse inputs has both an ID and a value. For
example, if you're representing text documents as a collection of word
frequencies, you can provide 2 parallel sparse input features ('terms' and
'frequencies' below). <p></p> Example: <p></p> Input `tf.Example` objects: <p></p> ```proto
[
features {
feature {
key: "terms"
value {bytes_list {value: "very" value: "model"}}
}
feature {
key: "frequencies"
value {float_list {value: 0.3 value: 0.1}}
}
},
features {
feature {
key: "terms"
value {bytes_list {value: "when" value: "course" value: "human"}}
}
feature {
key: "frequencies"
value {float_list {value: 0.4 value: 0.1 value: 0.2}}
}
}
]
```
This assumes the input dictionary contains a `SparseTensor` for key
'terms', and a `SparseTensor` for key 'frequencies'. These 2 tensors must have
the same indices and dense shape. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> categorical_column
						</dt>
						<dd>A `CategoricalColumn` created by
`categorical_column_with_*` functions. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weight_feature_key
						</dt>
						<dd>String key for weight values. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>Type of weights, such as <a href="..\..\tf\dtypes\float32.md"><code>tf.float32</code></a>. Only float and integer weights
are supported. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `CategoricalColumn` composed of two sparse features: one represents id,
the other represents weight (value) of the id feature in that example. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>categorical_column = categorical_column_with_hash_bucket(
                column_name='terms', hash_bucket_size=1000)
            weighted_column = weighted_categorical_column(
                categorical_column=categorical_column, weight_feature_key='frequencies')
            columns = [weighted_column,...]
            features = tf.io.parse_example(..., features=make_parse_example_spec(columns))
            linear_prediction, _, _ = linear_model(features, columns) </pre>
</div>
		</div>
	</div>
	
	<h3 class="section">Public properties</h3>

	<div id="bucketized_column_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>bucketized_column_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="categorical_column_with_hash_bucket_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>categorical_column_with_hash_bucket_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="categorical_column_with_identity_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>categorical_column_with_identity_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="categorical_column_with_vocabulary_file_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>categorical_column_with_vocabulary_file_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="categorical_column_with_vocabulary_list_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>categorical_column_with_vocabulary_list_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="crossed_column_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>crossed_column_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="embedding_column_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>embedding_column_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="indicator_column_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>indicator_column_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_layer_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>input_layer_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="linear_model_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>linear_model_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="make_parse_example_spec_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>make_parse_example_spec_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="numeric_column_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>numeric_column_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sequence_categorical_column_with_hash_bucket_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>sequence_categorical_column_with_hash_bucket_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sequence_categorical_column_with_identity_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>sequence_categorical_column_with_identity_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sequence_categorical_column_with_vocabulary_file_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>sequence_categorical_column_with_vocabulary_file_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sequence_categorical_column_with_vocabulary_list_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>sequence_categorical_column_with_vocabulary_list_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sequence_numeric_column_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>sequence_numeric_column_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="shared_embedding_columns_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>shared_embedding_columns_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="shared_embeddings_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>shared_embeddings_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="weighted_categorical_column_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>weighted_categorical_column_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	</section>
	</article><footer>
	<span id="version">Built from v1.15.0.0 of LostTech.TensorFlow</span>
	<span id="docu-link">
		Generated by <a href="http://docu.jagregory.com">docu</a>
	</span>
</footer>
  </body>
</html>