<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    <title>tf.random - LostTech.TensorFlow Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body>
  	<header><h1>LostTech.TensorFlow : API Documentation</h1>
	</header>

    <nav id="namespaces">
      <iframe src="../namespaces.htm"></iframe>
    </nav><nav id="types">
  <h2 class="fixed">Types in tensorflow</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../tensorflow/AggregationMethod.htm">AggregationMethod</a>
        </li>
				<li>
            <a href="../tensorflow/ConditionalAccumulator.htm">ConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/ConditionalAccumulatorBase.htm">ConditionalAccumulatorBase</a>
        </li>
				<li>
            <a href="../tensorflow/constant_initializer.htm">constant_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/CriticalSection.htm">CriticalSection</a>
        </li>
				<li>
            <a href="../tensorflow/DeviceSpec.htm">DeviceSpec</a>
        </li>
				<li>
            <a href="../tensorflow/Dimension.htm">Dimension</a>
        </li>
				<li>
            <a href="../tensorflow/DType.htm">DType</a>
        </li>
				<li>
            <a href="../tensorflow/FIFOQueue.htm">FIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/FixedLenFeature.htm">FixedLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/FixedLengthRecordReader.htm">FixedLengthRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/FixedLenSequenceFeature.htm">FixedLenSequenceFeature</a>
        </li>
				<li>
            <a href="../tensorflow/glorot_normal_initializer.htm">glorot_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/glorot_uniform_initializer.htm">glorot_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/GradientTape.htm">GradientTape</a>
        </li>
				<li>
            <a href="../tensorflow/Graph.htm">Graph</a>
        </li>
				<li>
            <a href="../tensorflow/Graph._ControlDependenciesController.htm">Graph._ControlDependenciesController</a>
        </li>
				<li>
            <a href="../tensorflow/Graph.I_ControlDependenciesController.htm">Graph.I_ControlDependenciesController</a>
        </li>
				<li>
            <a href="../tensorflow/GraphKeys.htm">GraphKeys</a>
        </li>
				<li>
            <a href="../tensorflow/HeadingAxes.htm">HeadingAxes</a>
        </li>
				<li>
            <a href="../tensorflow/IAggregationMethod.htm">IAggregationMethod</a>
        </li>
				<li>
            <a href="../tensorflow/IConditionalAccumulator.htm">IConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/IConditionalAccumulatorBase.htm">IConditionalAccumulatorBase</a>
        </li>
				<li>
            <a href="../tensorflow/Iconstant_initializer.htm">Iconstant_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/ICriticalSection.htm">ICriticalSection</a>
        </li>
				<li>
            <a href="../tensorflow/IdentityReader.htm">IdentityReader</a>
        </li>
				<li>
            <a href="../tensorflow/IDeviceSpec.htm">IDeviceSpec</a>
        </li>
				<li>
            <a href="../tensorflow/IDimension.htm">IDimension</a>
        </li>
				<li>
            <a href="../tensorflow/IDType.htm">IDType</a>
        </li>
				<li>
            <a href="../tensorflow/IFIFOQueue.htm">IFIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IFixedLenFeature.htm">IFixedLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/IFixedLengthRecordReader.htm">IFixedLengthRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/IFixedLenSequenceFeature.htm">IFixedLenSequenceFeature</a>
        </li>
				<li>
            <a href="../tensorflow/Iglorot_normal_initializer.htm">Iglorot_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Iglorot_uniform_initializer.htm">Iglorot_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IGradientTape.htm">IGradientTape</a>
        </li>
				<li>
            <a href="../tensorflow/IGraph.htm">IGraph</a>
        </li>
				<li>
            <a href="../tensorflow/IGraphKeys.htm">IGraphKeys</a>
        </li>
				<li>
            <a href="../tensorflow/IIdentityReader.htm">IIdentityReader</a>
        </li>
				<li>
            <a href="../tensorflow/IIndexedSlices.htm">IIndexedSlices</a>
        </li>
				<li>
            <a href="../tensorflow/IIndexedSlicesSpec.htm">IIndexedSlicesSpec</a>
        </li>
				<li>
            <a href="../tensorflow/IInteractiveSession.htm">IInteractiveSession</a>
        </li>
				<li>
            <a href="../tensorflow/ILazyLoader.htm">ILazyLoader</a>
        </li>
				<li>
            <a href="../tensorflow/ILMDBReader.htm">ILMDBReader</a>
        </li>
				<li>
            <a href="../tensorflow/IModule.htm">IModule</a>
        </li>
				<li>
            <a href="../tensorflow/Iname_scope.htm">Iname_scope</a>
        </li>
				<li>
            <a href="../tensorflow/IndexedSlices.htm">IndexedSlices</a>
        </li>
				<li>
            <a href="../tensorflow/IndexedSlicesSpec.htm">IndexedSlicesSpec</a>
        </li>
				<li>
            <a href="../tensorflow/InteractiveSession.htm">InteractiveSession</a>
        </li>
				<li>
            <a href="../tensorflow/Iones_initializer.htm">Iones_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IOperation.htm">IOperation</a>
        </li>
				<li>
            <a href="../tensorflow/IOpError.htm">IOpError</a>
        </li>
				<li>
            <a href="../tensorflow/IOptionalSpec.htm">IOptionalSpec</a>
        </li>
				<li>
            <a href="../tensorflow/Iorthogonal_initializer.htm">Iorthogonal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IPaddingFIFOQueue.htm">IPaddingFIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IPriorityQueue.htm">IPriorityQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IQueueBase.htm">IQueueBase</a>
        </li>
				<li>
            <a href="../tensorflow/IRaggedTensor.htm">IRaggedTensor</a>
        </li>
				<li>
            <a href="../tensorflow/IRaggedTensorSpec.htm">IRaggedTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/Irandom_normal_initializer.htm">Irandom_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Irandom_uniform_initializer.htm">Irandom_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IRandomShuffleQueue.htm">IRandomShuffleQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IReaderBase.htm">IReaderBase</a>
        </li>
				<li>
            <a href="../tensorflow/IRegisterGradient.htm">IRegisterGradient</a>
        </li>
				<li>
            <a href="../tensorflow/ISession.htm">ISession</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseConditionalAccumulator.htm">ISparseConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseFeature.htm">ISparseFeature</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseTensor.htm">ISparseTensor</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseTensorSpec.htm">ISparseTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseTensorValue.htm">ISparseTensorValue</a>
        </li>
				<li>
            <a href="../tensorflow/ITensor.htm">ITensor</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorArray.htm">ITensorArray</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorArraySpec.htm">ITensorArraySpec</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorShape.htm">ITensorShape</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorSpec.htm">ITensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/ITextLineReader.htm">ITextLineReader</a>
        </li>
				<li>
            <a href="../tensorflow/ITFRecordReader.htm">ITFRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/Itruncated_normal_initializer.htm">Itruncated_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/ITypeSpec.htm">ITypeSpec</a>
        </li>
				<li>
            <a href="../tensorflow/IUnconnectedGradients.htm">IUnconnectedGradients</a>
        </li>
				<li>
            <a href="../tensorflow/Iuniform_unit_scaling_initializer.htm">Iuniform_unit_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IVariable.htm">IVariable</a>
        </li>
				<li>
            <a href="../tensorflow/Ivariable_scope.htm">Ivariable_scope</a>
        </li>
				<li>
            <a href="../tensorflow/IVariableScope.htm">IVariableScope</a>
        </li>
				<li>
            <a href="../tensorflow/Ivariance_scaling_initializer.htm">Ivariance_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IVarLenFeature.htm">IVarLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/IWholeFileReader.htm">IWholeFileReader</a>
        </li>
				<li>
            <a href="../tensorflow/Izeros_initializer.htm">Izeros_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/LazyLoader.htm">LazyLoader</a>
        </li>
				<li>
            <a href="../tensorflow/LMDBReader.htm">LMDBReader</a>
        </li>
				<li>
            <a href="../tensorflow/Module.htm">Module</a>
        </li>
				<li>
            <a href="../tensorflow/name_scope.htm">name_scope</a>
        </li>
				<li>
            <a href="../tensorflow/ones_initializer.htm">ones_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Operation.htm">Operation</a>
        </li>
				<li>
            <a href="../tensorflow/Operation._InputList.htm">Operation._InputList</a>
        </li>
				<li>
            <a href="../tensorflow/Operation.I_InputList.htm">Operation.I_InputList</a>
        </li>
				<li>
            <a href="../tensorflow/OpError.htm">OpError</a>
        </li>
				<li>
            <a href="../tensorflow/OptionalSpec.htm">OptionalSpec</a>
        </li>
				<li>
            <a href="../tensorflow/orthogonal_initializer.htm">orthogonal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/PaddingFIFOQueue.htm">PaddingFIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/PriorityQueue.htm">PriorityQueue</a>
        </li>
				<li>
            <a href="../tensorflow/QueueBase.htm">QueueBase</a>
        </li>
				<li>
            <a href="../tensorflow/RaggedTensor.htm">RaggedTensor</a>
        </li>
				<li>
            <a href="../tensorflow/RaggedTensorSpec.htm">RaggedTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/random_normal_initializer.htm">random_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/random_uniform_initializer.htm">random_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/RandomShuffleQueue.htm">RandomShuffleQueue</a>
        </li>
				<li>
            <a href="../tensorflow/ReaderBase.htm">ReaderBase</a>
        </li>
				<li>
            <a href="../tensorflow/RegisterGradient.htm">RegisterGradient</a>
        </li>
				<li>
            <a href="../tensorflow/Session.htm">Session</a>
        </li>
				<li>
            <a href="../tensorflow/SparseConditionalAccumulator.htm">SparseConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/SparseFeature.htm">SparseFeature</a>
        </li>
				<li>
            <a href="../tensorflow/SparseTensor.htm">SparseTensor</a>
        </li>
				<li>
            <a href="../tensorflow/SparseTensorSpec.htm">SparseTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/SparseTensorValue.htm">SparseTensorValue</a>
        </li>
				<li>
            <a href="../tensorflow/Tensor.htm">Tensor</a>
        </li>
				<li>
            <a href="../tensorflow/Tensor`1.htm">Tensor&lt;T&gt;</a>
        </li>
				<li>
            <a href="../tensorflow/TensorArray.htm">TensorArray</a>
        </li>
				<li>
            <a href="../tensorflow/TensorArraySpec.htm">TensorArraySpec</a>
        </li>
				<li>
            <a href="../tensorflow/TensorDimension.htm">TensorDimension</a>
        </li>
				<li>
            <a href="../tensorflow/TensorDimensionSlice.htm">TensorDimensionSlice</a>
        </li>
				<li>
            <a href="../tensorflow/TensorShape.htm">TensorShape</a>
        </li>
				<li>
            <a href="../tensorflow/TensorSpec.htm">TensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/TextLineReader.htm">TextLineReader</a>
        </li>
				<li>
            <a href="../tensorflow/tf.htm">tf</a>
        </li>
				<li>
            <a href="../tensorflow/tf.audio.htm">tf.audio</a>
        </li>
				<li>
            <a href="../tensorflow/tf.autograph.htm">tf.autograph</a>
        </li>
				<li>
            <a href="../tensorflow/tf.autograph.experimental.htm">tf.autograph.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.bitwise.htm">tf.bitwise</a>
        </li>
				<li>
            <a href="../tensorflow/tf.compat.htm">tf.compat</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.htm">tf.config</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.experimental.htm">tf.config.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.optimizer.htm">tf.config.optimizer</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.threading.htm">tf.config.threading</a>
        </li>
				<li>
            <a href="../tensorflow/tf.data.htm">tf.data</a>
        </li>
				<li>
            <a href="../tensorflow/tf.data.experimental.htm">tf.data.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.debugging.htm">tf.debugging</a>
        </li>
				<li>
            <a href="../tensorflow/tf.distribute.htm">tf.distribute</a>
        </li>
				<li>
            <a href="../tensorflow/tf.distributions.htm">tf.distributions</a>
        </li>
				<li>
            <a href="../tensorflow/tf.errors.htm">tf.errors</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.htm">tf.estimator</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.experimental.htm">tf.estimator.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.export.htm">tf.estimator.export</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.inputs.htm">tf.estimator.inputs</a>
        </li>
				<li>
            <a href="../tensorflow/tf.experimental.htm">tf.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.feature_column.htm">tf.feature_column</a>
        </li>
				<li>
            <a href="../tensorflow/tf.gfile.htm">tf.gfile</a>
        </li>
				<li>
            <a href="../tensorflow/tf.graph_util.htm">tf.graph_util</a>
        </li>
				<li>
            <a href="../tensorflow/tf.image.htm">tf.image</a>
        </li>
				<li>
            <a href="../tensorflow/tf.initializers.htm">tf.initializers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.io.htm">tf.io</a>
        </li>
				<li>
            <a href="../tensorflow/tf.io.gfile.htm">tf.io.gfile</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.htm">tf.keras</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.activations.htm">tf.keras.activations</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.htm">tf.keras.applications</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.densenet.htm">tf.keras.applications.densenet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.imagenet_utils.htm">tf.keras.applications.imagenet_utils</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.inception_resnet_v2.htm">tf.keras.applications.inception_resnet_v2</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.inception_v3.htm">tf.keras.applications.inception_v3</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.mobilenet.htm">tf.keras.applications.mobilenet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.mobilenet_v2.htm">tf.keras.applications.mobilenet_v2</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.nasnet.htm">tf.keras.applications.nasnet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.resnet.htm">tf.keras.applications.resnet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.resnet_v2.htm">tf.keras.applications.resnet_v2</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.vgg16.htm">tf.keras.applications.vgg16</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.vgg19.htm">tf.keras.applications.vgg19</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.xception.htm">tf.keras.applications.xception</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.backend.htm">tf.keras.backend</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.constraints.htm">tf.keras.constraints</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.htm">tf.keras.datasets</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.boston_housing.htm">tf.keras.datasets.boston_housing</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.cifar10.htm">tf.keras.datasets.cifar10</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.cifar100.htm">tf.keras.datasets.cifar100</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.fashion_mnist.htm">tf.keras.datasets.fashion_mnist</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.imdb.htm">tf.keras.datasets.imdb</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.mnist.htm">tf.keras.datasets.mnist</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.reuters.htm">tf.keras.datasets.reuters</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.estimator.htm">tf.keras.estimator</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.experimental.htm">tf.keras.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.initializers.htm">tf.keras.initializers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.layers.htm">tf.keras.layers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.losses.htm">tf.keras.losses</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.metrics.htm">tf.keras.metrics</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.mixed_precision.htm">tf.keras.mixed_precision</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.mixed_precision.experimental.htm">tf.keras.mixed_precision.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.models.htm">tf.keras.models</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.optimizers.htm">tf.keras.optimizers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.optimizers.schedules.htm">tf.keras.optimizers.schedules</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.preprocessing.htm">tf.keras.preprocessing</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.preprocessing.image.htm">tf.keras.preprocessing.image</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.regularizers.htm">tf.keras.regularizers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.utils.htm">tf.keras.utils</a>
        </li>
				<li>
            <a href="../tensorflow/tf.layers.htm">tf.layers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.layers.experimental.htm">tf.layers.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.linalg.htm">tf.linalg</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.htm">tf.lite</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.htm">tf.lite.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.microfrontend.htm">tf.lite.experimental.microfrontend</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.microfrontend.python.htm">tf.lite.experimental.microfrontend.python</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.microfrontend.python.ops.htm">tf.lite.experimental.microfrontend.python.ops</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.nn.htm">tf.lite.experimental.nn</a>
        </li>
				<li>
            <a href="../tensorflow/tf.logging.htm">tf.logging</a>
        </li>
				<li>
            <a href="../tensorflow/tf.losses.htm">tf.losses</a>
        </li>
				<li>
            <a href="../tensorflow/tf.math.htm">tf.math</a>
        </li>
				<li>
            <a href="../tensorflow/tf.metrics.htm">tf.metrics</a>
        </li>
				<li>
            <a href="../tensorflow/tf.nest.htm">tf.nest</a>
        </li>
				<li>
            <a href="../tensorflow/tf.nn.htm">tf.nn</a>
        </li>
				<li>
            <a href="../tensorflow/tf.profiler.htm">tf.profiler</a>
        </li>
				<li>
            <a href="../tensorflow/tf.quantization.htm">tf.quantization</a>
        </li>
				<li>
            <a href="../tensorflow/tf.ragged.htm">tf.ragged</a>
        </li>
				<li>
            <a href="../tensorflow/tf.random.htm" class="current">tf.random</a>
        </li>
				<li>
            <a href="../tensorflow/tf.random.experimental.htm">tf.random.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.resource_loader.htm">tf.resource_loader</a>
        </li>
				<li>
            <a href="../tensorflow/tf.saved_model.htm">tf.saved_model</a>
        </li>
				<li>
            <a href="../tensorflow/tf.saved_model.main_op.htm">tf.saved_model.main_op</a>
        </li>
				<li>
            <a href="../tensorflow/tf.sets.htm">tf.sets</a>
        </li>
				<li>
            <a href="../tensorflow/tf.signal.htm">tf.signal</a>
        </li>
				<li>
            <a href="../tensorflow/tf.sparse.htm">tf.sparse</a>
        </li>
				<li>
            <a href="../tensorflow/tf.strings.htm">tf.strings</a>
        </li>
				<li>
            <a href="../tensorflow/tf.summary.htm">tf.summary</a>
        </li>
				<li>
            <a href="../tensorflow/tf.summary.experimental.htm">tf.summary.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.sysconfig.htm">tf.sysconfig</a>
        </li>
				<li>
            <a href="../tensorflow/tf.test.htm">tf.test</a>
        </li>
				<li>
            <a href="../tensorflow/tf.tpu.htm">tf.tpu</a>
        </li>
				<li>
            <a href="../tensorflow/tf.tpu.experimental.htm">tf.tpu.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.train.htm">tf.train</a>
        </li>
				<li>
            <a href="../tensorflow/tf.train.experimental.htm">tf.train.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.user_ops.htm">tf.user_ops</a>
        </li>
				<li>
            <a href="../tensorflow/tf.xla.htm">tf.xla</a>
        </li>
				<li>
            <a href="../tensorflow/tf.xla.experimental.htm">tf.xla.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/TFRecordReader.htm">TFRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/truncated_normal_initializer.htm">truncated_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/TypeSpec.htm">TypeSpec</a>
        </li>
				<li>
            <a href="../tensorflow/UnconnectedGradients.htm">UnconnectedGradients</a>
        </li>
				<li>
            <a href="../tensorflow/uniform_unit_scaling_initializer.htm">uniform_unit_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Variable.htm">Variable</a>
        </li>
				<li>
            <a href="../tensorflow/variable_scope.htm">variable_scope</a>
        </li>
				<li>
            <a href="../tensorflow/VariableAggregation.htm">VariableAggregation</a>
        </li>
				<li>
            <a href="../tensorflow/VariableScope.htm">VariableScope</a>
        </li>
				<li>
            <a href="../tensorflow/VariableSynchronization.htm">VariableSynchronization</a>
        </li>
				<li>
            <a href="../tensorflow/variance_scaling_initializer.htm">variance_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/VarLenFeature.htm">VarLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/WholeFileReader.htm">WholeFileReader</a>
        </li>
				<li>
            <a href="../tensorflow/zeros_initializer.htm">zeros_initializer</a>
        </li>
		</ul>
	</div>
</nav>
	<article>
    <header>
		<p class="class"><strong>Type</strong> tf.random</p>
	</header>
	<section>
		<header>
		<p><strong>Namespace</strong> tensorflow</p>
		</header>
    <div class="sub-header">
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../tensorflow/tf.random.htm#categorical">categorical</a></li>
				<li><a href="../tensorflow/tf.random.htm#categorical">categorical</a></li>
				<li><a href="../tensorflow/tf.random.htm#categorical_dyn">categorical_dyn</a></li>
				<li><a href="../tensorflow/tf.random.htm#set_seed">set_seed</a></li>
				<li><a href="../tensorflow/tf.random.htm#set_seed_dyn">set_seed_dyn</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_categorical">stateless_categorical</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_categorical_dyn">stateless_categorical_dyn</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_multinomial">stateless_multinomial</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_multinomial">stateless_multinomial</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_multinomial">stateless_multinomial</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_multinomial">stateless_multinomial</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal">stateless_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal_dyn">stateless_normal_dyn</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal">stateless_truncated_normal</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal_dyn">stateless_truncated_normal_dyn</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform">stateless_uniform</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform_dyn">stateless_uniform_dyn</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../tensorflow/tf.random.htm#categorical_fn">categorical_fn</a></li>
				<li><a href="../tensorflow/tf.random.htm#set_seed_fn">set_seed_fn</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_categorical_fn">stateless_categorical_fn</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_multinomial_fn">stateless_multinomial_fn</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_normal_fn">stateless_normal_fn</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_truncated_normal_fn">stateless_truncated_normal_fn</a></li>
				<li><a href="../tensorflow/tf.random.htm#stateless_uniform_fn">stateless_uniform_fn</a></li>
			</ul>
		
	</div>
	
	
	<h3 class="section">Public static methods</h3>

	<div id="categorical" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>categorical</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> logits, <span title="System.int">int</span> num_samples, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.object">object</span> seed, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Draws samples from a categorical distribution. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> logits
						</dt>
						<dd>2-D Tensor with shape `[batch_size, num_classes]`.  Each slice
`[i, :]` represents the unnormalized log-probabilities for all classes. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_samples
						</dt>
						<dd>0-D.  Number of independent samples to draw for each row slice. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>integer type to use for the output. Defaults to int64. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> seed
						</dt>
						<dd>A Python integer. Used to create a random seed for the distribution.
See `tf.compat.v1.set_random_seed` for behavior. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Optional name for the operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>The drawn samples of shape `[batch_size, num_samples]`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># samples has shape [1, 5], where each value is either 0 or 1 with equal
            # probability.
            samples = tf.random.categorical(tf.math.log([[0.5, 0.5]]), 5) </pre>
</div>
		</div>
	</div>
	<div id="categorical" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>categorical</strong>(<span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> logits, <span title="System.int">int</span> num_samples, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.object">object</span> seed, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Draws samples from a categorical distribution. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> logits
						</dt>
						<dd>2-D Tensor with shape `[batch_size, num_classes]`.  Each slice
`[i, :]` represents the unnormalized log-probabilities for all classes. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_samples
						</dt>
						<dd>0-D.  Number of independent samples to draw for each row slice. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>integer type to use for the output. Defaults to int64. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> seed
						</dt>
						<dd>A Python integer. Used to create a random seed for the distribution.
See `tf.compat.v1.set_random_seed` for behavior. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Optional name for the operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>The drawn samples of shape `[batch_size, num_samples]`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># samples has shape [1, 5], where each value is either 0 or 1 with equal
            # probability.
            samples = tf.random.categorical(tf.math.log([[0.5, 0.5]]), 5) </pre>
</div>
		</div>
	</div>
	<div id="categorical_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>categorical_dyn</strong>(<span title="System.object">object</span> logits, <span title="System.object">object</span> num_samples, <span title="System.object">object</span> dtype, <span title="System.object">object</span> seed, <span title="System.object">object</span> name)
		</h4>
		<div class="content">Draws samples from a categorical distribution. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> logits
						</dt>
						<dd>2-D Tensor with shape `[batch_size, num_classes]`.  Each slice
`[i, :]` represents the unnormalized log-probabilities for all classes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> num_samples
						</dt>
						<dd>0-D.  Number of independent samples to draw for each row slice. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> dtype
						</dt>
						<dd>integer type to use for the output. Defaults to int64. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> seed
						</dt>
						<dd>A Python integer. Used to create a random seed for the distribution.
See `tf.compat.v1.set_random_seed` for behavior. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>Optional name for the operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The drawn samples of shape `[batch_size, num_samples]`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># samples has shape [1, 5], where each value is either 0 or 1 with equal
            # probability.
            samples = tf.random.categorical(tf.math.log([[0.5, 0.5]]), 5) </pre>
</div>
		</div>
	</div>
	<div id="set_seed" class="method">
		<h4>
			<span title="System.void">void</span> <strong>set_seed</strong>(<span title="System.object">object</span> seed)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="set_seed_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>set_seed_dyn</strong>(<span title="System.object">object</span> seed)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="stateless_categorical" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_categorical</strong>(<span title="System.object">object</span> logits, <span title="System.object">object</span> num_samples, <span title="System.object">object</span> seed, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Draws deterministic pseudorandom samples from a categorical distribution. <p></p> This is a stateless version of `tf.categorical`: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> logits
						</dt>
						<dd>2-D Tensor with shape `[batch_size, num_classes]`.  Each slice
`[i, :]` represents the unnormalized log-probabilities for all classes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> num_samples
						</dt>
						<dd>0-D.  Number of independent samples to draw for each row slice. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>integer type to use for the output. Defaults to int64. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Optional name for the operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>The drawn samples of shape `[batch_size, num_samples]`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># samples has shape [1, 5], where each value is either 0 or 1 with equal
            # probability.
            samples = tf.random.stateless_categorical(
                tf.math.log([[0.5, 0.5]]), 5, seed=[7, 17]) </pre>
</div>
		</div>
	</div>
	<div id="stateless_categorical_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>stateless_categorical_dyn</strong>(<span title="System.object">object</span> logits, <span title="System.object">object</span> num_samples, <span title="System.object">object</span> seed, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.object">object</span> name)
		</h4>
		<div class="content">Draws deterministic pseudorandom samples from a categorical distribution. <p></p> This is a stateless version of `tf.categorical`: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> logits
						</dt>
						<dd>2-D Tensor with shape `[batch_size, num_classes]`.  Each slice
`[i, :]` represents the unnormalized log-probabilities for all classes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> num_samples
						</dt>
						<dd>0-D.  Number of independent samples to draw for each row slice. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>integer type to use for the output. Defaults to int64. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>Optional name for the operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The drawn samples of shape `[batch_size, num_samples]`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># samples has shape [1, 5], where each value is either 0 or 1 with equal
            # probability.
            samples = tf.random.stateless_categorical(
                tf.math.log([[0.5, 0.5]]), 5, seed=[7, 17]) </pre>
</div>
		</div>
	</div>
	<div id="stateless_multinomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_multinomial</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> logits, <span title="System.int">int</span> num_samples, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> output_dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Draws deterministic pseudorandom samples from a multinomial distribution. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
Use <a href="..\..\tf\random\stateless_categorical.md"><code>tf.random.stateless_categorical</code></a> instead. <p></p> This is a stateless version of <a href="..\..\tf\random\categorical.md"><code>tf.random.categorical</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> logits
						</dt>
						<dd>2-D Tensor with shape `[batch_size, num_classes]`.  Each slice
`[i, :]` represents the unnormalized log-probabilities for all classes. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_samples
						</dt>
						<dd>0-D.  Number of independent samples to draw for each row slice. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> output_dtype
						</dt>
						<dd>integer type to use for the output. Defaults to int64. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Optional name for the operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>The drawn samples of shape `[batch_size, num_samples]`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># samples has shape [1, 5], where each value is either 0 or 1 with equal
            # probability.
            samples = tf.random.stateless_categorical(
                tf.math.log([[0.5, 0.5]]), 5, seed=[7, 17]) </pre>
</div>
		</div>
	</div>
	<div id="stateless_multinomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_multinomial</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> logits, <span title="System.int">int</span> num_samples, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> output_dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Draws deterministic pseudorandom samples from a multinomial distribution. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
Use <a href="..\..\tf\random\stateless_categorical.md"><code>tf.random.stateless_categorical</code></a> instead. <p></p> This is a stateless version of <a href="..\..\tf\random\categorical.md"><code>tf.random.categorical</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> logits
						</dt>
						<dd>2-D Tensor with shape `[batch_size, num_classes]`.  Each slice
`[i, :]` represents the unnormalized log-probabilities for all classes. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_samples
						</dt>
						<dd>0-D.  Number of independent samples to draw for each row slice. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> output_dtype
						</dt>
						<dd>integer type to use for the output. Defaults to int64. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Optional name for the operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>The drawn samples of shape `[batch_size, num_samples]`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># samples has shape [1, 5], where each value is either 0 or 1 with equal
            # probability.
            samples = tf.random.stateless_categorical(
                tf.math.log([[0.5, 0.5]]), 5, seed=[7, 17]) </pre>
</div>
		</div>
	</div>
	<div id="stateless_multinomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_multinomial</strong>(<span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> logits, <span title="System.int">int</span> num_samples, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> output_dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Draws deterministic pseudorandom samples from a multinomial distribution. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
Use <a href="..\..\tf\random\stateless_categorical.md"><code>tf.random.stateless_categorical</code></a> instead. <p></p> This is a stateless version of <a href="..\..\tf\random\categorical.md"><code>tf.random.categorical</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> logits
						</dt>
						<dd>2-D Tensor with shape `[batch_size, num_classes]`.  Each slice
`[i, :]` represents the unnormalized log-probabilities for all classes. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_samples
						</dt>
						<dd>0-D.  Number of independent samples to draw for each row slice. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> output_dtype
						</dt>
						<dd>integer type to use for the output. Defaults to int64. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Optional name for the operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>The drawn samples of shape `[batch_size, num_samples]`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># samples has shape [1, 5], where each value is either 0 or 1 with equal
            # probability.
            samples = tf.random.stateless_categorical(
                tf.math.log([[0.5, 0.5]]), 5, seed=[7, 17]) </pre>
</div>
		</div>
	</div>
	<div id="stateless_multinomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_multinomial</strong>(<span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> logits, <span title="System.int">int</span> num_samples, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> output_dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Draws deterministic pseudorandom samples from a multinomial distribution. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
Use <a href="..\..\tf\random\stateless_categorical.md"><code>tf.random.stateless_categorical</code></a> instead. <p></p> This is a stateless version of <a href="..\..\tf\random\categorical.md"><code>tf.random.categorical</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> logits
						</dt>
						<dd>2-D Tensor with shape `[batch_size, num_classes]`.  Each slice
`[i, :]` represents the unnormalized log-probabilities for all classes. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> num_samples
						</dt>
						<dd>0-D.  Number of independent samples to draw for each row slice. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> output_dtype
						</dt>
						<dd>integer type to use for the output. Defaults to int64. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Optional name for the operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>The drawn samples of shape `[batch_size, num_samples]`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre># samples has shape [1, 5], where each value is either 0 or 1 with equal
            # probability.
            samples = tf.random.stateless_categorical(
                tf.math.log([[0.5, 0.5]]), 5, seed=[7, 17]) </pre>
</div>
		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.double">double</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.int">int</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.int">int</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.int">int</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.double">double</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.int">int</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.int">int</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.int">int</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.double">double</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_normal_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>stateless_normal_dyn</strong>(<span title="System.object">object</span> shape, <span title="System.object">object</span> seed, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> mean, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.object">object</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a normal distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\normal.md"><code>tf.random.normal</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.int">int</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.int">int</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.double">double</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.int">int</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.int">int</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> seed, <span title="System.double">double</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> mean, <span title="System.int">int</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_truncated_normal</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_truncated_normal_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>stateless_truncated_normal_dyn</strong>(<span title="System.object">object</span> shape, <span title="System.object">object</span> seed, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> mean, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.object">object</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values, truncated normally distributed. <p></p> This is a stateless version of <a href="..\..\tf\random\truncated_normal.md"><code>tf.random.truncated_normal</code></a>: if run twice with
the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard deviation
of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> seed, <span title="System.int">int</span> minval, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> minval, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> minval, <span title="System.double">double</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> minval, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> minval, <span title="System.double">double</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> seed, <span title="System.int">int</span> minval, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> seed, <span title="System.int">int</span> minval, <span title="System.double">double</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> seed, <span title="System.int">int</span> minval, <span title="System.double">double</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> seed, <span title="System.double">double</span> minval, <span title="System.double">double</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> minval, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.int">int</span> minval, <span title="System.double">double</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> minval, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> seed, <span title="System.double">double</span> minval, <span title="System.double">double</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> seed, <span title="System.double">double</span> minval, <span title="System.double">double</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> seed, <span title="System.double">double</span> minval, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<int, object>">ValueTuple&lt;int, object&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>stateless_uniform</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> seed, <span title="System.double">double</span> minval, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="stateless_uniform_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>stateless_uniform_dyn</strong>(<span title="System.object">object</span> shape, <span title="System.object">object</span> seed, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> minval, <span title="System.object">object</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.object">object</span> name)
		</h4>
		<div class="content">Outputs deterministic pseudorandom values from a uniform distribution. <p></p> This is a stateless version of <a href="..\..\tf\random\uniform.md"><code>tf.random.uniform</code></a>: if run twice with the
same seeds, it will produce the same pseudorandom numbers.  The output is
consistent across multiple runs on the same hardware (and between CPU
and GPU), but may change between versions of TensorFlow or on non-CPU/GPU
hardware. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output tensor. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> seed
						</dt>
						<dd>A shape [2] integer Tensor of seeds to the random number generator. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on the
range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on the
range of random values to generate.  Defaults to 1 if `dtype` is floating
point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output: `float16`, `float32`, `float64`, `int32`, or
`int64`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	
	<h3 class="section">Public properties</h3>

	<div id="categorical_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>categorical_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="set_seed_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>set_seed_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="stateless_categorical_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>stateless_categorical_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="stateless_multinomial_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>stateless_multinomial_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="stateless_normal_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>stateless_normal_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="stateless_truncated_normal_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>stateless_truncated_normal_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="stateless_uniform_fn" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>stateless_uniform_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	</section>
	</article><footer>
	<span id="version">Built from v1.15.0.0 of LostTech.TensorFlow</span>
	<span id="docu-link">
		Generated by <a href="http://docu.jagregory.com">docu</a>
	</span>
</footer>
  </body>
</html>