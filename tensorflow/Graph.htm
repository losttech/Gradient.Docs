<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    <title>Graph - LostTech.TensorFlow Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body>
  	<header><h1>LostTech.TensorFlow : API Documentation</h1>
	</header>

    <nav id="namespaces">
      <iframe src="../namespaces.htm"></iframe>
    </nav><nav id="types">
  <h2 class="fixed">Types in tensorflow</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../tensorflow/AggregationMethod.htm">AggregationMethod</a>
        </li>
				<li>
            <a href="../tensorflow/ConditionalAccumulator.htm">ConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/ConditionalAccumulatorBase.htm">ConditionalAccumulatorBase</a>
        </li>
				<li>
            <a href="../tensorflow/constant_initializer.htm">constant_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/CriticalSection.htm">CriticalSection</a>
        </li>
				<li>
            <a href="../tensorflow/DeviceSpec.htm">DeviceSpec</a>
        </li>
				<li>
            <a href="../tensorflow/Dimension.htm">Dimension</a>
        </li>
				<li>
            <a href="../tensorflow/DType.htm">DType</a>
        </li>
				<li>
            <a href="../tensorflow/FIFOQueue.htm">FIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/FixedLenFeature.htm">FixedLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/FixedLengthRecordReader.htm">FixedLengthRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/FixedLenSequenceFeature.htm">FixedLenSequenceFeature</a>
        </li>
				<li>
            <a href="../tensorflow/glorot_normal_initializer.htm">glorot_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/glorot_uniform_initializer.htm">glorot_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/GradientTape.htm">GradientTape</a>
        </li>
				<li>
            <a href="../tensorflow/Graph.htm" class="current">Graph</a>
        </li>
				<li>
            <a href="../tensorflow/Graph._ControlDependenciesController.htm">Graph._ControlDependenciesController</a>
        </li>
				<li>
            <a href="../tensorflow/Graph.I_ControlDependenciesController.htm">Graph.I_ControlDependenciesController</a>
        </li>
				<li>
            <a href="../tensorflow/GraphKeys.htm">GraphKeys</a>
        </li>
				<li>
            <a href="../tensorflow/HeadingAxes.htm">HeadingAxes</a>
        </li>
				<li>
            <a href="../tensorflow/IAggregationMethod.htm">IAggregationMethod</a>
        </li>
				<li>
            <a href="../tensorflow/IConditionalAccumulator.htm">IConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/IConditionalAccumulatorBase.htm">IConditionalAccumulatorBase</a>
        </li>
				<li>
            <a href="../tensorflow/Iconstant_initializer.htm">Iconstant_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/ICriticalSection.htm">ICriticalSection</a>
        </li>
				<li>
            <a href="../tensorflow/IdentityReader.htm">IdentityReader</a>
        </li>
				<li>
            <a href="../tensorflow/IDeviceSpec.htm">IDeviceSpec</a>
        </li>
				<li>
            <a href="../tensorflow/IDimension.htm">IDimension</a>
        </li>
				<li>
            <a href="../tensorflow/IDType.htm">IDType</a>
        </li>
				<li>
            <a href="../tensorflow/IFIFOQueue.htm">IFIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IFixedLenFeature.htm">IFixedLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/IFixedLengthRecordReader.htm">IFixedLengthRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/IFixedLenSequenceFeature.htm">IFixedLenSequenceFeature</a>
        </li>
				<li>
            <a href="../tensorflow/Iglorot_normal_initializer.htm">Iglorot_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Iglorot_uniform_initializer.htm">Iglorot_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IGradientTape.htm">IGradientTape</a>
        </li>
				<li>
            <a href="../tensorflow/IGraph.htm">IGraph</a>
        </li>
				<li>
            <a href="../tensorflow/IGraphKeys.htm">IGraphKeys</a>
        </li>
				<li>
            <a href="../tensorflow/IIdentityReader.htm">IIdentityReader</a>
        </li>
				<li>
            <a href="../tensorflow/IIndexedSlices.htm">IIndexedSlices</a>
        </li>
				<li>
            <a href="../tensorflow/IIndexedSlicesSpec.htm">IIndexedSlicesSpec</a>
        </li>
				<li>
            <a href="../tensorflow/IInteractiveSession.htm">IInteractiveSession</a>
        </li>
				<li>
            <a href="../tensorflow/ILazyLoader.htm">ILazyLoader</a>
        </li>
				<li>
            <a href="../tensorflow/ILMDBReader.htm">ILMDBReader</a>
        </li>
				<li>
            <a href="../tensorflow/IModule.htm">IModule</a>
        </li>
				<li>
            <a href="../tensorflow/Iname_scope.htm">Iname_scope</a>
        </li>
				<li>
            <a href="../tensorflow/IndexedSlices.htm">IndexedSlices</a>
        </li>
				<li>
            <a href="../tensorflow/IndexedSlicesSpec.htm">IndexedSlicesSpec</a>
        </li>
				<li>
            <a href="../tensorflow/InteractiveSession.htm">InteractiveSession</a>
        </li>
				<li>
            <a href="../tensorflow/Iones_initializer.htm">Iones_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IOperation.htm">IOperation</a>
        </li>
				<li>
            <a href="../tensorflow/IOpError.htm">IOpError</a>
        </li>
				<li>
            <a href="../tensorflow/IOptionalSpec.htm">IOptionalSpec</a>
        </li>
				<li>
            <a href="../tensorflow/Iorthogonal_initializer.htm">Iorthogonal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IPaddingFIFOQueue.htm">IPaddingFIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IPriorityQueue.htm">IPriorityQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IQueueBase.htm">IQueueBase</a>
        </li>
				<li>
            <a href="../tensorflow/IRaggedTensor.htm">IRaggedTensor</a>
        </li>
				<li>
            <a href="../tensorflow/IRaggedTensorSpec.htm">IRaggedTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/Irandom_normal_initializer.htm">Irandom_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Irandom_uniform_initializer.htm">Irandom_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IRandomShuffleQueue.htm">IRandomShuffleQueue</a>
        </li>
				<li>
            <a href="../tensorflow/IReaderBase.htm">IReaderBase</a>
        </li>
				<li>
            <a href="../tensorflow/IRegisterGradient.htm">IRegisterGradient</a>
        </li>
				<li>
            <a href="../tensorflow/ISession.htm">ISession</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseConditionalAccumulator.htm">ISparseConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseFeature.htm">ISparseFeature</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseTensor.htm">ISparseTensor</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseTensorSpec.htm">ISparseTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/ISparseTensorValue.htm">ISparseTensorValue</a>
        </li>
				<li>
            <a href="../tensorflow/ITensor.htm">ITensor</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorArray.htm">ITensorArray</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorArraySpec.htm">ITensorArraySpec</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorShape.htm">ITensorShape</a>
        </li>
				<li>
            <a href="../tensorflow/ITensorSpec.htm">ITensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/ITextLineReader.htm">ITextLineReader</a>
        </li>
				<li>
            <a href="../tensorflow/ITFRecordReader.htm">ITFRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/Itruncated_normal_initializer.htm">Itruncated_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/ITypeSpec.htm">ITypeSpec</a>
        </li>
				<li>
            <a href="../tensorflow/IUnconnectedGradients.htm">IUnconnectedGradients</a>
        </li>
				<li>
            <a href="../tensorflow/Iuniform_unit_scaling_initializer.htm">Iuniform_unit_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IVariable.htm">IVariable</a>
        </li>
				<li>
            <a href="../tensorflow/Ivariable_scope.htm">Ivariable_scope</a>
        </li>
				<li>
            <a href="../tensorflow/IVariableScope.htm">IVariableScope</a>
        </li>
				<li>
            <a href="../tensorflow/Ivariance_scaling_initializer.htm">Ivariance_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/IVarLenFeature.htm">IVarLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/IWholeFileReader.htm">IWholeFileReader</a>
        </li>
				<li>
            <a href="../tensorflow/Izeros_initializer.htm">Izeros_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/LazyLoader.htm">LazyLoader</a>
        </li>
				<li>
            <a href="../tensorflow/LMDBReader.htm">LMDBReader</a>
        </li>
				<li>
            <a href="../tensorflow/Module.htm">Module</a>
        </li>
				<li>
            <a href="../tensorflow/name_scope.htm">name_scope</a>
        </li>
				<li>
            <a href="../tensorflow/ones_initializer.htm">ones_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Operation.htm">Operation</a>
        </li>
				<li>
            <a href="../tensorflow/Operation._InputList.htm">Operation._InputList</a>
        </li>
				<li>
            <a href="../tensorflow/Operation.I_InputList.htm">Operation.I_InputList</a>
        </li>
				<li>
            <a href="../tensorflow/OpError.htm">OpError</a>
        </li>
				<li>
            <a href="../tensorflow/OptionalSpec.htm">OptionalSpec</a>
        </li>
				<li>
            <a href="../tensorflow/orthogonal_initializer.htm">orthogonal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/PaddingFIFOQueue.htm">PaddingFIFOQueue</a>
        </li>
				<li>
            <a href="../tensorflow/PriorityQueue.htm">PriorityQueue</a>
        </li>
				<li>
            <a href="../tensorflow/QueueBase.htm">QueueBase</a>
        </li>
				<li>
            <a href="../tensorflow/RaggedTensor.htm">RaggedTensor</a>
        </li>
				<li>
            <a href="../tensorflow/RaggedTensorSpec.htm">RaggedTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/random_normal_initializer.htm">random_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/random_uniform_initializer.htm">random_uniform_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/RandomShuffleQueue.htm">RandomShuffleQueue</a>
        </li>
				<li>
            <a href="../tensorflow/ReaderBase.htm">ReaderBase</a>
        </li>
				<li>
            <a href="../tensorflow/RegisterGradient.htm">RegisterGradient</a>
        </li>
				<li>
            <a href="../tensorflow/Session.htm">Session</a>
        </li>
				<li>
            <a href="../tensorflow/SparseConditionalAccumulator.htm">SparseConditionalAccumulator</a>
        </li>
				<li>
            <a href="../tensorflow/SparseFeature.htm">SparseFeature</a>
        </li>
				<li>
            <a href="../tensorflow/SparseTensor.htm">SparseTensor</a>
        </li>
				<li>
            <a href="../tensorflow/SparseTensorSpec.htm">SparseTensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/SparseTensorValue.htm">SparseTensorValue</a>
        </li>
				<li>
            <a href="../tensorflow/Tensor.htm">Tensor</a>
        </li>
				<li>
            <a href="../tensorflow/Tensor`1.htm">Tensor&lt;T&gt;</a>
        </li>
				<li>
            <a href="../tensorflow/TensorArray.htm">TensorArray</a>
        </li>
				<li>
            <a href="../tensorflow/TensorArraySpec.htm">TensorArraySpec</a>
        </li>
				<li>
            <a href="../tensorflow/TensorDimension.htm">TensorDimension</a>
        </li>
				<li>
            <a href="../tensorflow/TensorDimensionSlice.htm">TensorDimensionSlice</a>
        </li>
				<li>
            <a href="../tensorflow/TensorShape.htm">TensorShape</a>
        </li>
				<li>
            <a href="../tensorflow/TensorSpec.htm">TensorSpec</a>
        </li>
				<li>
            <a href="../tensorflow/TextLineReader.htm">TextLineReader</a>
        </li>
				<li>
            <a href="../tensorflow/tf.htm">tf</a>
        </li>
				<li>
            <a href="../tensorflow/tf.audio.htm">tf.audio</a>
        </li>
				<li>
            <a href="../tensorflow/tf.autograph.htm">tf.autograph</a>
        </li>
				<li>
            <a href="../tensorflow/tf.autograph.experimental.htm">tf.autograph.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.bitwise.htm">tf.bitwise</a>
        </li>
				<li>
            <a href="../tensorflow/tf.compat.htm">tf.compat</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.htm">tf.config</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.experimental.htm">tf.config.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.optimizer.htm">tf.config.optimizer</a>
        </li>
				<li>
            <a href="../tensorflow/tf.config.threading.htm">tf.config.threading</a>
        </li>
				<li>
            <a href="../tensorflow/tf.data.htm">tf.data</a>
        </li>
				<li>
            <a href="../tensorflow/tf.data.experimental.htm">tf.data.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.debugging.htm">tf.debugging</a>
        </li>
				<li>
            <a href="../tensorflow/tf.distribute.htm">tf.distribute</a>
        </li>
				<li>
            <a href="../tensorflow/tf.distributions.htm">tf.distributions</a>
        </li>
				<li>
            <a href="../tensorflow/tf.errors.htm">tf.errors</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.htm">tf.estimator</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.experimental.htm">tf.estimator.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.export.htm">tf.estimator.export</a>
        </li>
				<li>
            <a href="../tensorflow/tf.estimator.inputs.htm">tf.estimator.inputs</a>
        </li>
				<li>
            <a href="../tensorflow/tf.experimental.htm">tf.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.feature_column.htm">tf.feature_column</a>
        </li>
				<li>
            <a href="../tensorflow/tf.gfile.htm">tf.gfile</a>
        </li>
				<li>
            <a href="../tensorflow/tf.graph_util.htm">tf.graph_util</a>
        </li>
				<li>
            <a href="../tensorflow/tf.image.htm">tf.image</a>
        </li>
				<li>
            <a href="../tensorflow/tf.initializers.htm">tf.initializers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.io.htm">tf.io</a>
        </li>
				<li>
            <a href="../tensorflow/tf.io.gfile.htm">tf.io.gfile</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.htm">tf.keras</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.activations.htm">tf.keras.activations</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.htm">tf.keras.applications</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.densenet.htm">tf.keras.applications.densenet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.imagenet_utils.htm">tf.keras.applications.imagenet_utils</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.inception_resnet_v2.htm">tf.keras.applications.inception_resnet_v2</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.inception_v3.htm">tf.keras.applications.inception_v3</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.mobilenet.htm">tf.keras.applications.mobilenet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.mobilenet_v2.htm">tf.keras.applications.mobilenet_v2</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.nasnet.htm">tf.keras.applications.nasnet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.resnet.htm">tf.keras.applications.resnet</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.resnet_v2.htm">tf.keras.applications.resnet_v2</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.vgg16.htm">tf.keras.applications.vgg16</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.vgg19.htm">tf.keras.applications.vgg19</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.applications.xception.htm">tf.keras.applications.xception</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.backend.htm">tf.keras.backend</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.constraints.htm">tf.keras.constraints</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.htm">tf.keras.datasets</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.boston_housing.htm">tf.keras.datasets.boston_housing</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.cifar10.htm">tf.keras.datasets.cifar10</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.cifar100.htm">tf.keras.datasets.cifar100</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.fashion_mnist.htm">tf.keras.datasets.fashion_mnist</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.imdb.htm">tf.keras.datasets.imdb</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.mnist.htm">tf.keras.datasets.mnist</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.datasets.reuters.htm">tf.keras.datasets.reuters</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.estimator.htm">tf.keras.estimator</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.experimental.htm">tf.keras.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.initializers.htm">tf.keras.initializers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.layers.htm">tf.keras.layers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.losses.htm">tf.keras.losses</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.metrics.htm">tf.keras.metrics</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.mixed_precision.htm">tf.keras.mixed_precision</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.mixed_precision.experimental.htm">tf.keras.mixed_precision.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.models.htm">tf.keras.models</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.optimizers.htm">tf.keras.optimizers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.optimizers.schedules.htm">tf.keras.optimizers.schedules</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.preprocessing.htm">tf.keras.preprocessing</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.preprocessing.image.htm">tf.keras.preprocessing.image</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.regularizers.htm">tf.keras.regularizers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.keras.utils.htm">tf.keras.utils</a>
        </li>
				<li>
            <a href="../tensorflow/tf.layers.htm">tf.layers</a>
        </li>
				<li>
            <a href="../tensorflow/tf.layers.experimental.htm">tf.layers.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.linalg.htm">tf.linalg</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.htm">tf.lite</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.htm">tf.lite.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.microfrontend.htm">tf.lite.experimental.microfrontend</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.microfrontend.python.htm">tf.lite.experimental.microfrontend.python</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.microfrontend.python.ops.htm">tf.lite.experimental.microfrontend.python.ops</a>
        </li>
				<li>
            <a href="../tensorflow/tf.lite.experimental.nn.htm">tf.lite.experimental.nn</a>
        </li>
				<li>
            <a href="../tensorflow/tf.logging.htm">tf.logging</a>
        </li>
				<li>
            <a href="../tensorflow/tf.losses.htm">tf.losses</a>
        </li>
				<li>
            <a href="../tensorflow/tf.math.htm">tf.math</a>
        </li>
				<li>
            <a href="../tensorflow/tf.metrics.htm">tf.metrics</a>
        </li>
				<li>
            <a href="../tensorflow/tf.nest.htm">tf.nest</a>
        </li>
				<li>
            <a href="../tensorflow/tf.nn.htm">tf.nn</a>
        </li>
				<li>
            <a href="../tensorflow/tf.profiler.htm">tf.profiler</a>
        </li>
				<li>
            <a href="../tensorflow/tf.quantization.htm">tf.quantization</a>
        </li>
				<li>
            <a href="../tensorflow/tf.ragged.htm">tf.ragged</a>
        </li>
				<li>
            <a href="../tensorflow/tf.random.htm">tf.random</a>
        </li>
				<li>
            <a href="../tensorflow/tf.random.experimental.htm">tf.random.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.resource_loader.htm">tf.resource_loader</a>
        </li>
				<li>
            <a href="../tensorflow/tf.saved_model.htm">tf.saved_model</a>
        </li>
				<li>
            <a href="../tensorflow/tf.saved_model.main_op.htm">tf.saved_model.main_op</a>
        </li>
				<li>
            <a href="../tensorflow/tf.sets.htm">tf.sets</a>
        </li>
				<li>
            <a href="../tensorflow/tf.signal.htm">tf.signal</a>
        </li>
				<li>
            <a href="../tensorflow/tf.sparse.htm">tf.sparse</a>
        </li>
				<li>
            <a href="../tensorflow/tf.strings.htm">tf.strings</a>
        </li>
				<li>
            <a href="../tensorflow/tf.summary.htm">tf.summary</a>
        </li>
				<li>
            <a href="../tensorflow/tf.summary.experimental.htm">tf.summary.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.sysconfig.htm">tf.sysconfig</a>
        </li>
				<li>
            <a href="../tensorflow/tf.test.htm">tf.test</a>
        </li>
				<li>
            <a href="../tensorflow/tf.tpu.htm">tf.tpu</a>
        </li>
				<li>
            <a href="../tensorflow/tf.tpu.experimental.htm">tf.tpu.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.train.htm">tf.train</a>
        </li>
				<li>
            <a href="../tensorflow/tf.train.experimental.htm">tf.train.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/tf.user_ops.htm">tf.user_ops</a>
        </li>
				<li>
            <a href="../tensorflow/tf.xla.htm">tf.xla</a>
        </li>
				<li>
            <a href="../tensorflow/tf.xla.experimental.htm">tf.xla.experimental</a>
        </li>
				<li>
            <a href="../tensorflow/TFRecordReader.htm">TFRecordReader</a>
        </li>
				<li>
            <a href="../tensorflow/truncated_normal_initializer.htm">truncated_normal_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/TypeSpec.htm">TypeSpec</a>
        </li>
				<li>
            <a href="../tensorflow/UnconnectedGradients.htm">UnconnectedGradients</a>
        </li>
				<li>
            <a href="../tensorflow/uniform_unit_scaling_initializer.htm">uniform_unit_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/Variable.htm">Variable</a>
        </li>
				<li>
            <a href="../tensorflow/variable_scope.htm">variable_scope</a>
        </li>
				<li>
            <a href="../tensorflow/VariableAggregation.htm">VariableAggregation</a>
        </li>
				<li>
            <a href="../tensorflow/VariableScope.htm">VariableScope</a>
        </li>
				<li>
            <a href="../tensorflow/VariableSynchronization.htm">VariableSynchronization</a>
        </li>
				<li>
            <a href="../tensorflow/variance_scaling_initializer.htm">variance_scaling_initializer</a>
        </li>
				<li>
            <a href="../tensorflow/VarLenFeature.htm">VarLenFeature</a>
        </li>
				<li>
            <a href="../tensorflow/WholeFileReader.htm">WholeFileReader</a>
        </li>
				<li>
            <a href="../tensorflow/zeros_initializer.htm">zeros_initializer</a>
        </li>
		</ul>
	</div>
</nav>
	<article>
    <header>
		<p class="class"><strong>Type</strong> Graph</p>
	</header>
	<section>
		<header>
		<p><strong>Namespace</strong> tensorflow</p>
		<p><strong>Parent</strong> <a href="../LostTech.Gradient/PythonObjectContainer.htm">PythonObjectContainer</a></p>
		<p><strong>Interfaces</strong> <a href="../tensorflow/IGraph.htm">IGraph</a></p>
		</header>
    <div class="sub-header">
			<div id="summary">A TensorFlow computation, represented as a dataflow graph. <p></p> A `Graph` contains a set of
<a href="..\tf\Operation.md"><code>tf.Operation</code></a> objects,
which represent units of computation; and
<a href="..\tf\Tensor.md"><code>tf.Tensor</code></a> objects, which represent
the units of data that flow between operations. <p></p> A default `Graph` is always registered, and accessible by calling
`tf.compat.v1.get_default_graph`.
To add an operation to the default graph, simply call one of the functions
that defines a new `Operation`:
Another typical usage involves the
<a href="..\tf\Graph\as_default.md"><code>tf.Graph.as_default</code></a>
context manager, which overrides the current default graph for the
lifetime of the context:
Important note: This class *is not* thread-safe for graph construction. All
operations should be created from a single thread, or external
synchronization must be provided. Unless otherwise specified, all methods
are not thread-safe. <p></p> A `Graph` instance supports an arbitrary number of "collections"
that are identified by name. For convenience when building a large
graph, collections can store groups of related objects: for
example, the <a href="..\tf\Variable.md"><code>tf.Variable</code></a> uses a collection (named
<a href="..\tf\GraphKeys\GLOBAL_VARIABLES.md"><code>tf.GraphKeys.GLOBAL_VARIABLES</code></a>) for
all variables that are created during the construction of a graph. The caller
may define additional collections by specifying a new name. <div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>c = tf.constant(4.0)
            assert c.graph is tf.compat.v1.get_default_graph() </pre>
</div>
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../tensorflow/Graph.htm#add_to_collection">add_to_collection</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collection">add_to_collection</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collection_dyn">add_to_collection_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections">add_to_collections</a></li>
				<li><a href="../tensorflow/Graph.htm#add_to_collections_dyn">add_to_collections_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#as_graph_def">as_graph_def</a></li>
				<li><a href="../tensorflow/Graph.htm#as_graph_def_dyn">as_graph_def_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#as_graph_element">as_graph_element</a></li>
				<li><a href="../tensorflow/Graph.htm#as_graph_element_dyn">as_graph_element_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#clear_collection">clear_collection</a></li>
				<li><a href="../tensorflow/Graph.htm#clear_collection_dyn">clear_collection_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#colocate_with">colocate_with</a></li>
				<li><a href="../tensorflow/Graph.htm#colocate_with">colocate_with</a></li>
				<li><a href="../tensorflow/Graph.htm#colocate_with">colocate_with</a></li>
				<li><a href="../tensorflow/Graph.htm#colocate_with">colocate_with</a></li>
				<li><a href="../tensorflow/Graph.htm#colocate_with_dyn">colocate_with_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#create_op">create_op</a></li>
				<li><a href="../tensorflow/Graph.htm#create_op">create_op</a></li>
				<li><a href="../tensorflow/Graph.htm#create_op_dyn">create_op_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#finalize">finalize</a></li>
				<li><a href="../tensorflow/Graph.htm#finalize_dyn">finalize_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#get_all_collection_keys">get_all_collection_keys</a></li>
				<li><a href="../tensorflow/Graph.htm#get_all_collection_keys_dyn">get_all_collection_keys_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#get_collection">get_collection</a></li>
				<li><a href="../tensorflow/Graph.htm#get_collection_dyn">get_collection_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#get_collection_ref">get_collection_ref</a></li>
				<li><a href="../tensorflow/Graph.htm#get_collection_ref">get_collection_ref</a></li>
				<li><a href="../tensorflow/Graph.htm#get_collection_ref_dyn">get_collection_ref_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#get_name_scope_dyn">get_name_scope_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#get_operation_by_name">get_operation_by_name</a></li>
				<li><a href="../tensorflow/Graph.htm#get_operation_by_name">get_operation_by_name</a></li>
				<li><a href="../tensorflow/Graph.htm#get_operation_by_name_dyn">get_operation_by_name_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#get_operations">get_operations</a></li>
				<li><a href="../tensorflow/Graph.htm#get_operations_dyn">get_operations_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#get_tensor_by_name">get_tensor_by_name</a></li>
				<li><a href="../tensorflow/Graph.htm#get_tensor_by_name_dyn">get_tensor_by_name_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#gradient_override_map">gradient_override_map</a></li>
				<li><a href="../tensorflow/Graph.htm#gradient_override_map_dyn">gradient_override_map_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#is_feedable">is_feedable</a></li>
				<li><a href="../tensorflow/Graph.htm#is_feedable_dyn">is_feedable_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#is_fetchable">is_fetchable</a></li>
				<li><a href="../tensorflow/Graph.htm#is_fetchable_dyn">is_fetchable_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#name_scope">name_scope</a></li>
				<li><a href="../tensorflow/Graph.htm#name_scope">name_scope</a></li>
				<li><a href="../tensorflow/Graph.htm#name_scope_dyn">name_scope_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#prevent_feeding">prevent_feeding</a></li>
				<li><a href="../tensorflow/Graph.htm#prevent_feeding_dyn">prevent_feeding_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#prevent_fetching">prevent_fetching</a></li>
				<li><a href="../tensorflow/Graph.htm#prevent_fetching">prevent_fetching</a></li>
				<li><a href="../tensorflow/Graph.htm#prevent_fetching_dyn">prevent_fetching_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#switch_to_thread_local">switch_to_thread_local</a></li>
				<li><a href="../tensorflow/Graph.htm#switch_to_thread_local_dyn">switch_to_thread_local_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#unique_name">unique_name</a></li>
				<li><a href="../tensorflow/Graph.htm#unique_name_dyn">unique_name_dyn</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../tensorflow/Graph.htm#building_function">building_function</a></li>
				<li><a href="../tensorflow/Graph.htm#building_function_dyn">building_function_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#collections">collections</a></li>
				<li><a href="../tensorflow/Graph.htm#collections_dyn">collections_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#finalized">finalized</a></li>
				<li><a href="../tensorflow/Graph.htm#finalized_dyn">finalized_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#graph_def_versions">graph_def_versions</a></li>
				<li><a href="../tensorflow/Graph.htm#graph_def_versions_dyn">graph_def_versions_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#PythonObject">PythonObject</a></li>
				<li><a href="../tensorflow/Graph.htm#seed">seed</a></li>
				<li><a href="../tensorflow/Graph.htm#seed_dyn">seed_dyn</a></li>
				<li><a href="../tensorflow/Graph.htm#version">version</a></li>
				<li><a href="../tensorflow/Graph.htm#version_dyn">version_dyn</a></li>
			</ul>
		
	</div>
	
	<h3 class="section">Public instance methods</h3>

	<div id="add_to_collection" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collection</strong>(<span title="System.string">string</span> name, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> value)
		</h4>
		<div class="content">Stores `value` in the collection with the given `name`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>The key for the collection. The `GraphKeys` class contains many
standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> value
						</dt>
						<dd>The value to add to the collection. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collection" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collection</strong>(<span title="System.string">string</span> name, <span title="System.object">object</span> value)
		</h4>
		<div class="content">Stores `value` in the collection with the given `name`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>The key for the collection. The `GraphKeys` class contains many
standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> value
						</dt>
						<dd>The value to add to the collection. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collection_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_to_collection_dyn</strong>(<span title="System.object">object</span> name, <span title="System.object">object</span> value)
		</h4>
		<div class="content">Stores `value` in the collection with the given `name`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>The key for the collection. The `GraphKeys` class contains many
standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> value
						</dt>
						<dd>The value to add to the collection. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> names, <a href="../tensorflow.python.distribute.values/DistributedDelegate.htm">DistributedDelegate</a> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><a href="../tensorflow.python.distribute.values/DistributedDelegate.htm">DistributedDelegate</a></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.string">string</span> names, <a href="../tensorflow.python.distribute.values/AggregatingVariable.htm">AggregatingVariable</a> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><a href="../tensorflow.python.distribute.values/AggregatingVariable.htm">AggregatingVariable</a></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.string">string</span> names, <span title="System.string">string</span> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> names, <a href="../tensorflow.python.distribute.values/AggregatingVariable.htm">AggregatingVariable</a> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><a href="../tensorflow.python.distribute.values/AggregatingVariable.htm">AggregatingVariable</a></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.string">string</span> names, <a href="../tensorflow.contrib.tpu.python.tpu.keras_tpu_variables/ReplicatedVariable.htm">ReplicatedVariable</a> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><a href="../tensorflow.contrib.tpu.python.tpu.keras_tpu_variables/ReplicatedVariable.htm">ReplicatedVariable</a></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.string">string</span> names, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.Collections.Generic.IEnumerator<string>">IEnumerator&lt;string&gt;</span> names, <span title="System.string">string</span> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerator<string>">IEnumerator&lt;string&gt;</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.string">string</span> names, <span title="System.object">object</span> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.Collections.Generic.IEnumerator<string>">IEnumerator&lt;string&gt;</span> names, <a href="../tensorflow.python.distribute.values/DistributedDelegate.htm">DistributedDelegate</a> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerator<string>">IEnumerator&lt;string&gt;</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><a href="../tensorflow.python.distribute.values/DistributedDelegate.htm">DistributedDelegate</a></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.Collections.Generic.IEnumerator<string>">IEnumerator&lt;string&gt;</span> names, <span title="System.object">object</span> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerator<string>">IEnumerator&lt;string&gt;</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.Collections.Generic.IEnumerator<string>">IEnumerator&lt;string&gt;</span> names, <a href="../tensorflow.contrib.tpu.python.tpu.keras_tpu_variables/ReplicatedVariable.htm">ReplicatedVariable</a> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerator<string>">IEnumerator&lt;string&gt;</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><a href="../tensorflow.contrib.tpu.python.tpu.keras_tpu_variables/ReplicatedVariable.htm">ReplicatedVariable</a></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.Collections.Generic.IEnumerator<string>">IEnumerator&lt;string&gt;</span> names, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerator<string>">IEnumerator&lt;string&gt;</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> names, <span title="System.string">string</span> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> names, <span title="System.object">object</span> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> names, <a href="../tensorflow.contrib.tpu.python.tpu.keras_tpu_variables/ReplicatedVariable.htm">ReplicatedVariable</a> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><a href="../tensorflow.contrib.tpu.python.tpu.keras_tpu_variables/ReplicatedVariable.htm">ReplicatedVariable</a></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> names, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.Collections.Generic.IEnumerator<string>">IEnumerator&lt;string&gt;</span> names, <a href="../tensorflow.python.distribute.values/AggregatingVariable.htm">AggregatingVariable</a> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerator<string>">IEnumerator&lt;string&gt;</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><a href="../tensorflow.python.distribute.values/AggregatingVariable.htm">AggregatingVariable</a></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_to_collections</strong>(<span title="System.string">string</span> names, <a href="../tensorflow.python.distribute.values/DistributedDelegate.htm">DistributedDelegate</a> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><a href="../tensorflow.python.distribute.values/DistributedDelegate.htm">DistributedDelegate</a></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="add_to_collections_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_to_collections_dyn</strong>(<span title="System.object">object</span> names, <span title="System.object">object</span> value)
		</h4>
		<div class="content">Stores `value` in the collections given by `names`. <p></p> Note that collections are not sets, so it is possible to add a value to
a collection several times. This function makes sure that duplicates in
`names` are ignored, but it will not check for pre-existing membership of
`value` in any of the collections in `names`. <p></p> `names` can be any iterable, but if `names` is a string, it is treated as a
single collection name. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> names
						</dt>
						<dd>The keys for the collections to add to. The `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> value
						</dt>
						<dd>The value to add to the collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="as_graph_def" class="method">
		<h4>
			<span title="System.object">object</span> <strong>as_graph_def</strong>(<span title="System.object">object</span> from_version, <span title="System.bool">bool</span> add_shapes)
		</h4>
		<div class="content">Returns a serialized `GraphDef` representation of this graph. <p></p> The serialized `GraphDef` can be imported into another `Graph`
(using <a href="..\tf\graph_util\import_graph_def.md"><code>tf.import_graph_def</code></a>) or used with the
[C++ Session API](../../api_docs/cc/index.md). <p></p> This method is thread-safe. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> from_version
						</dt>
						<dd>Optional.  If this is set, returns a `GraphDef` containing
only the nodes that were added to this graph since its `version`
property had the given value. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> add_shapes
						</dt>
						<dd>If true, adds an "_output_shapes" list attr to each node with
the inferred shapes of each of its outputs. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A
[`GraphDef`](https://www.tensorflow.org/code/tensorflow/core/framework/graph.proto)
protocol buffer. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="as_graph_def_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>as_graph_def_dyn</strong>(<span title="System.object">object</span> from_version, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> add_shapes)
		</h4>
		<div class="content">Returns a serialized `GraphDef` representation of this graph. <p></p> The serialized `GraphDef` can be imported into another `Graph`
(using <a href="..\tf\graph_util\import_graph_def.md"><code>tf.import_graph_def</code></a>) or used with the
[C++ Session API](../../api_docs/cc/index.md). <p></p> This method is thread-safe. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> from_version
						</dt>
						<dd>Optional.  If this is set, returns a `GraphDef` containing
only the nodes that were added to this graph since its `version`
property had the given value. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> add_shapes
						</dt>
						<dd>If true, adds an "_output_shapes" list attr to each node with
the inferred shapes of each of its outputs. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A
[`GraphDef`](https://www.tensorflow.org/code/tensorflow/core/framework/graph.proto)
protocol buffer. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="as_graph_element" class="method">
		<h4>
			<span title="System.object">object</span> <strong>as_graph_element</strong>(<span title="System.object">object</span> obj, <span title="System.bool">bool</span> allow_tensor, <span title="System.bool">bool</span> allow_operation)
		</h4>
		<div class="content">Returns the object referred to by `obj`, as an `Operation` or `Tensor`. <p></p> This function validates that `obj` represents an element of this
graph, and gives an informative error message if it is not. <p></p> This function is the canonical way to get/validate an object of
one of the allowed types from an external argument reference in the
Session API. <p></p> This method may be called concurrently from multiple threads. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> obj
						</dt>
						<dd>A `Tensor`, an `Operation`, or the name of a tensor or operation. Can
also be any object with an `_as_graph_element()` method that returns a
value of one of these types. Note: `_as_graph_element` will be called
inside the graph's lock and so may not modify the graph. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> allow_tensor
						</dt>
						<dd>If true, `obj` may refer to a `Tensor`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> allow_operation
						</dt>
						<dd>If true, `obj` may refer to an `Operation`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The `Tensor` or `Operation` in the Graph corresponding to `obj`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="as_graph_element_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>as_graph_element_dyn</strong>(<span title="System.object">object</span> obj, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> allow_tensor, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> allow_operation)
		</h4>
		<div class="content">Returns the object referred to by `obj`, as an `Operation` or `Tensor`. <p></p> This function validates that `obj` represents an element of this
graph, and gives an informative error message if it is not. <p></p> This function is the canonical way to get/validate an object of
one of the allowed types from an external argument reference in the
Session API. <p></p> This method may be called concurrently from multiple threads. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> obj
						</dt>
						<dd>A `Tensor`, an `Operation`, or the name of a tensor or operation. Can
also be any object with an `_as_graph_element()` method that returns a
value of one of these types. Note: `_as_graph_element` will be called
inside the graph's lock and so may not modify the graph. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> allow_tensor
						</dt>
						<dd>If true, `obj` may refer to a `Tensor`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> allow_operation
						</dt>
						<dd>If true, `obj` may refer to an `Operation`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The `Tensor` or `Operation` in the Graph corresponding to `obj`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="clear_collection" class="method">
		<h4>
			<span title="System.void">void</span> <strong>clear_collection</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Clears all values in a collection. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>The key for the collection. The `GraphKeys` class contains many
standard names for collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="clear_collection_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>clear_collection_dyn</strong>(<span title="System.object">object</span> name)
		</h4>
		<div class="content">Clears all values in a collection. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>The key for the collection. The `GraphKeys` class contains many
standard names for collections. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="colocate_with" class="method">
		<h4>
			<a href="../LostTech.Gradient/IContextManager`1.htm">IContextManager&lt;T&gt;</a> <strong>colocate_with</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> op, <span title="System.bool">bool</span> ignore_existing)
		</h4>
		<div class="content">Returns a context manager that specifies an op to colocate with. <p></p> Note: this function is not for public use, only for internal libraries.
`b` and `c` will always be colocated with `a`, no matter where `a`
is eventually placed. <p></p> **NOTE** Using a colocation scope resets any existing device constraints. <p></p> If `op` is `None` then `ignore_existing` must be `True` and the new
scope resets all colocation and device constraints. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> op
						</dt>
						<dd>The op to colocate all created ops with, or `None`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> ignore_existing
						</dt>
						<dd>If true, only applies colocation of this op within the
context, rather than applying all colocation properties on the stack.
If `op` is `None`, this value must be `True`. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>a = tf.Variable([1.0])
            with g.colocate_with(a):
              b = tf.constant(1.0)
              c = tf.add(a, b) </pre>
</div>
		</div>
	</div>
	<div id="colocate_with" class="method">
		<h4>
			<a href="../LostTech.Gradient/IContextManager`1.htm">IContextManager&lt;T&gt;</a> <strong>colocate_with</strong>(<a href="../tensorflow/Operation.htm">Operation</a> op, <span title="System.bool">bool</span> ignore_existing)
		</h4>
		<div class="content">Returns a context manager that specifies an op to colocate with. <p></p> Note: this function is not for public use, only for internal libraries.
`b` and `c` will always be colocated with `a`, no matter where `a`
is eventually placed. <p></p> **NOTE** Using a colocation scope resets any existing device constraints. <p></p> If `op` is `None` then `ignore_existing` must be `True` and the new
scope resets all colocation and device constraints. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/Operation.htm">Operation</a></code> op
						</dt>
						<dd>The op to colocate all created ops with, or `None`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> ignore_existing
						</dt>
						<dd>If true, only applies colocation of this op within the
context, rather than applying all colocation properties on the stack.
If `op` is `None`, this value must be `True`. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>a = tf.Variable([1.0])
            with g.colocate_with(a):
              b = tf.constant(1.0)
              c = tf.add(a, b) </pre>
</div>
		</div>
	</div>
	<div id="colocate_with" class="method">
		<h4>
			<a href="../LostTech.Gradient/IContextManager`1.htm">IContextManager&lt;T&gt;</a> <strong>colocate_with</strong>(<span title="System.object">object</span> op, <span title="System.bool">bool</span> ignore_existing)
		</h4>
		<div class="content">Returns a context manager that specifies an op to colocate with. <p></p> Note: this function is not for public use, only for internal libraries.
`b` and `c` will always be colocated with `a`, no matter where `a`
is eventually placed. <p></p> **NOTE** Using a colocation scope resets any existing device constraints. <p></p> If `op` is `None` then `ignore_existing` must be `True` and the new
scope resets all colocation and device constraints. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> op
						</dt>
						<dd>The op to colocate all created ops with, or `None`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> ignore_existing
						</dt>
						<dd>If true, only applies colocation of this op within the
context, rather than applying all colocation properties on the stack.
If `op` is `None`, this value must be `True`. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>a = tf.Variable([1.0])
            with g.colocate_with(a):
              b = tf.constant(1.0)
              c = tf.add(a, b) </pre>
</div>
		</div>
	</div>
	<div id="colocate_with" class="method">
		<h4>
			<a href="../LostTech.Gradient/IContextManager`1.htm">IContextManager&lt;T&gt;</a> <strong>colocate_with</strong>(<a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> op, <span title="System.bool">bool</span> ignore_existing)
		</h4>
		<div class="content">Returns a context manager that specifies an op to colocate with. <p></p> Note: this function is not for public use, only for internal libraries.
`b` and `c` will always be colocated with `a`, no matter where `a`
is eventually placed. <p></p> **NOTE** Using a colocation scope resets any existing device constraints. <p></p> If `op` is `None` then `ignore_existing` must be `True` and the new
scope resets all colocation and device constraints. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> op
						</dt>
						<dd>The op to colocate all created ops with, or `None`. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> ignore_existing
						</dt>
						<dd>If true, only applies colocation of this op within the
context, rather than applying all colocation properties on the stack.
If `op` is `None`, this value must be `True`. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>a = tf.Variable([1.0])
            with g.colocate_with(a):
              b = tf.constant(1.0)
              c = tf.add(a, b) </pre>
</div>
		</div>
	</div>
	<div id="colocate_with_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>colocate_with_dyn</strong>(<span title="System.object">object</span> op, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> ignore_existing)
		</h4>
		<div class="content">Returns a context manager that specifies an op to colocate with. <p></p> Note: this function is not for public use, only for internal libraries.
`b` and `c` will always be colocated with `a`, no matter where `a`
is eventually placed. <p></p> **NOTE** Using a colocation scope resets any existing device constraints. <p></p> If `op` is `None` then `ignore_existing` must be `True` and the new
scope resets all colocation and device constraints. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> op
						</dt>
						<dd>The op to colocate all created ops with, or `None`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> ignore_existing
						</dt>
						<dd>If true, only applies colocation of this op within the
context, rather than applying all colocation properties on the stack.
If `op` is `None`, this value must be `True`. 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>a = tf.Variable([1.0])
            with g.colocate_with(a):
              b = tf.constant(1.0)
              c = tf.add(a, b) </pre>
</div>
		</div>
	</div>
	<div id="create_op" class="method">
		<h4>
			<a href="../tensorflow/Operation.htm">Operation</a> <strong>create_op</strong>(<span title="System.string">string</span> op_type, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> inputs, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> dtypes, <span title="System.Collections.Generic.IEnumerable<DType>">IEnumerable&lt;DType&gt;</span> input_types, <span title="System.string">string</span> name, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> attrs, <span title="System.object">object</span> op_def, <span title="System.bool">bool</span> compute_shapes, <span title="System.bool">bool</span> compute_device)
		</h4>
		<div class="content">Creates an `Operation` in this graph. (deprecated arguments) <p></p> Warning: SOME ARGUMENTS ARE DEPRECATED: `(compute_shapes)`. They will be removed in a future version.
Instructions for updating:
Shapes are always computed; don't use the compute_shapes as it has no effect. <p></p> This is a low-level interface for creating an `Operation`. Most
programs will not call this method directly, and instead use the
Python op constructors, such as `tf.constant()`, which add ops to
the default graph. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> op_type
						</dt>
						<dd>The `Operation` type to create. This corresponds to the
`OpDef.name` field for the proto that defines the operation. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> inputs
						</dt>
						<dd>A list of `Tensor` objects that will be inputs to the `Operation`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> dtypes
						</dt>
						<dd>(Optional) A list of `DType` objects that will be the types of the
tensors that the operation produces. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<DType>">IEnumerable&lt;DType&gt;</span></code> input_types
						</dt>
						<dd>(Optional.) A list of `DType`s that will be the types of the
tensors that the operation consumes. By default, uses the base `DType`
of each input in `inputs`. Operations that expect reference-typed inputs
must specify `input_types` explicitly. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>(Optional.) A string name for the operation. If not specified, a
name is generated based on `op_type`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> attrs
						</dt>
						<dd>(Optional.) A dictionary where the key is the attribute name (a
string) and the value is the respective `attr` attribute of the
`NodeDef` proto that will represent the operation (an `AttrValue`
proto). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> op_def
						</dt>
						<dd>(Optional.) The `OpDef` proto that describes the `op_type` that
the operation will have. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> compute_shapes
						</dt>
						<dd>(Optional.) Deprecated. Has no effect (shapes are always
computed). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> compute_device
						</dt>
						<dd>(Optional.) If True, device functions will be executed to
compute the device property of the Operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Operation.htm">Operation</a></code>
					</dt>
					<dd>An `Operation` object. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="create_op" class="method">
		<h4>
			<a href="../tensorflow/Operation.htm">Operation</a> <strong>create_op</strong>(<span title="System.string">string</span> op_type, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> inputs, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> dtypes, <span title="System.Collections.Generic.IEnumerable<DType>">IEnumerable&lt;DType&gt;</span> input_types, <span title="System.int">int</span> name, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> attrs, <span title="System.object">object</span> op_def, <span title="System.bool">bool</span> compute_shapes, <span title="System.bool">bool</span> compute_device)
		</h4>
		<div class="content">Creates an `Operation` in this graph. (deprecated arguments) <p></p> Warning: SOME ARGUMENTS ARE DEPRECATED: `(compute_shapes)`. They will be removed in a future version.
Instructions for updating:
Shapes are always computed; don't use the compute_shapes as it has no effect. <p></p> This is a low-level interface for creating an `Operation`. Most
programs will not call this method directly, and instead use the
Python op constructors, such as `tf.constant()`, which add ops to
the default graph. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> op_type
						</dt>
						<dd>The `Operation` type to create. This corresponds to the
`OpDef.name` field for the proto that defines the operation. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> inputs
						</dt>
						<dd>A list of `Tensor` objects that will be inputs to the `Operation`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> dtypes
						</dt>
						<dd>(Optional) A list of `DType` objects that will be the types of the
tensors that the operation produces. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<DType>">IEnumerable&lt;DType&gt;</span></code> input_types
						</dt>
						<dd>(Optional.) A list of `DType`s that will be the types of the
tensors that the operation consumes. By default, uses the base `DType`
of each input in `inputs`. Operations that expect reference-typed inputs
must specify `input_types` explicitly. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> name
						</dt>
						<dd>(Optional.) A string name for the operation. If not specified, a
name is generated based on `op_type`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> attrs
						</dt>
						<dd>(Optional.) A dictionary where the key is the attribute name (a
string) and the value is the respective `attr` attribute of the
`NodeDef` proto that will represent the operation (an `AttrValue`
proto). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> op_def
						</dt>
						<dd>(Optional.) The `OpDef` proto that describes the `op_type` that
the operation will have. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> compute_shapes
						</dt>
						<dd>(Optional.) Deprecated. Has no effect (shapes are always
computed). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> compute_device
						</dt>
						<dd>(Optional.) If True, device functions will be executed to
compute the device property of the Operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Operation.htm">Operation</a></code>
					</dt>
					<dd>An `Operation` object. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="create_op_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>create_op_dyn</strong>(<span title="System.object">object</span> op_type, <span title="System.object">object</span> inputs, <span title="System.object">object</span> dtypes, <span title="System.object">object</span> input_types, <span title="System.object">object</span> name, <span title="System.object">object</span> attrs, <span title="System.object">object</span> op_def, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> compute_shapes, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> compute_device)
		</h4>
		<div class="content">Creates an `Operation` in this graph. (deprecated arguments) <p></p> Warning: SOME ARGUMENTS ARE DEPRECATED: `(compute_shapes)`. They will be removed in a future version.
Instructions for updating:
Shapes are always computed; don't use the compute_shapes as it has no effect. <p></p> This is a low-level interface for creating an `Operation`. Most
programs will not call this method directly, and instead use the
Python op constructors, such as `tf.constant()`, which add ops to
the default graph. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> op_type
						</dt>
						<dd>The `Operation` type to create. This corresponds to the
`OpDef.name` field for the proto that defines the operation. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> inputs
						</dt>
						<dd>A list of `Tensor` objects that will be inputs to the `Operation`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> dtypes
						</dt>
						<dd>(Optional) A list of `DType` objects that will be the types of the
tensors that the operation produces. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> input_types
						</dt>
						<dd>(Optional.) A list of `DType`s that will be the types of the
tensors that the operation consumes. By default, uses the base `DType`
of each input in `inputs`. Operations that expect reference-typed inputs
must specify `input_types` explicitly. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>(Optional.) A string name for the operation. If not specified, a
name is generated based on `op_type`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> attrs
						</dt>
						<dd>(Optional.) A dictionary where the key is the attribute name (a
string) and the value is the respective `attr` attribute of the
`NodeDef` proto that will represent the operation (an `AttrValue`
proto). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> op_def
						</dt>
						<dd>(Optional.) The `OpDef` proto that describes the `op_type` that
the operation will have. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> compute_shapes
						</dt>
						<dd>(Optional.) Deprecated. Has no effect (shapes are always
computed). 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> compute_device
						</dt>
						<dd>(Optional.) If True, device functions will be executed to
compute the device property of the Operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>An `Operation` object. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="finalize" class="method">
		<h4>
			<span title="System.void">void</span> <strong>finalize</strong>()
		</h4>
		<div class="content">Creates operations if needed and finalizes the graph. 




		</div>
	</div>
	<div id="finalize_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>finalize_dyn</strong>()
		</h4>
		<div class="content">Creates operations if needed and finalizes the graph. 




		</div>
	</div>
	<div id="get_all_collection_keys" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>get_all_collection_keys</strong>()
		</h4>
		<div class="content">Returns a list of collections used in this graph. 




		</div>
	</div>
	<div id="get_all_collection_keys_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_all_collection_keys_dyn</strong>()
		</h4>
		<div class="content">Returns a list of collections used in this graph. 




		</div>
	</div>
	<div id="get_collection" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>get_collection</strong>(<span title="System.string">string</span> name, <span title="System.object">object</span> scope)
		</h4>
		<div class="content">Returns a list of values in the collection with the given `name`. <p></p> This is different from `get_collection_ref()` which always returns the
actual collection list if it exists in that it returns a new list each time
it is called. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>The key for the collection. For example, the `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> scope
						</dt>
						<dd>(Optional.) A string. If supplied, the resulting list is filtered
to include only items whose `name` attribute matches `scope` using
`re.match`. Items without a `name` attribute are never returned if a
scope is supplied. The choice of `re.match` means that a `scope` without
special tokens filters by prefix. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span></code>
					</dt>
					<dd>The list of values in the collection with the given `name`, or
an empty list if no value has been added to that collection. The
list contains the values in the order under which they were
collected. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_collection_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_collection_dyn</strong>(<span title="System.object">object</span> name, <span title="System.object">object</span> scope)
		</h4>
		<div class="content">Returns a list of values in the collection with the given `name`. <p></p> This is different from `get_collection_ref()` which always returns the
actual collection list if it exists in that it returns a new list each time
it is called. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>The key for the collection. For example, the `GraphKeys` class
contains many standard names for collections. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> scope
						</dt>
						<dd>(Optional.) A string. If supplied, the resulting list is filtered
to include only items whose `name` attribute matches `scope` using
`re.match`. Items without a `name` attribute are never returned if a
scope is supplied. The choice of `re.match` means that a `scope` without
special tokens filters by prefix. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The list of values in the collection with the given `name`, or
an empty list if no value has been added to that collection. The
list contains the values in the order under which they were
collected. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_collection_ref" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>get_collection_ref</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> name)
		</h4>
		<div class="content">Returns a list of values in the collection with the given `name`. <p></p> If the collection exists, this returns the list itself, which can
be modified in place to change the collection.  If the collection does
not exist, it is created as an empty list and the list is returned. <p></p> This is different from `get_collection()` which always returns a copy of
the collection list if it exists and never creates an empty collection. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> name
						</dt>
						<dd>The key for the collection. For example, the `GraphKeys` class
contains many standard names for collections. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span></code>
					</dt>
					<dd>The list of values in the collection with the given `name`, or an empty
list if no value has been added to that collection. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_collection_ref" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>get_collection_ref</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Returns a list of values in the collection with the given `name`. <p></p> If the collection exists, this returns the list itself, which can
be modified in place to change the collection.  If the collection does
not exist, it is created as an empty list and the list is returned. <p></p> This is different from `get_collection()` which always returns a copy of
the collection list if it exists and never creates an empty collection. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>The key for the collection. For example, the `GraphKeys` class
contains many standard names for collections. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span></code>
					</dt>
					<dd>The list of values in the collection with the given `name`, or an empty
list if no value has been added to that collection. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_collection_ref_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_collection_ref_dyn</strong>(<span title="System.object">object</span> name)
		</h4>
		<div class="content">Returns a list of values in the collection with the given `name`. <p></p> If the collection exists, this returns the list itself, which can
be modified in place to change the collection.  If the collection does
not exist, it is created as an empty list and the list is returned. <p></p> This is different from `get_collection()` which always returns a copy of
the collection list if it exists and never creates an empty collection. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>The key for the collection. For example, the `GraphKeys` class
contains many standard names for collections. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The list of values in the collection with the given `name`, or an empty
list if no value has been added to that collection. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_name_scope_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_name_scope_dyn</strong>()
		</h4>
		<div class="content">Returns the current name scope.
would print the string `scope1/scope2`. 



			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A string representing the current name scope. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>with tf.name_scope('scope1'):
              with tf.name_scope('scope2'):
                print(tf.compat.v1.get_default_graph().get_name_scope()) </pre>
</div>
		</div>
	</div>
	<div id="get_operation_by_name" class="method">
		<h4>
			<a href="../tensorflow/Operation.htm">Operation</a> <strong>get_operation_by_name</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Returns the `Operation` with the given `name`. <p></p> This method may be called concurrently from multiple threads. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>The name of the `Operation` to return. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Operation.htm">Operation</a></code>
					</dt>
					<dd>The `Operation` with the given `name`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_operation_by_name" class="method">
		<h4>
			<a href="../tensorflow/Operation.htm">Operation</a> <strong>get_operation_by_name</strong>(<span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span> name)
		</h4>
		<div class="content">Returns the `Operation` with the given `name`. <p></p> This method may be called concurrently from multiple threads. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<string>">IEnumerable&lt;string&gt;</span></code> name
						</dt>
						<dd>The name of the `Operation` to return. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Operation.htm">Operation</a></code>
					</dt>
					<dd>The `Operation` with the given `name`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_operation_by_name_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_operation_by_name_dyn</strong>(<span title="System.object">object</span> name)
		</h4>
		<div class="content">Returns the `Operation` with the given `name`. <p></p> This method may be called concurrently from multiple threads. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>The name of the `Operation` to return. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The `Operation` with the given `name`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_operations" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>get_operations</strong>()
		</h4>
		<div class="content">Return the list of operations in the graph. <p></p> You can modify the operations in place, but modifications
to the list such as inserts/delete have no effect on the
list of operations known to the graph. <p></p> This method may be called concurrently from multiple threads. 



			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span></code>
					</dt>
					<dd>A list of Operations. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_operations_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_operations_dyn</strong>()
		</h4>
		<div class="content">Return the list of operations in the graph. <p></p> You can modify the operations in place, but modifications
to the list such as inserts/delete have no effect on the
list of operations known to the graph. <p></p> This method may be called concurrently from multiple threads. 



			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A list of Operations. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_tensor_by_name" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>get_tensor_by_name</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Returns the `Tensor` with the given `name`. <p></p> This method may be called concurrently from multiple threads. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>The name of the `Tensor` to return. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>The `Tensor` with the given `name`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_tensor_by_name_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_tensor_by_name_dyn</strong>(<span title="System.object">object</span> name)
		</h4>
		<div class="content">Returns the `Tensor` with the given `name`. <p></p> This method may be called concurrently from multiple threads. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>The name of the `Tensor` to return. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The `Tensor` with the given `name`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="gradient_override_map" class="method">
		<h4>
			<a href="../LostTech.Gradient/IContextManager`1.htm">IContextManager&lt;T&gt;</a> <strong>gradient_override_map</strong>(<span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> op_type_map)
		</h4>
		<div class="content">EXPERIMENTAL: A context manager for overriding gradient functions. <p></p> This context manager can be used to override the gradient function
that will be used for ops within the scope of the context. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> op_type_map
						</dt>
						<dd>A dictionary mapping op type strings to alternative op type
strings. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../LostTech.Gradient/IContextManager`1.htm">IContextManager&lt;T&gt;</a></code>
					</dt>
					<dd>A context manager that sets the alternative op type to be used for one
or more ops created in that context. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>@tf.RegisterGradient("CustomSquare")
            def _custom_square_grad(op, grad):
              #... <p></p> with tf.Graph().as_default() as g:
  c = tf.constant(5.0)
  s_1 = tf.square(c)  # Uses the default gradient for tf.square.
  with g.gradient_override_map({"Square": "CustomSquare"}):
    s_2 = tf.square(s_2)  # Uses _custom_square_grad to compute the
                          # gradient of s_2. </pre>
</div>
		</div>
	</div>
	<div id="gradient_override_map_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>gradient_override_map_dyn</strong>(<span title="System.object">object</span> op_type_map)
		</h4>
		<div class="content">EXPERIMENTAL: A context manager for overriding gradient functions. <p></p> This context manager can be used to override the gradient function
that will be used for ops within the scope of the context. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> op_type_map
						</dt>
						<dd>A dictionary mapping op type strings to alternative op type
strings. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A context manager that sets the alternative op type to be used for one
or more ops created in that context. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>@tf.RegisterGradient("CustomSquare")
            def _custom_square_grad(op, grad):
              #... <p></p> with tf.Graph().as_default() as g:
  c = tf.constant(5.0)
  s_1 = tf.square(c)  # Uses the default gradient for tf.square.
  with g.gradient_override_map({"Square": "CustomSquare"}):
    s_2 = tf.square(s_2)  # Uses _custom_square_grad to compute the
                          # gradient of s_2. </pre>
</div>
		</div>
	</div>
	<div id="is_feedable" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>is_feedable</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> tensor)
		</h4>
		<div class="content">Returns `True` if and only if `tensor` is feedable. 




		</div>
	</div>
	<div id="is_feedable_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_feedable_dyn</strong>(<span title="System.object">object</span> tensor)
		</h4>
		<div class="content">Returns `True` if and only if `tensor` is feedable. 




		</div>
	</div>
	<div id="is_fetchable" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>is_fetchable</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> tensor_or_op)
		</h4>
		<div class="content">Returns `True` if and only if `tensor_or_op` is fetchable. 




		</div>
	</div>
	<div id="is_fetchable_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>is_fetchable_dyn</strong>(<span title="System.object">object</span> tensor_or_op)
		</h4>
		<div class="content">Returns `True` if and only if `tensor_or_op` is fetchable. 




		</div>
	</div>
	<div id="name_scope" class="method">
		<h4>
			<a href="../LostTech.Gradient/IContextManager`1.htm">IContextManager&lt;T&gt;</a> <strong>name_scope</strong>(<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> name)
		</h4>
		<div class="content">Returns a context manager that creates hierarchical names for operations. <p></p> A graph maintains a stack of name scopes. A `with name_scope(...):`
statement pushes a new name onto the stack for the lifetime of the context. <p></p> The `name` argument will be interpreted as follows: <p></p> * A string (not ending with '/') will create a new name scope, in which
`name` is appended to the prefix of all operations created in the
context. If `name` has been used before, it will be made unique by
calling `self.unique_name(name)`.
* A scope previously captured from a `with g.name_scope(...) as
scope:` statement will be treated as an "absolute" name scope, which
makes it possible to re-enter existing scopes.
* A value of `None` or the empty string will reset the current name scope
to the top-level (empty) name scope.
The name of the scope itself can be captured by `with
g.name_scope(...) as scope:`, which stores the name of the scope
in the variable `scope`. This value can be used to name an
operation that represents the overall result of executing the ops
in a scope.
NOTE: This constructor validates the given `name`. Valid scope
names match one of the following regular expressions: <p></p> [A-Za-z0-9.][A-Za-z0-9_.\-/]* (for scopes at the root)
[A-Za-z0-9_.\-/]* (for other scopes) 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> name
						</dt>
						<dd>A name for the scope. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../LostTech.Gradient/IContextManager`1.htm">IContextManager&lt;T&gt;</a></code>
					</dt>
					<dd>A context manager that installs `name` as a new name scope. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>with tf.Graph().as_default() as g:
              c = tf.constant(5.0, name="c")
              assert c.op.name == "c"
              c_1 = tf.constant(6.0, name="c")
              assert c_1.op.name == "c_1" <p></p> # Creates a scope called "nested"
with g.name_scope("nested") as scope:
  nested_c = tf.constant(10.0, name="c")
  assert nested_c.op.name == "nested/c" <p></p> # Creates a nested scope called "inner".
with g.name_scope("inner"):
  nested_inner_c = tf.constant(20.0, name="c")
  assert nested_inner_c.op.name == "nested/inner/c" <p></p> # Create a nested scope called "inner_1".
with g.name_scope("inner"):
  nested_inner_1_c = tf.constant(30.0, name="c")
  assert nested_inner_1_c.op.name == "nested/inner_1/c" <p></p> # Treats `scope` as an absolute name scope, and
# switches to the "nested/" scope.
with g.name_scope(scope):
  nested_d = tf.constant(40.0, name="d")
  assert nested_d.op.name == "nested/d" <p></p> with g.name_scope(""):
  e = tf.constant(50.0, name="e")
  assert e.op.name == "e" </pre>
</div>
		</div>
	</div>
	<div id="name_scope" class="method">
		<h4>
			<a href="../LostTech.Gradient/IContextManager`1.htm">IContextManager&lt;T&gt;</a> <strong>name_scope</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Returns a context manager that creates hierarchical names for operations. <p></p> A graph maintains a stack of name scopes. A `with name_scope(...):`
statement pushes a new name onto the stack for the lifetime of the context. <p></p> The `name` argument will be interpreted as follows: <p></p> * A string (not ending with '/') will create a new name scope, in which
`name` is appended to the prefix of all operations created in the
context. If `name` has been used before, it will be made unique by
calling `self.unique_name(name)`.
* A scope previously captured from a `with g.name_scope(...) as
scope:` statement will be treated as an "absolute" name scope, which
makes it possible to re-enter existing scopes.
* A value of `None` or the empty string will reset the current name scope
to the top-level (empty) name scope.
The name of the scope itself can be captured by `with
g.name_scope(...) as scope:`, which stores the name of the scope
in the variable `scope`. This value can be used to name an
operation that represents the overall result of executing the ops
in a scope.
NOTE: This constructor validates the given `name`. Valid scope
names match one of the following regular expressions: <p></p> [A-Za-z0-9.][A-Za-z0-9_.\-/]* (for scopes at the root)
[A-Za-z0-9_.\-/]* (for other scopes) 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the scope. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../LostTech.Gradient/IContextManager`1.htm">IContextManager&lt;T&gt;</a></code>
					</dt>
					<dd>A context manager that installs `name` as a new name scope. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>with tf.Graph().as_default() as g:
              c = tf.constant(5.0, name="c")
              assert c.op.name == "c"
              c_1 = tf.constant(6.0, name="c")
              assert c_1.op.name == "c_1" <p></p> # Creates a scope called "nested"
with g.name_scope("nested") as scope:
  nested_c = tf.constant(10.0, name="c")
  assert nested_c.op.name == "nested/c" <p></p> # Creates a nested scope called "inner".
with g.name_scope("inner"):
  nested_inner_c = tf.constant(20.0, name="c")
  assert nested_inner_c.op.name == "nested/inner/c" <p></p> # Create a nested scope called "inner_1".
with g.name_scope("inner"):
  nested_inner_1_c = tf.constant(30.0, name="c")
  assert nested_inner_1_c.op.name == "nested/inner_1/c" <p></p> # Treats `scope` as an absolute name scope, and
# switches to the "nested/" scope.
with g.name_scope(scope):
  nested_d = tf.constant(40.0, name="d")
  assert nested_d.op.name == "nested/d" <p></p> with g.name_scope(""):
  e = tf.constant(50.0, name="e")
  assert e.op.name == "e" </pre>
</div>
		</div>
	</div>
	<div id="name_scope_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name_scope_dyn</strong>(<span title="System.object">object</span> name)
		</h4>
		<div class="content">Returns a context manager that creates hierarchical names for operations. <p></p> A graph maintains a stack of name scopes. A `with name_scope(...):`
statement pushes a new name onto the stack for the lifetime of the context. <p></p> The `name` argument will be interpreted as follows: <p></p> * A string (not ending with '/') will create a new name scope, in which
`name` is appended to the prefix of all operations created in the
context. If `name` has been used before, it will be made unique by
calling `self.unique_name(name)`.
* A scope previously captured from a `with g.name_scope(...) as
scope:` statement will be treated as an "absolute" name scope, which
makes it possible to re-enter existing scopes.
* A value of `None` or the empty string will reset the current name scope
to the top-level (empty) name scope.
The name of the scope itself can be captured by `with
g.name_scope(...) as scope:`, which stores the name of the scope
in the variable `scope`. This value can be used to name an
operation that represents the overall result of executing the ops
in a scope.
NOTE: This constructor validates the given `name`. Valid scope
names match one of the following regular expressions: <p></p> [A-Za-z0-9.][A-Za-z0-9_.\-/]* (for scopes at the root)
[A-Za-z0-9_.\-/]* (for other scopes) 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>A name for the scope. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A context manager that installs `name` as a new name scope. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>with tf.Graph().as_default() as g:
              c = tf.constant(5.0, name="c")
              assert c.op.name == "c"
              c_1 = tf.constant(6.0, name="c")
              assert c_1.op.name == "c_1" <p></p> # Creates a scope called "nested"
with g.name_scope("nested") as scope:
  nested_c = tf.constant(10.0, name="c")
  assert nested_c.op.name == "nested/c" <p></p> # Creates a nested scope called "inner".
with g.name_scope("inner"):
  nested_inner_c = tf.constant(20.0, name="c")
  assert nested_inner_c.op.name == "nested/inner/c" <p></p> # Create a nested scope called "inner_1".
with g.name_scope("inner"):
  nested_inner_1_c = tf.constant(30.0, name="c")
  assert nested_inner_1_c.op.name == "nested/inner_1/c" <p></p> # Treats `scope` as an absolute name scope, and
# switches to the "nested/" scope.
with g.name_scope(scope):
  nested_d = tf.constant(40.0, name="d")
  assert nested_d.op.name == "nested/d" <p></p> with g.name_scope(""):
  e = tf.constant(50.0, name="e")
  assert e.op.name == "e" </pre>
</div>
		</div>
	</div>
	<div id="prevent_feeding" class="method">
		<h4>
			<span title="System.void">void</span> <strong>prevent_feeding</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> tensor)
		</h4>
		<div class="content">Marks the given `tensor` as unfeedable in this graph. 




		</div>
	</div>
	<div id="prevent_feeding_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>prevent_feeding_dyn</strong>(<span title="System.object">object</span> tensor)
		</h4>
		<div class="content">Marks the given `tensor` as unfeedable in this graph. 




		</div>
	</div>
	<div id="prevent_fetching" class="method">
		<h4>
			<span title="System.void">void</span> <strong>prevent_fetching</strong>(<span title="System.object">object</span> op)
		</h4>
		<div class="content">Marks the given `op` as unfetchable in this graph. 




		</div>
	</div>
	<div id="prevent_fetching" class="method">
		<h4>
			<span title="System.void">void</span> <strong>prevent_fetching</strong>(<a href="../tensorflow/Operation.htm">Operation</a> op)
		</h4>
		<div class="content">Marks the given `op` as unfetchable in this graph. 




		</div>
	</div>
	<div id="prevent_fetching_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>prevent_fetching_dyn</strong>(<span title="System.object">object</span> op)
		</h4>
		<div class="content">Marks the given `op` as unfetchable in this graph. 




		</div>
	</div>
	<div id="switch_to_thread_local" class="method">
		<h4>
			<span title="System.void">void</span> <strong>switch_to_thread_local</strong>()
		</h4>
		<div class="content">Make device, colocation and dependencies stacks thread-local. <p></p> Device, colocation and dependencies stacks are not thread-local be default.
If multiple threads access them, then the state is shared.  This means that
one thread may affect the behavior of another thread. <p></p> After this method is called, the stacks become thread-local.  If multiple
threads access them, then the state is not shared.  Each thread uses its own
value; a thread doesn't affect other threads by mutating such a stack. <p></p> The initial value for every thread's stack is set to the current value
of the stack when `switch_to_thread_local()` was first called. 




		</div>
	</div>
	<div id="switch_to_thread_local_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>switch_to_thread_local_dyn</strong>()
		</h4>
		<div class="content">Make device, colocation and dependencies stacks thread-local. <p></p> Device, colocation and dependencies stacks are not thread-local be default.
If multiple threads access them, then the state is shared.  This means that
one thread may affect the behavior of another thread. <p></p> After this method is called, the stacks become thread-local.  If multiple
threads access them, then the state is not shared.  Each thread uses its own
value; a thread doesn't affect other threads by mutating such a stack. <p></p> The initial value for every thread's stack is set to the current value
of the stack when `switch_to_thread_local()` was first called. 




		</div>
	</div>
	<div id="unique_name" class="method">
		<h4>
			<span title="System.string">string</span> <strong>unique_name</strong>(<span title="System.string">string</span> name, <span title="System.bool">bool</span> mark_as_used)
		</h4>
		<div class="content">Return a unique operation name for `name`. <p></p> Note: You rarely need to call `unique_name()` directly.  Most of
the time you just need to create `with g.name_scope()` blocks to
generate structured names. <p></p> `unique_name` is used to generate structured names, separated by
`"/"`, to help identify operations when debugging a graph.
Operation names are displayed in error messages reported by the
TensorFlow runtime, and in various visualization tools such as
TensorBoard. <p></p> If `mark_as_used` is set to `True`, which is the default, a new
unique name is created and marked as in use. If it's set to `False`,
the unique name is returned without actually being marked as used.
This is useful when the caller simply wants to know what the name
to be created will be. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>The name for an operation. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> mark_as_used
						</dt>
						<dd>Whether to mark this name as being used. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.string">string</span></code>
					</dt>
					<dd>A string to be passed to `create_op()` that will be used
to name the operation being created. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="unique_name_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>unique_name_dyn</strong>(<span title="System.object">object</span> name, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> mark_as_used)
		</h4>
		<div class="content">Return a unique operation name for `name`. <p></p> Note: You rarely need to call `unique_name()` directly.  Most of
the time you just need to create `with g.name_scope()` blocks to
generate structured names. <p></p> `unique_name` is used to generate structured names, separated by
`"/"`, to help identify operations when debugging a graph.
Operation names are displayed in error messages reported by the
TensorFlow runtime, and in various visualization tools such as
TensorBoard. <p></p> If `mark_as_used` is set to `True`, which is the default, a new
unique name is created and marked as in use. If it's set to `False`,
the unique name is returned without actually being marked as used.
This is useful when the caller simply wants to know what the name
to be created will be. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>The name for an operation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> mark_as_used
						</dt>
						<dd>Whether to mark this name as being used. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A string to be passed to `create_op()` that will be used
to name the operation being created. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	
	
	<h3 class="section">Public properties</h3>

	<div id="building_function" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>building_function</strong> get; 
		</h4>
		<div class="content">Returns True iff this graph represents a function. 

		</div>
	</div>
	<div id="building_function_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>building_function_dyn</strong> get; 
		</h4>
		<div class="content">Returns True iff this graph represents a function. 

		</div>
	</div>
	<div id="collections" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>collections</strong> get; 
		</h4>
		<div class="content">Returns the names of the collections known to this graph. 

		</div>
	</div>
	<div id="collections_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>collections_dyn</strong> get; 
		</h4>
		<div class="content">Returns the names of the collections known to this graph. 

		</div>
	</div>
	<div id="finalized" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>finalized</strong> get; 
		</h4>
		<div class="content">True if this graph has been finalized. 

		</div>
	</div>
	<div id="finalized_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>finalized_dyn</strong> get; 
		</h4>
		<div class="content">True if this graph has been finalized. 

		</div>
	</div>
	<div id="graph_def_versions" class="method">
		<h4>
			<span title="System.object">object</span> <strong>graph_def_versions</strong> get; 
		</h4>
		<div class="content">The GraphDef version information of this graph. <p></p> For details on the meaning of each version, see
[`GraphDef`](https://www.tensorflow.org/code/tensorflow/core/framework/graph.proto). 

		</div>
	</div>
	<div id="graph_def_versions_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>graph_def_versions_dyn</strong> get; 
		</h4>
		<div class="content">The GraphDef version information of this graph. <p></p> For details on the meaning of each version, see
[`GraphDef`](https://www.tensorflow.org/code/tensorflow/core/framework/graph.proto). 

		</div>
	</div>
	<div id="PythonObject" class="method">
		<h4>
			<span title="System.object">object</span> <strong>PythonObject</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="seed" class="method">
		<h4>
			<span title="System.object">object</span> <strong>seed</strong> get; set;
		</h4>
		<div class="content">The graph-level random seed of this graph. 

		</div>
	</div>
	<div id="seed_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>seed_dyn</strong> get; set;
		</h4>
		<div class="content">The graph-level random seed of this graph. 

		</div>
	</div>
	<div id="version" class="method">
		<h4>
			<span title="System.int">int</span> <strong>version</strong> get; 
		</h4>
		<div class="content">Returns a version number that increases as ops are added to the graph. <p></p> Note that this is unrelated to the
<a href="..\tf\Graph\graph_def_versions.md"><code>tf.Graph.graph_def_versions</code></a>. 

		</div>
	</div>
	<div id="version_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>version_dyn</strong> get; 
		</h4>
		<div class="content">Returns a version number that increases as ops are added to the graph. <p></p> Note that this is unrelated to the
<a href="..\tf\Graph\graph_def_versions.md"><code>tf.Graph.graph_def_versions</code></a>. 

		</div>
	</div>
	</section>
	</article><footer>
	<span id="version">Built from v1.15.0.0 of LostTech.TensorFlow</span>
	<span id="docu-link">
		Generated by <a href="http://docu.jagregory.com">docu</a>
	</span>
</footer>
  </body>
</html>