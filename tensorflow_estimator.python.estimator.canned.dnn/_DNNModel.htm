<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    <title>_DNNModel - LostTech.TensorFlow Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body>
  	<header><h1>LostTech.TensorFlow : API Documentation</h1>
	</header>

    <nav id="namespaces">
      <iframe src="../namespaces.htm"></iframe>
    </nav><nav id="types">
  <h2 class="fixed">Types in tensorflow_estimator.python.estimator.canned.dnn</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm" class="current">_DNNModel</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModelV2.htm">_DNNModelV2</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.dnn/dnn.htm">dnn</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.dnn/DNNClassifier.htm">DNNClassifier</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.dnn/DNNEstimator.htm">DNNEstimator</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.dnn/DNNRegressor.htm">DNNRegressor</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.dnn/I_DNNModel.htm">I_DNNModel</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.dnn/I_DNNModelV2.htm">I_DNNModelV2</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.dnn/IDNNClassifier.htm">IDNNClassifier</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.dnn/IDNNEstimator.htm">IDNNEstimator</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.dnn/IDNNRegressor.htm">IDNNRegressor</a>
        </li>
		</ul>
	</div>
</nav>
	<article>
    <header>
		<p class="class"><strong>Type</strong> _DNNModel</p>
	</header>
	<section>
		<header>
		<p><strong>Namespace</strong> tensorflow_estimator.python.estimator.canned.dnn</p>
		<p><strong>Parent</strong> <a href="../tensorflow.keras/Model.htm">Model</a></p>
		<p><strong>Interfaces</strong> <a href="../tensorflow_estimator.python.estimator.canned.dnn/I_DNNModel.htm">I_DNNModel</a></p>
		</header>
    <div class="sub-header">
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#fit_dyn">fit_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#NewDyn">NewDyn</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#activity_regularizer">activity_regularizer</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#activity_regularizer_dyn">activity_regularizer_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#built">built</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#dtype">dtype</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#dtype_dyn">dtype_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#dynamic">dynamic</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#dynamic_dyn">dynamic_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#inbound_nodes">inbound_nodes</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#inbound_nodes_dyn">inbound_nodes_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#input">input</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#input_dyn">input_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#input_mask">input_mask</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#input_mask_dyn">input_mask_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#input_names">input_names</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#input_shape">input_shape</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#input_shape_dyn">input_shape_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#input_spec">input_spec</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#input_spec_dyn">input_spec_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#inputs">inputs</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#layers">layers</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#layers_dyn">layers_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#loss">loss</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#loss_functions">loss_functions</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#loss_weights">loss_weights</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#losses">losses</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#losses_dyn">losses_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#metrics">metrics</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#metrics_dyn">metrics_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#metrics_names">metrics_names</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#metrics_names_dyn">metrics_names_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#name">name</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#name_dyn">name_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#name_scope">name_scope</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#name_scope_dyn">name_scope_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#non_trainable_variables">non_trainable_variables</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#non_trainable_variables_dyn">non_trainable_variables_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#non_trainable_weights">non_trainable_weights</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#non_trainable_weights_dyn">non_trainable_weights_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#optimizer">optimizer</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#outbound_nodes">outbound_nodes</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#outbound_nodes_dyn">outbound_nodes_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#output">output</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#output_dyn">output_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#output_mask">output_mask</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#output_mask_dyn">output_mask_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#output_names">output_names</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#output_shape">output_shape</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#output_shape_dyn">output_shape_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#outputs">outputs</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#predict_function">predict_function</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#PythonObject">PythonObject</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#run_eagerly">run_eagerly</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#run_eagerly_dyn">run_eagerly_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#sample_weight_mode">sample_weight_mode</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#sample_weights">sample_weights</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#sample_weights_dyn">sample_weights_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#state_updates">state_updates</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#state_updates_dyn">state_updates_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#stateful">stateful</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#stateful_dyn">stateful_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#submodules">submodules</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#submodules_dyn">submodules_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#supports_masking">supports_masking</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#test_function">test_function</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#total_loss">total_loss</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#train_function">train_function</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#trainable">trainable</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#trainable_dyn">trainable_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#trainable_variables">trainable_variables</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#trainable_variables_dyn">trainable_variables_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#trainable_weights">trainable_weights</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#trainable_weights_dyn">trainable_weights_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#updates">updates</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#updates_dyn">updates_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#variables">variables</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#variables_dyn">variables_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#weights">weights</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm#weights_dyn">weights_dyn</a></li>
			</ul>
		
	</div>
	
	<h3 class="section">Public instance methods</h3>

	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.bool">bool</span> verbose, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.bool">bool</span> verbose, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.bool">bool</span> verbose, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.bool">bool</span> verbose, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.bool">bool</span> verbose, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.bool">bool</span> verbose, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a> validation_data, <span title="System.string">string</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.data/Dataset.htm">Dataset</a> validation_data, <span title="System.string">string</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.data/Dataset.htm">Dataset</a> validation_data, <span title="System.string">string</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.data/Dataset.htm">Dataset</a> validation_data, <span title="System.bool">bool</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.data/Dataset.htm">Dataset</a> validation_data, <span title="System.bool">bool</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.data/Dataset.htm">Dataset</a> validation_data, <span title="System.bool">bool</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a> validation_data, <span title="System.string">string</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.data/Dataset.htm">Dataset</a> validation_data, <span title="System.string">string</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit_dyn</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.object">object</span> batch_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> epochs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> verbose, <span title="System.object">object</span> callbacks, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> validation_split, <span title="System.object">object</span> validation_data, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shuffle, <span title="System.object">object</span> class_weight, <span title="System.object">object</span> sample_weight, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> initial_epoch, <span title="System.object">object</span> steps_per_epoch, <span title="System.object">object</span> validation_steps, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> validation_freq, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> max_queue_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> workers, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	
	<h3 class="section">Public static methods</h3>

	<div id="NewDyn" class="method">
		<h4>
			<a href="../tensorflow_estimator.python.estimator.canned.dnn/_DNNModel.htm">_DNNModel</a> <strong>NewDyn</strong>(<span title="System.object">object</span> units, <span title="System.object">object</span> hidden_units, <span title="System.object">object</span> feature_columns, <span title="System.object">object</span> activation_fn, <span title="System.object">object</span> dropout, <span title="System.object">object</span> input_layer_partitioner, <span title="System.object">object</span> batch_norm, <span title="System.object">object</span> name, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">




		</div>
	</div>
	
	<h3 class="section">Public properties</h3>

	<div id="activity_regularizer" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>activity_regularizer</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="activity_regularizer_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>activity_regularizer_dyn</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="built" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>built</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="dtype" class="method">
		<h4>
			<span title="System.object">object</span> <strong>dtype</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="dtype_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>dtype_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="dynamic" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>dynamic</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="dynamic_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>dynamic_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="inbound_nodes" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<Node>">IList&lt;Node&gt;</span> <strong>inbound_nodes</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="inbound_nodes_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>inbound_nodes_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>input</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>input_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_mask" class="method">
		<h4>
			<span title="System.object">object</span> <strong>input_mask</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_mask_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>input_mask_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_names" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>input_names</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_shape" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>input_shape</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_shape_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>input_shape_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_spec" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>input_spec</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_spec_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>input_spec_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="inputs" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>inputs</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="layers" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<Layer>">IList&lt;Layer&gt;</span> <strong>layers</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="layers_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>layers_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="loss" class="method">
		<h4>
			<span title="System.object">object</span> <strong>loss</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="loss_functions" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>loss_functions</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="loss_weights" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<double>">IList&lt;double&gt;</span> <strong>loss_weights</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="losses" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>losses</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="losses_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>losses_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="metrics" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>metrics</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="metrics_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>metrics_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="metrics_names" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>metrics_names</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="metrics_names_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>metrics_names_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="name" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="name_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="name_scope" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name_scope</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="name_scope_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name_scope_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="non_trainable_variables" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>non_trainable_variables</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="non_trainable_variables_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>non_trainable_variables_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="non_trainable_weights" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>non_trainable_weights</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="non_trainable_weights_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>non_trainable_weights_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="optimizer" class="method">
		<h4>
			<span title="System.object">object</span> <strong>optimizer</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="outbound_nodes" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>outbound_nodes</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="outbound_nodes_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>outbound_nodes_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>output</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output_mask" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_mask</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output_mask_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_mask_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output_names" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>output_names</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output_shape" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_shape</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output_shape_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_shape_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="outputs" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>outputs</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="predict_function" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict_function</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="PythonObject" class="method">
		<h4>
			<span title="System.object">object</span> <strong>PythonObject</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="run_eagerly" class="method">
		<h4>
			<span title="System.Nullable<bool>">Nullable&lt;bool&gt;</span> <strong>run_eagerly</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="run_eagerly_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>run_eagerly_dyn</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sample_weight_mode" class="method">
		<h4>
			<span title="System.string">string</span> <strong>sample_weight_mode</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sample_weights" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<Tensor>">IList&lt;Tensor&gt;</span> <strong>sample_weights</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sample_weights_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>sample_weights_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="state_updates" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>state_updates</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="state_updates_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>state_updates_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="stateful" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>stateful</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="stateful_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>stateful_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="submodules" class="method">
		<h4>
			<span title="System.ValueTuple<object>">ValueTuple&lt;object&gt;</span> <strong>submodules</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="submodules_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>submodules_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="supports_masking" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>supports_masking</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="test_function" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_function</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="total_loss" class="method">
		<h4>
			<span title="System.Nullable<double>">Nullable&lt;double&gt;</span> <strong>total_loss</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="train_function" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_function</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>trainable</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>trainable_dyn</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable_variables" class="method">
		<h4>
			<span title="System.object">object</span> <strong>trainable_variables</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable_variables_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>trainable_variables_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable_weights" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>trainable_weights</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable_weights_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>trainable_weights_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="updates" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>updates</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="updates_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>updates_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="variables" class="method">
		<h4>
			<span title="System.object">object</span> <strong>variables</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="variables_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>variables_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="weights" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>weights</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="weights_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>weights_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	</section>
	</article><footer>
	<span id="version">Built from v1.15.0.0 of LostTech.TensorFlow</span>
	<span id="docu-link">
		Generated by <a href="http://docu.jagregory.com">docu</a>
	</span>
</footer>
  </body>
</html>