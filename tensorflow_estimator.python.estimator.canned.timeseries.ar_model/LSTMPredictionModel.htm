<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    <title>LSTMPredictionModel - LostTech.TensorFlow Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body>
  	<header><h1>LostTech.TensorFlow : API Documentation</h1>
	</header>

    <nav id="namespaces">
      <iframe src="../namespaces.htm"></iframe>
    </nav><nav id="types">
  <h2 class="fixed">Types in tensorflow_estimator.python.estimator.canned.timeseries.ar_model</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/ar_model.htm">ar_model</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/ARModel.htm">ARModel</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/IARModel.htm">IARModel</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/ILSTMPredictionModel.htm">ILSTMPredictionModel</a>
        </li>
				<li>
            <a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm" class="current">LSTMPredictionModel</a>
        </li>
		</ul>
	</div>
</nav>
	<article>
    <header>
		<p class="class"><strong>Type</strong> LSTMPredictionModel</p>
	</header>
	<section>
		<header>
		<p><strong>Namespace</strong> tensorflow_estimator.python.estimator.canned.timeseries.ar_model</p>
		<p><strong>Parent</strong> <a href="../tensorflow.keras/Model.htm">Model</a></p>
		<p><strong>Interfaces</strong> <a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/ILSTMPredictionModel.htm">ILSTMPredictionModel</a></p>
		</header>
    <div class="sub-header">
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#__call__">__call__</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#__call__">__call__</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#__call__">__call__</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#__call__">__call__</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#__call___dyn">__call___dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#__call___dyn">__call___dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_loss">add_loss</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_loss">add_loss</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_loss">add_loss</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_loss">add_loss</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_variable">add_variable</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_variable">add_variable</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_variable_dyn">add_variable_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_variable_dyn">add_variable_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight">add_weight</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#add_weight_dyn">add_weight_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#apply">apply</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#apply">apply</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#apply">apply</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#apply">apply</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#apply">apply</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#apply">apply</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#apply_dyn">apply_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#apply_dyn">apply_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#build">build</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#build">build</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#build_dyn">build_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call">call</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#call_dyn">call_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compile">compile</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compute_mask">compute_mask</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compute_mask">compute_mask</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compute_mask">compute_mask</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compute_mask">compute_mask</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compute_mask_dyn">compute_mask_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compute_output_shape">compute_output_shape</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compute_output_shape_dyn">compute_output_shape_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compute_output_signature">compute_output_signature</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compute_output_signature">compute_output_signature</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#compute_output_signature_dyn">compute_output_signature_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#count_params">count_params</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#count_params_dyn">count_params_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#evaluate">evaluate</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#evaluate_dyn">evaluate_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#evaluate_generator">evaluate_generator</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#evaluate_generator_dyn">evaluate_generator_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit">fit</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit_generator">fit_generator</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit_generator">fit_generator</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit_generator">fit_generator</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#fit_generator_dyn">fit_generator_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_input_at">get_input_at</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_input_at_dyn">get_input_at_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_input_mask_at">get_input_mask_at</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_input_mask_at_dyn">get_input_mask_at_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_input_shape_at">get_input_shape_at</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_input_shape_at_dyn">get_input_shape_at_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_layer">get_layer</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_layer_dyn">get_layer_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_losses_for">get_losses_for</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_losses_for">get_losses_for</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_losses_for">get_losses_for</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_losses_for_dyn">get_losses_for_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_output_at">get_output_at</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_output_at_dyn">get_output_at_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_output_mask_at">get_output_mask_at</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_output_mask_at_dyn">get_output_mask_at_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_output_shape_at">get_output_shape_at</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_output_shape_at_dyn">get_output_shape_at_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_weights_">get_weights_</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#get_weights_dyn_">get_weights_dyn_</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#predict">predict</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#predict">predict</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#predict">predict</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#predict">predict</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#predict">predict</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#predict">predict</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#predict">predict</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#predict">predict</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#predict_dyn">predict_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#predict_generator">predict_generator</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#predict_generator_dyn">predict_generator_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#reset_metrics">reset_metrics</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#reset_metrics_dyn">reset_metrics_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#reset_states">reset_states</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#reset_states_dyn">reset_states_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#save">save</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#save">save</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#save">save</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#test_on_batch">test_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#test_on_batch">test_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#test_on_batch">test_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#test_on_batch">test_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#test_on_batch">test_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#test_on_batch">test_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#test_on_batch">test_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#test_on_batch">test_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#test_on_batch">test_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#test_on_batch">test_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#test_on_batch">test_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#test_on_batch">test_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch">train_on_batch</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_on_batch_dyn">train_on_batch_dyn</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#activity_regularizer">activity_regularizer</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#activity_regularizer_dyn">activity_regularizer_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#built">built</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#dtype">dtype</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#dtype_dyn">dtype_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#dynamic">dynamic</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#dynamic_dyn">dynamic_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#inbound_nodes">inbound_nodes</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#inbound_nodes_dyn">inbound_nodes_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#input">input</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#input_dyn">input_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#input_mask">input_mask</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#input_mask_dyn">input_mask_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#input_names">input_names</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#input_shape">input_shape</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#input_shape_dyn">input_shape_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#input_spec">input_spec</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#input_spec_dyn">input_spec_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#inputs">inputs</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#layers">layers</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#layers_dyn">layers_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#loss">loss</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#loss_functions">loss_functions</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#loss_weights">loss_weights</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#losses">losses</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#losses_dyn">losses_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#metrics">metrics</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#metrics_dyn">metrics_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#metrics_names">metrics_names</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#metrics_names_dyn">metrics_names_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#name">name</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#name_dyn">name_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#name_scope">name_scope</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#name_scope_dyn">name_scope_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#non_trainable_variables">non_trainable_variables</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#non_trainable_variables_dyn">non_trainable_variables_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#non_trainable_weights">non_trainable_weights</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#non_trainable_weights_dyn">non_trainable_weights_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#optimizer">optimizer</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#outbound_nodes">outbound_nodes</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#outbound_nodes_dyn">outbound_nodes_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#output">output</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#output_dyn">output_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#output_mask">output_mask</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#output_mask_dyn">output_mask_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#output_names">output_names</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#output_shape">output_shape</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#output_shape_dyn">output_shape_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#outputs">outputs</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#predict_function">predict_function</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#PythonObject">PythonObject</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#run_eagerly">run_eagerly</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#run_eagerly_dyn">run_eagerly_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#sample_weight_mode">sample_weight_mode</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#sample_weights">sample_weights</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#sample_weights_dyn">sample_weights_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#state_updates">state_updates</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#state_updates_dyn">state_updates_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#stateful">stateful</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#stateful_dyn">stateful_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#submodules">submodules</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#submodules_dyn">submodules_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#supports_masking">supports_masking</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#test_function">test_function</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#total_loss">total_loss</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#train_function">train_function</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#trainable">trainable</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#trainable_dyn">trainable_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#trainable_variables">trainable_variables</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#trainable_variables_dyn">trainable_variables_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#trainable_weights">trainable_weights</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#trainable_weights_dyn">trainable_weights_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#updates">updates</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#updates_dyn">updates_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#variables">variables</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#variables_dyn">variables_dyn</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#weights">weights</a></li>
				<li><a href="../tensorflow_estimator.python.estimator.canned.timeseries.ar_model/LSTMPredictionModel.htm#weights_dyn">weights_dyn</a></li>
			</ul>
		
	</div>
	
	<h3 class="section">Public instance methods</h3>

	<div id="__call__" class="method">
		<h4>
			<span title="System.object">object</span> <strong>__call__</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> inputs, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs, <span title="LostTech.Gradient.ManualWrappers.IGraphNodeBase[]">IGraphNodeBase[]</span> args)
		</h4>
		<div class="content">Wraps `call`, applying pre- and post-processing steps. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> inputs
						</dt>
						<dd>input tensor(s). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>additional keyword arguments to be passed to `self.call`. 
						</dd>
						<dt>
							<code><span title="LostTech.Gradient.ManualWrappers.IGraphNodeBase[]">IGraphNodeBase[]</span></code> args
						</dt>
						<dd>additional positional arguments to be passed to `self.call`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Output tensor(s). <p></p> Note:
- The following optional keyword arguments are reserved for specific uses:
* `training`: Boolean scalar tensor of Python boolean indicating
whether the `call` is meant for training or inference.
* `mask`: Boolean input mask.
- If the layer's `call` method takes a `mask` argument (as some Keras
layers do), its default value will be set to the mask generated
for `inputs` by the previous layer (if `input` did come from
a layer that generated a corresponding mask, i.e. if it came from
a Keras layer with masking support. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="__call__" class="method">
		<h4>
			<span title="System.object">object</span> <strong>__call__</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> inputs, <span title="LostTech.Gradient.ManualWrappers.IGraphNodeBase[]">IGraphNodeBase[]</span> args)
		</h4>
		<div class="content">Wraps `call`, applying pre- and post-processing steps. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> inputs
						</dt>
						<dd>input tensor(s). 
						</dd>
						<dt>
							<code><span title="LostTech.Gradient.ManualWrappers.IGraphNodeBase[]">IGraphNodeBase[]</span></code> args
						</dt>
						<dd>additional positional arguments to be passed to `self.call`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Output tensor(s). <p></p> Note:
- The following optional keyword arguments are reserved for specific uses:
* `training`: Boolean scalar tensor of Python boolean indicating
whether the `call` is meant for training or inference.
* `mask`: Boolean input mask.
- If the layer's `call` method takes a `mask` argument (as some Keras
layers do), its default value will be set to the mask generated
for `inputs` by the previous layer (if `input` did come from
a layer that generated a corresponding mask, i.e. if it came from
a Keras layer with masking support. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="__call__" class="method">
		<h4>
			<span title="System.object">object</span> <strong>__call__</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> inputs, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs, <span title="LostTech.Gradient.ManualWrappers.IGraphNodeBase[]">IGraphNodeBase[]</span> args)
		</h4>
		<div class="content">Wraps `call`, applying pre- and post-processing steps. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> inputs
						</dt>
						<dd>input tensor(s). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>additional keyword arguments to be passed to `self.call`. 
						</dd>
						<dt>
							<code><span title="LostTech.Gradient.ManualWrappers.IGraphNodeBase[]">IGraphNodeBase[]</span></code> args
						</dt>
						<dd>additional positional arguments to be passed to `self.call`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Output tensor(s). <p></p> Note:
- The following optional keyword arguments are reserved for specific uses:
* `training`: Boolean scalar tensor of Python boolean indicating
whether the `call` is meant for training or inference.
* `mask`: Boolean input mask.
- If the layer's `call` method takes a `mask` argument (as some Keras
layers do), its default value will be set to the mask generated
for `inputs` by the previous layer (if `input` did come from
a layer that generated a corresponding mask, i.e. if it came from
a Keras layer with masking support. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="__call__" class="method">
		<h4>
			<span title="System.object">object</span> <strong>__call__</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> inputs, <span title="LostTech.Gradient.ManualWrappers.IGraphNodeBase[]">IGraphNodeBase[]</span> args)
		</h4>
		<div class="content">Wraps `call`, applying pre- and post-processing steps. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> inputs
						</dt>
						<dd>input tensor(s). 
						</dd>
						<dt>
							<code><span title="LostTech.Gradient.ManualWrappers.IGraphNodeBase[]">IGraphNodeBase[]</span></code> args
						</dt>
						<dd>additional positional arguments to be passed to `self.call`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Output tensor(s). <p></p> Note:
- The following optional keyword arguments are reserved for specific uses:
* `training`: Boolean scalar tensor of Python boolean indicating
whether the `call` is meant for training or inference.
* `mask`: Boolean input mask.
- If the layer's `call` method takes a `mask` argument (as some Keras
layers do), its default value will be set to the mask generated
for `inputs` by the previous layer (if `input` did come from
a layer that generated a corresponding mask, i.e. if it came from
a Keras layer with masking support. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="__call___dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>__call___dyn</strong>(<span title="System.object">object</span> inputs, <span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">Wraps `call`, applying pre- and post-processing steps. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> inputs
						</dt>
						<dd>input tensor(s). 
						</dd>
						<dt>
							<code><span title="System.Object[]">Object[]</span></code> args
						</dt>
						<dd>additional positional arguments to be passed to `self.call`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Output tensor(s). <p></p> Note:
- The following optional keyword arguments are reserved for specific uses:
* `training`: Boolean scalar tensor of Python boolean indicating
whether the `call` is meant for training or inference.
* `mask`: Boolean input mask.
- If the layer's `call` method takes a `mask` argument (as some Keras
layers do), its default value will be set to the mask generated
for `inputs` by the previous layer (if `input` did come from
a layer that generated a corresponding mask, i.e. if it came from
a Keras layer with masking support. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="__call___dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>__call___dyn</strong>(<span title="System.object">object</span> inputs, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs, <span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">Wraps `call`, applying pre- and post-processing steps. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> inputs
						</dt>
						<dd>input tensor(s). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>additional keyword arguments to be passed to `self.call`. 
						</dd>
						<dt>
							<code><span title="System.Object[]">Object[]</span></code> args
						</dt>
						<dd>additional positional arguments to be passed to `self.call`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Output tensor(s). <p></p> Note:
- The following optional keyword arguments are reserved for specific uses:
* `training`: Boolean scalar tensor of Python boolean indicating
whether the `call` is meant for training or inference.
* `mask`: Boolean input mask.
- If the layer's `call` method takes a `mask` argument (as some Keras
layers do), its default value will be set to the mask generated
for `inputs` by the previous layer (if `input` did come from
a layer that generated a corresponding mask, i.e. if it came from
a Keras layer with masking support. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_loss" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_loss</strong>(<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> losses, <span title="System.bool">bool</span> inputs)
		</h4>
		<div class="content">Add loss tensor(s), potentially dependent on layer inputs. <p></p> Some losses (for instance, activity regularization losses) may be dependent
on the inputs passed when calling a layer. Hence, when reusing the same
layer on different inputs `a` and `b`, some entries in `layer.losses` may
be dependent on `a` and some on `b`. This method automatically keeps track
of dependencies. <p></p> This method can be used inside a subclassed layer or model's `call`
function, in which case `losses` should be a Tensor or list of Tensors. <p></p> Example:
This method can also be called directly on a Functional Model during
construction. In this case, any loss Tensors passed to this Model must
be symbolic and be able to be traced back to the model's `Input`s. These
losses become part of the model's topology and are tracked in `get_config`. <p></p> Example:
If this is not the case for your loss (if, for example, your loss references
a `Variable` of one of the model's layers), you can wrap your loss in a
zero-argument lambda. These losses are not tracked as part of the model's
topology since they can't be serialized. <p></p> Example:
The `get_losses_for` method allows to retrieve the losses relevant to a
specific set of inputs. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> losses
						</dt>
						<dd>Loss tensor, or list/tuple of tensors. Rather than tensors, losses
may also be zero-argument callables which create a loss tensor. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> inputs
						</dt>
						<dd>Ignored when executing eagerly. If anything other than None is
passed, it signals the losses are conditional on some of the layer's
inputs, and thus they should only be run where these inputs are
available. This is the case for activity regularization losses, for
instance. If `None` is passed, the losses are assumed
to be unconditional, and will apply across all dataflows of the layer
(e.g. weight regularization losses). 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>class MyLayer(tf.keras.layers.Layer):
              def call(inputs, self):
                self.add_loss(tf.abs(tf.reduce_mean(inputs)), inputs=True)
                return inputs </pre>
</div>
		</div>
	</div>
	<div id="add_loss" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_loss</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> losses, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> inputs)
		</h4>
		<div class="content">Add loss tensor(s), potentially dependent on layer inputs. <p></p> Some losses (for instance, activity regularization losses) may be dependent
on the inputs passed when calling a layer. Hence, when reusing the same
layer on different inputs `a` and `b`, some entries in `layer.losses` may
be dependent on `a` and some on `b`. This method automatically keeps track
of dependencies. <p></p> This method can be used inside a subclassed layer or model's `call`
function, in which case `losses` should be a Tensor or list of Tensors. <p></p> Example:
This method can also be called directly on a Functional Model during
construction. In this case, any loss Tensors passed to this Model must
be symbolic and be able to be traced back to the model's `Input`s. These
losses become part of the model's topology and are tracked in `get_config`. <p></p> Example:
If this is not the case for your loss (if, for example, your loss references
a `Variable` of one of the model's layers), you can wrap your loss in a
zero-argument lambda. These losses are not tracked as part of the model's
topology since they can't be serialized. <p></p> Example:
The `get_losses_for` method allows to retrieve the losses relevant to a
specific set of inputs. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> losses
						</dt>
						<dd>Loss tensor, or list/tuple of tensors. Rather than tensors, losses
may also be zero-argument callables which create a loss tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> inputs
						</dt>
						<dd>Ignored when executing eagerly. If anything other than None is
passed, it signals the losses are conditional on some of the layer's
inputs, and thus they should only be run where these inputs are
available. This is the case for activity regularization losses, for
instance. If `None` is passed, the losses are assumed
to be unconditional, and will apply across all dataflows of the layer
(e.g. weight regularization losses). 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>class MyLayer(tf.keras.layers.Layer):
              def call(inputs, self):
                self.add_loss(tf.abs(tf.reduce_mean(inputs)), inputs=True)
                return inputs </pre>
</div>
		</div>
	</div>
	<div id="add_loss" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_loss</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> losses, <span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> inputs)
		</h4>
		<div class="content">Add loss tensor(s), potentially dependent on layer inputs. <p></p> Some losses (for instance, activity regularization losses) may be dependent
on the inputs passed when calling a layer. Hence, when reusing the same
layer on different inputs `a` and `b`, some entries in `layer.losses` may
be dependent on `a` and some on `b`. This method automatically keeps track
of dependencies. <p></p> This method can be used inside a subclassed layer or model's `call`
function, in which case `losses` should be a Tensor or list of Tensors. <p></p> Example:
This method can also be called directly on a Functional Model during
construction. In this case, any loss Tensors passed to this Model must
be symbolic and be able to be traced back to the model's `Input`s. These
losses become part of the model's topology and are tracked in `get_config`. <p></p> Example:
If this is not the case for your loss (if, for example, your loss references
a `Variable` of one of the model's layers), you can wrap your loss in a
zero-argument lambda. These losses are not tracked as part of the model's
topology since they can't be serialized. <p></p> Example:
The `get_losses_for` method allows to retrieve the losses relevant to a
specific set of inputs. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> losses
						</dt>
						<dd>Loss tensor, or list/tuple of tensors. Rather than tensors, losses
may also be zero-argument callables which create a loss tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> inputs
						</dt>
						<dd>Ignored when executing eagerly. If anything other than None is
passed, it signals the losses are conditional on some of the layer's
inputs, and thus they should only be run where these inputs are
available. This is the case for activity regularization losses, for
instance. If `None` is passed, the losses are assumed
to be unconditional, and will apply across all dataflows of the layer
(e.g. weight regularization losses). 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>class MyLayer(tf.keras.layers.Layer):
              def call(inputs, self):
                self.add_loss(tf.abs(tf.reduce_mean(inputs)), inputs=True)
                return inputs </pre>
</div>
		</div>
	</div>
	<div id="add_loss" class="method">
		<h4>
			<span title="System.void">void</span> <strong>add_loss</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> losses, <span title="System.bool">bool</span> inputs)
		</h4>
		<div class="content">Add loss tensor(s), potentially dependent on layer inputs. <p></p> Some losses (for instance, activity regularization losses) may be dependent
on the inputs passed when calling a layer. Hence, when reusing the same
layer on different inputs `a` and `b`, some entries in `layer.losses` may
be dependent on `a` and some on `b`. This method automatically keeps track
of dependencies. <p></p> This method can be used inside a subclassed layer or model's `call`
function, in which case `losses` should be a Tensor or list of Tensors. <p></p> Example:
This method can also be called directly on a Functional Model during
construction. In this case, any loss Tensors passed to this Model must
be symbolic and be able to be traced back to the model's `Input`s. These
losses become part of the model's topology and are tracked in `get_config`. <p></p> Example:
If this is not the case for your loss (if, for example, your loss references
a `Variable` of one of the model's layers), you can wrap your loss in a
zero-argument lambda. These losses are not tracked as part of the model's
topology since they can't be serialized. <p></p> Example:
The `get_losses_for` method allows to retrieve the losses relevant to a
specific set of inputs. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> losses
						</dt>
						<dd>Loss tensor, or list/tuple of tensors. Rather than tensors, losses
may also be zero-argument callables which create a loss tensor. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> inputs
						</dt>
						<dd>Ignored when executing eagerly. If anything other than None is
passed, it signals the losses are conditional on some of the layer's
inputs, and thus they should only be run where these inputs are
available. This is the case for activity regularization losses, for
instance. If `None` is passed, the losses are assumed
to be unconditional, and will apply across all dataflows of the layer
(e.g. weight regularization losses). 
						</dd>
				</dl>
			</div>

<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>class MyLayer(tf.keras.layers.Layer):
              def call(inputs, self):
                self.add_loss(tf.abs(tf.reduce_mean(inputs)), inputs=True)
                return inputs </pre>
</div>
		</div>
	</div>
	<div id="add_variable" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_variable</strong>(<span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs, <span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="add_variable" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_variable</strong>(<span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="add_variable_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_variable_dyn</strong>(<span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="add_variable_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_variable_dyn</strong>(<span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs, <span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <span title="System.ValueTuple">ValueTuple</span> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple">ValueTuple</span></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <span title="System.ValueTuple">ValueTuple</span> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.object">object</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple">ValueTuple</span></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.object">object</span> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.object">object</span> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.object">object</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <span title="System.ValueTuple">ValueTuple</span> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.object">object</span> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.object">object</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple">ValueTuple</span></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.object">object</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <a href="../tensorflow/TensorShape.htm">TensorShape</a> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <a href="../tensorflow/Dimension.htm">Dimension</a> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.object">object</span> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.object">object</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><a href="../tensorflow/Dimension.htm">Dimension</a></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <a href="../tensorflow/Dimension.htm">Dimension</a> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.object">object</span> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><a href="../tensorflow/Dimension.htm">Dimension</a></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <span title="System.ValueTuple">ValueTuple</span> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.object">object</span> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple">ValueTuple</span></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <span title="System.int">int</span> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <a href="../tensorflow/Dimension.htm">Dimension</a> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.object">object</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><a href="../tensorflow/Dimension.htm">Dimension</a></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <a href="../tensorflow/Dimension.htm">Dimension</a> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><a href="../tensorflow/Dimension.htm">Dimension</a></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <span title="System.int">int</span> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.object">object</span> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <span title="System.int">int</span> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <span title="System.object">object</span> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.object">object</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight</strong>(<span title="System.string">string</span> name, <span title="System.int">int</span> shape, <a href="../tensorflow/DType.htm">DType</a> dtype, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.object">object</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="add_weight_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>add_weight_dyn</strong>(<span title="System.object">object</span> name, <span title="System.object">object</span> shape, <span title="System.object">object</span> dtype, <span title="System.object">object</span> initializer, <span title="System.object">object</span> regularizer, <span title="System.object">object</span> trainable, <span title="System.object">object</span> constraint, <span title="System.object">object</span> partitioner, <span title="System.object">object</span> use_resource, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> synchronization, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> aggregation, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Adds a new variable to the layer. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>Variable name. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> shape
						</dt>
						<dd>Variable shape. Defaults to scalar if unspecified. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> dtype
						</dt>
						<dd>The type of the variable. Defaults to `self.dtype` or `float32`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> initializer
						</dt>
						<dd>Initializer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> regularizer
						</dt>
						<dd>Regularizer instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> trainable
						</dt>
						<dd>Boolean, whether the variable should be part of the layer's
"trainable_variables" (e.g. variables, biases)
or "non_trainable_variables" (e.g. BatchNorm mean and variance).
Note that `trainable` cannot be `True` if `synchronization`
is set to `ON_READ`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> constraint
						</dt>
						<dd>Constraint instance (callable). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> partitioner
						</dt>
						<dd>Partitioner to be passed to the `Trackable` API. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> use_resource
						</dt>
						<dd>Whether to use `ResourceVariable`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> synchronization
						</dt>
						<dd>Indicates when a distributed a variable will be
aggregated. Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableSynchronization.md"><code>tf.VariableSynchronization</code></a>. By default the synchronization is set to
`AUTO` and the current `DistributionStrategy` chooses
when to synchronize. If `synchronization` is set to `ON_READ`,
`trainable` must not be set to `True`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> aggregation
						</dt>
						<dd>Indicates how a distributed variable will be aggregated.
Accepted values are constants defined in the class
<a href="..\..\..\tf\VariableAggregation.md"><code>tf.VariableAggregation</code></a>. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Additional keyword arguments. Accepted values are `getter` and
`collections`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The created variable. Usually either a `Variable` or `ResourceVariable`
instance. If `partitioner` is not `None`, a `PartitionedVariable`
instance is returned. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="apply" class="method">
		<h4>
			<span title="System.object">object</span> <strong>apply</strong>(<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> inputs, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs, <span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="apply" class="method">
		<h4>
			<span title="System.object">object</span> <strong>apply</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> inputs, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs, <span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="apply" class="method">
		<h4>
			<span title="System.object">object</span> <strong>apply</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> inputs, <span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="apply" class="method">
		<h4>
			<span title="System.object">object</span> <strong>apply</strong>(<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> inputs, <span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="apply" class="method">
		<h4>
			<span title="System.object">object</span> <strong>apply</strong>(<span title="System.object">object</span> inputs, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs, <span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="apply" class="method">
		<h4>
			<span title="System.object">object</span> <strong>apply</strong>(<span title="System.object">object</span> inputs, <span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="apply_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>apply_dyn</strong>(<span title="System.object">object</span> inputs, <span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="apply_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>apply_dyn</strong>(<span title="System.object">object</span> inputs, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs, <span title="System.Object[]">Object[]</span> args)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="build" class="method">
		<h4>
			<span title="System.void">void</span> <strong>build</strong>(<a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> input_shape)
		</h4>
		<div class="content">Creates the variables of the layer (optional, for subclass implementers). <p></p> This is a method that implementers of subclasses of `Layer` or `Model`
can override if they need a state-creation step in-between
layer instantiation and layer call. <p></p> This is typically used to create the weights of `Layer` subclasses. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> input_shape
						</dt>
						<dd>Instance of `TensorShape`, or list of instances of
`TensorShape` if the layer expects a list of inputs
(one instance per input). 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="build" class="method">
		<h4>
			<span title="System.void">void</span> <strong>build</strong>(<span title="System.object">object</span> input_shape)
		</h4>
		<div class="content">Creates the variables of the layer (optional, for subclass implementers). <p></p> This is a method that implementers of subclasses of `Layer` or `Model`
can override if they need a state-creation step in-between
layer instantiation and layer call. <p></p> This is typically used to create the weights of `Layer` subclasses. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> input_shape
						</dt>
						<dd>Instance of `TensorShape`, or list of instances of
`TensorShape` if the layer expects a list of inputs
(one instance per input). 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="build_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>build_dyn</strong>(<span title="System.object">object</span> input_shape)
		</h4>
		<div class="content">Creates the variables of the layer (optional, for subclass implementers). <p></p> This is a method that implementers of subclasses of `Layer` or `Model`
can override if they need a state-creation step in-between
layer instantiation and layer call. <p></p> This is typically used to create the weights of `Layer` subclasses. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> input_shape
						</dt>
						<dd>Instance of `TensorShape`, or list of instances of
`TensorShape` if the layer expects a list of inputs
(one instance per input). 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> inputs, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> training, <span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> mask)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> inputs, <span title="System.bool">bool</span> training, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> mask)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> inputs, <span title="System.bool">bool</span> training, <span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> mask)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> inputs, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> training, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> mask)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> inputs, <span title="System.bool">bool</span> training, <span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> mask)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> inputs, <span title="System.bool">bool</span> training, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> mask)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> inputs, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> training, <span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> mask)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> inputs, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> training, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> mask)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> input_window_features, <span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<span title="System.string">string</span> input_window_features, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<span title="System.string">string</span> input_window_features, <span title="System.object">object</span> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<span title="System.string">string</span> input_window_features, <span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> input_window_features, <span title="System.object">object</span> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> input_window_features, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> input_window_features, <span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> input_window_features, <span title="System.object">object</span> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> input_window_features, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> input_window_features, <span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<a href="../tensorflow/IndexedSlices.htm">IndexedSlices</a> input_window_features, <span title="System.object">object</span> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<a href="../tensorflow/IndexedSlices.htm">IndexedSlices</a> input_window_features, <span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> input_window_features, <span title="System.object">object</span> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> input_window_features, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>call</strong>(<a href="../tensorflow/IndexedSlices.htm">IndexedSlices</a> input_window_features, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> output_window_features)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="call_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>call_dyn</strong>(<span title="System.object">object</span> input_window_features, <span title="System.object">object</span> output_window_features)
		</h4>
		<div class="content">Invokes the `Loss` instance. 




		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> metrics, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> loss_weights, <span title="System.string">string</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <span title="System.object">object</span> loss, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> metrics, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> loss_weights, <span title="System.string">string</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <span title="System.object">object</span> loss, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> metrics, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> loss_weights, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <span title="System.object">object</span> loss, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> metrics, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> loss_weights, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <span title="System.object">object</span> loss, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> metrics, <span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span> loss_weights, <span title="System.string">string</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <span title="System.object">object</span> loss, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> metrics, <span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span> loss_weights, <span title="System.string">string</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <span title="System.object">object</span> loss, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> metrics, <span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span> loss_weights, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <a href="../tensorflow.keras.metrics/CategoricalAccuracy.htm">CategoricalAccuracy</a> metrics, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> loss_weights, <span title="System.string">string</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><a href="../tensorflow.keras.metrics/CategoricalAccuracy.htm">CategoricalAccuracy</a></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <span title="System.object">object</span> loss, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> metrics, <span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span> loss_weights, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <span title="System.object">object</span> loss, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> metrics, <span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span> loss_weights, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <a href="../tensorflow.keras.metrics/CategoricalAccuracy.htm">CategoricalAccuracy</a> metrics, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> loss_weights, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><a href="../tensorflow.keras.metrics/CategoricalAccuracy.htm">CategoricalAccuracy</a></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <a href="../tensorflow.keras.metrics/CategoricalAccuracy.htm">CategoricalAccuracy</a> metrics, <span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span> loss_weights, <span title="System.string">string</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><a href="../tensorflow.keras.metrics/CategoricalAccuracy.htm">CategoricalAccuracy</a></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <span title="System.object">object</span> loss, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> metrics, <span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span> loss_weights, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <a href="../tensorflow.keras.metrics/CategoricalAccuracy.htm">CategoricalAccuracy</a> metrics, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> loss_weights, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><a href="../tensorflow.keras.metrics/CategoricalAccuracy.htm">CategoricalAccuracy</a></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <a href="../tensorflow.keras.metrics/CategoricalAccuracy.htm">CategoricalAccuracy</a> metrics, <span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span> loss_weights, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><a href="../tensorflow.keras.metrics/CategoricalAccuracy.htm">CategoricalAccuracy</a></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> metrics, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> loss_weights, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <a href="../tensorflow.keras.metrics/CategoricalAccuracy.htm">CategoricalAccuracy</a> metrics, <span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span> loss_weights, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><a href="../tensorflow.keras.metrics/CategoricalAccuracy.htm">CategoricalAccuracy</a></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> metrics, <span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span> loss_weights, <span title="System.string">string</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> metrics, <span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span> loss_weights, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> metrics, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> loss_weights, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> metrics, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> loss_weights, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> metrics, <span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span> loss_weights, <span title="System.string">string</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<double>">IEnumerable&lt;double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compile" class="method">
		<h4>
			<span title="System.void">void</span> <strong>compile</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> optimizer, <a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> loss, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> metrics, <span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span> loss_weights, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight_mode, <span title="System.object">object</span> weighted_metrics, <span title="System.object">object</span> target_tensors, <span title="System.object">object</span> distribute, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Configures the model for training. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> optimizer
						</dt>
						<dd>String (name of optimizer) or optimizer instance.
See <a href="..\..\tf\keras\optimizers.md"><code>tf.keras.optimizers</code></a>. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a></code> loss
						</dt>
						<dd>String (name of objective function), objective function or
`tf.losses.Loss` instance. See <a href="..\..\tf\losses.md"><code>tf.losses</code></a>. If the model has
multiple outputs, you can use a different loss on each output by
passing a dictionary or a list of losses. The loss value that will
be minimized by the model will then be the sum of all individual
losses. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> metrics
						</dt>
						<dd>List of metrics to be evaluated by the model during training
and testing. Typically you will use `metrics=['accuracy']`.
To specify different metrics for different outputs of a
multi-output model, you could also pass a dictionary, such as
`metrics={'output_a': 'accuracy', 'output_b': ['accuracy', 'mse']}`.
You can also pass a list (len = len(outputs)) of lists of metrics
such as `metrics=[['accuracy'], ['accuracy', 'mse']]` or
`metrics=['accuracy', ['accuracy', 'mse']]`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, double>">IDictionary&lt;string, double&gt;</span></code> loss_weights
						</dt>
						<dd>Optional list or dictionary specifying scalar
coefficients (Python floats) to weight the loss contributions
of different model outputs.
The loss value that will be minimized by the model
will then be the *weighted sum* of all individual losses,
weighted by the `loss_weights` coefficients.
If a list, it is expected to have a 1:1 mapping
to the model's outputs. If a tensor, it is expected to map
output names (strings) to scalar coefficients. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight_mode
						</dt>
						<dd>If you need to do timestep-wise
sample weighting (2D weights), set this to `"temporal"`.
`None` defaults to sample-wise weights (1D).
If the model has multiple outputs, you can use a different
`sample_weight_mode` on each output by passing a
dictionary or a list of modes. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> weighted_metrics
						</dt>
						<dd>List of metrics to be evaluated and weighted
by sample_weight or class_weight during training and testing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> target_tensors
						</dt>
						<dd>By default, Keras will create placeholders for the
model's target, which will be fed with the target data during
training. If instead you would like to use your own
target tensors (in turn, Keras will not expect external
Numpy data for these targets at training time), you
can specify them via the `target_tensors` argument. It can be
a single tensor (for a single-output model), a list of tensors,
or a dict mapping output names to target tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> distribute
						</dt>
						<dd>NOT SUPPORTED IN TF 2.0, please create and compile the
model under distribution strategy scope instead of passing it to
compile. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Any additional arguments. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="compute_mask" class="method">
		<h4>
			<span title="System.object">object</span> <strong>compute_mask</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> inputs, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> mask)
		</h4>
		<div class="content">Computes an output mask tensor. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> inputs
						</dt>
						<dd>Tensor or list of tensors. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> mask
						</dt>
						<dd>Tensor or list of tensors. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>None or a tensor (or list of tensors,
one per output tensor of the layer). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="compute_mask" class="method">
		<h4>
			<span title="System.object">object</span> <strong>compute_mask</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> inputs, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> mask)
		</h4>
		<div class="content">Computes an output mask tensor. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> inputs
						</dt>
						<dd>Tensor or list of tensors. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> mask
						</dt>
						<dd>Tensor or list of tensors. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>None or a tensor (or list of tensors,
one per output tensor of the layer). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="compute_mask" class="method">
		<h4>
			<span title="System.object">object</span> <strong>compute_mask</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> inputs, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> mask)
		</h4>
		<div class="content">Computes an output mask tensor. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> inputs
						</dt>
						<dd>Tensor or list of tensors. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> mask
						</dt>
						<dd>Tensor or list of tensors. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>None or a tensor (or list of tensors,
one per output tensor of the layer). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="compute_mask" class="method">
		<h4>
			<span title="System.object">object</span> <strong>compute_mask</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> inputs, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> mask)
		</h4>
		<div class="content">Computes an output mask tensor. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> inputs
						</dt>
						<dd>Tensor or list of tensors. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> mask
						</dt>
						<dd>Tensor or list of tensors. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>None or a tensor (or list of tensors,
one per output tensor of the layer). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="compute_mask_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>compute_mask_dyn</strong>(<span title="System.object">object</span> inputs, <span title="System.object">object</span> mask)
		</h4>
		<div class="content">Computes an output mask tensor. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> inputs
						</dt>
						<dd>Tensor or list of tensors. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> mask
						</dt>
						<dd>Tensor or list of tensors. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>None or a tensor (or list of tensors,
one per output tensor of the layer). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="compute_output_shape" class="method">
		<h4>
			<a href="../tensorflow/TensorShape.htm">TensorShape</a> <strong>compute_output_shape</strong>(<a href="../tensorflow/TensorShape.htm">TensorShape</a> input_shape)
		</h4>
		<div class="content">Computes the output shape of the layer. <p></p> If the layer has not been built, this method will call `build` on the
layer. This assumes that the layer will later be used with inputs that
match the input shape provided here. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> input_shape
						</dt>
						<dd>Shape tuple (tuple of integers)
or list of shape tuples (one per output tensor of the layer).
Shape tuples can include None for free dimensions,
instead of an integer. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code>
					</dt>
					<dd>An input shape tuple. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="compute_output_shape_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>compute_output_shape_dyn</strong>(<span title="System.object">object</span> input_shape)
		</h4>
		<div class="content">Computes the output shape of the layer. <p></p> If the layer has not been built, this method will call `build` on the
layer. This assumes that the layer will later be used with inputs that
match the input shape provided here. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> input_shape
						</dt>
						<dd>Shape tuple (tuple of integers)
or list of shape tuples (one per output tensor of the layer).
Shape tuples can include None for free dimensions,
instead of an integer. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>An input shape tuple. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="compute_output_signature" class="method">
		<h4>
			<span title="System.object">object</span> <strong>compute_output_signature</strong>(<a href="../tensorflow/TensorSpec.htm">TensorSpec</a> input_signature)
		</h4>
		<div class="content">Compute the output tensor signature of the layer based on the inputs. <p></p> Unlike a TensorShape object, a TensorSpec object contains both shape
and dtype information for a tensor. This method allows layers to provide
output dtype information if it is different from the input dtype.
For any layer that doesn't implement this function,
the framework will fall back to use `compute_output_shape`, and will
assume that the output dtype matches the input dtype. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/TensorSpec.htm">TensorSpec</a></code> input_signature
						</dt>
						<dd>Single TensorSpec or nested structure of TensorSpec
objects, describing a candidate input for the layer. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Single TensorSpec or nested structure of TensorSpec objects, describing
how the layer would transform the provided input. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="compute_output_signature" class="method">
		<h4>
			<span title="System.object">object</span> <strong>compute_output_signature</strong>(<span title="System.Collections.Generic.IEnumerable<TensorSpec>">IEnumerable&lt;TensorSpec&gt;</span> input_signature)
		</h4>
		<div class="content">Compute the output tensor signature of the layer based on the inputs. <p></p> Unlike a TensorShape object, a TensorSpec object contains both shape
and dtype information for a tensor. This method allows layers to provide
output dtype information if it is different from the input dtype.
For any layer that doesn't implement this function,
the framework will fall back to use `compute_output_shape`, and will
assume that the output dtype matches the input dtype. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<TensorSpec>">IEnumerable&lt;TensorSpec&gt;</span></code> input_signature
						</dt>
						<dd>Single TensorSpec or nested structure of TensorSpec
objects, describing a candidate input for the layer. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Single TensorSpec or nested structure of TensorSpec objects, describing
how the layer would transform the provided input. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="compute_output_signature_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>compute_output_signature_dyn</strong>(<span title="System.object">object</span> input_signature)
		</h4>
		<div class="content">Compute the output tensor signature of the layer based on the inputs. <p></p> Unlike a TensorShape object, a TensorSpec object contains both shape
and dtype information for a tensor. This method allows layers to provide
output dtype information if it is different from the input dtype.
For any layer that doesn't implement this function,
the framework will fall back to use `compute_output_shape`, and will
assume that the output dtype matches the input dtype. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> input_signature
						</dt>
						<dd>Single TensorSpec or nested structure of TensorSpec
objects, describing a candidate input for the layer. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Single TensorSpec or nested structure of TensorSpec objects, describing
how the layer would transform the provided input. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="count_params" class="method">
		<h4>
			<span title="System.int">int</span> <strong>count_params</strong>()
		</h4>
		<div class="content">Count the total number of scalars composing the weights. 



			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.int">int</span></code>
					</dt>
					<dd>An integer count. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="count_params_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>count_params_dyn</strong>()
		</h4>
		<div class="content">Count the total number of scalars composing the weights. 



			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>An integer count. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.bool">bool</span> verbose, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.bool">bool</span> verbose, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.bool">bool</span> verbose, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate_dyn</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.object">object</span> batch_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> verbose, <span title="System.object">object</span> sample_weight, <span title="System.object">object</span> steps, <span title="System.object">object</span> callbacks, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> max_queue_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> workers, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> use_multiprocessing)
		</h4>
		<div class="content">Returns the loss value & metrics values for the model in test mode. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely).
If `x` is a dataset, generator or
`keras.utils.Sequence` instance, `y` should not be specified (since
targets will be obtained from the iterator/dataset). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> verbose
						</dt>
						<dd>0 or 1. Verbosity mode.
0 = silent, 1 = progress bar. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the test samples, used for weighting the loss function.
You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, instead pass
sample weights as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> steps
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring the evaluation round finished.
Ignored with the default value of `None`.
If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset and `steps` is
None, 'evaluate' will run until the dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate_generator" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate_generator</strong>(<span title="System.Collections.Generic.IEnumerator<ValueTuple<object, object>>">IEnumerator&lt;ValueTuple&lt;object, object&gt;&gt;</span> generator, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.object">object</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.int">int</span> verbose)
		</h4>
		<div class="content">Evaluates the model on a data generator. <p></p> The generator should return the same kind of data
as accepted by `test_on_batch`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerator<ValueTuple<object, object>>">IEnumerator&lt;ValueTuple&lt;object, object&gt;&gt;</span></code> generator
						</dt>
						<dd>Generator yielding tuples (inputs, targets)
or (inputs, targets, sample_weights)
or an instance of `keras.utils.Sequence`
object in order to avoid duplicate data
when using multiprocessing. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Total number of steps (batches of samples)
to yield from `generator` before stopping.
Optional for `Sequence`: if unspecified, will use
the `len(generator)` as a number of steps. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>maximum size for the generator queue 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Maximum number of processes to spin up
when using process-based threading.
If unspecified, `workers` will default to 1. If 0, will
execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean.
If `True`, use process-based threading.
If unspecified, `use_multiprocessing` will default to `False`.
Note that because this implementation relies on multiprocessing,
you should not pass non-picklable arguments to the generator
as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>Verbosity mode, 0 or 1. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="evaluate_generator_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>evaluate_generator_dyn</strong>(<span title="System.object">object</span> generator, <span title="System.object">object</span> steps, <span title="System.object">object</span> callbacks, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> max_queue_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> workers, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> use_multiprocessing, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> verbose)
		</h4>
		<div class="content">Evaluates the model on a data generator. <p></p> The generator should return the same kind of data
as accepted by `test_on_batch`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> generator
						</dt>
						<dd>Generator yielding tuples (inputs, targets)
or (inputs, targets, sample_weights)
or an instance of `keras.utils.Sequence`
object in order to avoid duplicate data
when using multiprocessing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> steps
						</dt>
						<dd>Total number of steps (batches of samples)
to yield from `generator` before stopping.
Optional for `Sequence`: if unspecified, will use
the `len(generator)` as a number of steps. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during evaluation.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> max_queue_size
						</dt>
						<dd>maximum size for the generator queue 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> workers
						</dt>
						<dd>Integer. Maximum number of processes to spin up
when using process-based threading.
If unspecified, `workers` will default to 1. If 0, will
execute the generator on the main thread. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> use_multiprocessing
						</dt>
						<dd>Boolean.
If `True`, use process-based threading.
If unspecified, `use_multiprocessing` will default to `False`.
Note that because this implementation relies on multiprocessing,
you should not pass non-picklable arguments to the generator
as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> verbose
						</dt>
						<dd>Verbosity mode, 0 or 1. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.bool">bool</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a> validation_data, <span title="System.string">string</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.bool">bool</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.data/Dataset.htm">Dataset</a> validation_data, <span title="System.bool">bool</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <span title="System.ValueTuple<IEnumerable<object>, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;</span> validation_data, <span title="System.bool">bool</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple<IEnumerable<object>, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;</span></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <span title="System.ValueTuple<IEnumerable<object>, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;</span> validation_data, <span title="System.string">string</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple<IEnumerable<object>, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;</span></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.bool">bool</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a> validation_data, <span title="System.string">string</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> input, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> targetValues, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> stepsPerEpoch, <span title="System.int">int</span> epochs, <a href="../tensorflow.keras/TrainingVerbosity.htm">TrainingVerbosity</a> verbosity, <span title="System.Collections.Generic.IEnumerable<ICallback>">IEnumerable&lt;ICallback&gt;</span> callbacks, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> validationInput, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> validationTarget, <a href="../tensorflow.keras/TrainingShuffleMode.htm">TrainingShuffleMode</a> shuffleMode, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> initialEpoch)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> input
						</dt>
						<dd>Input data 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> targetValues
						</dt>
						<dd>Target values 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> stepsPerEpoch
						</dt>
						<dd>Number of times to loop over  <var>input</var> before declaring one epoch finished and starting the next epoch. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Number of epochs to train the model.
An epoch is an iteration over the entire data provided.
Note that in conjunction with  <var>initialEpoch</var> , <var>epochs</var>  is to be understood as "final epoch".
The model is not trained for a number of iterations
given by  <var>epochs</var> , but merely until the epoch
of index  <var>epochs</var>  is reached. 
						</dd>
						<dt>
							<code><a href="../tensorflow.keras/TrainingVerbosity.htm">TrainingVerbosity</a></code> verbosity
						</dt>
						<dd>Specifies verbosity of output. Default is  <a href="../tensorflow.keras/TrainingVerbosity.htm#ProgressBar">ProgressBar</a> 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<ICallback>">IEnumerable&lt;ICallback&gt;</span></code> callbacks
						</dt>
						<dd>Optional list of callbacks to apply during training 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> validationInput
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> validationTarget
						</dt>
						<dd>If  <var>validationInput</var>  is present,
specifies the target values for the validation dataset. 
						</dd>
						<dt>
							<code><a href="../tensorflow.keras/TrainingShuffleMode.htm">TrainingShuffleMode</a></code> shuffleMode
						</dt>
						<dd>Optional input data shuffling. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> initialEpoch
						</dt>
						<dd>Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<a href="../numpy/I_ArrayLike.htm">I_ArrayLike</a> input, <a href="../numpy/I_ArrayLike.htm">I_ArrayLike</a> targetValues, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> stepsPerEpoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validationSteps, <span title="System.int">int</span> epochs, <span title="System.int">int</span> batchSize, <a href="../tensorflow.keras/TrainingVerbosity.htm">TrainingVerbosity</a> verbosity, <span title="System.Collections.Generic.IEnumerable<ICallback>">IEnumerable&lt;ICallback&gt;</span> callbacks, <a href="../numpy/I_ArrayLike.htm">I_ArrayLike</a> validationInput, <a href="../numpy/I_ArrayLike.htm">I_ArrayLike</a> validationTarget, <a href="../tensorflow.keras/TrainingShuffleMode.htm">TrainingShuffleMode</a> shuffleMode, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> initialEpoch)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../numpy/I_ArrayLike.htm">I_ArrayLike</a></code> input
						</dt>
						<dd>Input data 
						</dd>
						<dt>
							<code><a href="../numpy/I_ArrayLike.htm">I_ArrayLike</a></code> targetValues
						</dt>
						<dd>Target values 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> stepsPerEpoch
						</dt>
						<dd>Number of batches from  <var>input</var> to process in a single epoch. Use  <code>null</code>  to compute that number automatically,
to process the entire  <var>input</var>  once per epoch. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validationSteps
						</dt>
						<dd>Number of batches from  <var>validationInput</var> to process in a single epoch.Use  <code>null</code>  to compute that number automatically,
to process the entire  <var>validationInput</var>  once per epoch. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Number of epochs to train the model.
An epoch is an iteration over the entire data provided.
Note that in conjunction with  <var>initialEpoch</var> , <var>epochs</var>  is to be understood as "final epoch".
The model is not trained for a number of iterations
given by  <var>epochs</var> , but merely until the epoch
of index  <var>epochs</var>  is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> batchSize
						</dt>
						<dd>Number of samples per gradient update. 
						</dd>
						<dt>
							<code><a href="../tensorflow.keras/TrainingVerbosity.htm">TrainingVerbosity</a></code> verbosity
						</dt>
						<dd>Specifies verbosity of output. Default is  <a href="../tensorflow.keras/TrainingVerbosity.htm#ProgressBar">ProgressBar</a> 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<ICallback>">IEnumerable&lt;ICallback&gt;</span></code> callbacks
						</dt>
						<dd>Optional list of callbacks to apply during training 
						</dd>
						<dt>
							<code><a href="../numpy/I_ArrayLike.htm">I_ArrayLike</a></code> validationInput
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data. 
						</dd>
						<dt>
							<code><a href="../numpy/I_ArrayLike.htm">I_ArrayLike</a></code> validationTarget
						</dt>
						<dd>If  <var>validationInput</var>  is present,
specifies the target values for the validation dataset. 
						</dd>
						<dt>
							<code><a href="../tensorflow.keras/TrainingShuffleMode.htm">TrainingShuffleMode</a></code> shuffleMode
						</dt>
						<dd>Optional input data shuffling. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> initialEpoch
						</dt>
						<dd>Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <span title="System.ValueTuple<IEnumerable<object>, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;</span> validation_data, <span title="System.string">string</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple<IEnumerable<object>, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;</span></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <span title="System.ValueTuple<IEnumerable<object>, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;</span> validation_data, <span title="System.string">string</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple<IEnumerable<object>, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;</span></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a> validation_data, <span title="System.bool">bool</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a> validation_data, <span title="System.bool">bool</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a> validation_data, <span title="System.bool">bool</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.double">double</span> validation_split, <a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a> validation_data, <span title="System.string">string</span> shuffle, <span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> class_weight, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.int">int</span> initial_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> kwargs)
		</h4>
		<div class="content">Trains the model for a fixed number of epochs (iterations on a dataset). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Should return a tuple
of either `(inputs, targets)` or
`(inputs, targets, sample_weights)`.
- A generator or `keras.utils.Sequence` returning `(inputs, targets)`
or `(inputs, targets, sample weights)`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset, generator,
or `keras.utils.Sequence` instance, `y` should
not be specified (since targets will be obtained from `x`). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` if your data is in the
form of symbolic tensors, datasets,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer. Number of epochs to train the model.
An epoch is an iteration over the entire `x` and `y`
data provided.
Note that in conjunction with `initial_epoch`,
`epochs` is to be understood as "final epoch".
The model is not trained for a number of iterations
given by `epochs`, but merely until the epoch
of index `epochs` is reached. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>0, 1, or 2. Verbosity mode.
0 = silent, 1 = progress bar, 2 = one line per epoch.
Note that the progress bar is not particularly useful when
logged to a file, so verbose=2 is recommended when not running
interactively (eg, in a production environment). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during training.
See <a href="..\..\tf\keras\callbacks.md"><code>tf.keras.callbacks</code></a>. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> validation_split
						</dt>
						<dd>Float between 0 and 1.
Fraction of the training data to be used as validation data.
The model will set apart this fraction of the training data,
will not train on it, and will evaluate
the loss and any model metrics
on this data at the end of each epoch.
The validation data is selected from the last samples
in the `x` and `y` data provided, before shuffling. This argument is
not supported when `x` is a dataset, generator or
`keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><a href="../tensorflow.compat.v2.data/Dataset.htm">Dataset</a></code> validation_data
						</dt>
						<dd>Data on which to evaluate
the loss and any model metrics at the end of each epoch.
The model will not be trained on this data.
`validation_data` will override `validation_split`.
`validation_data` could be:
- tuple `(x_val, y_val)` of Numpy arrays or tensors
- tuple `(x_val, y_val, val_sample_weights)` of Numpy arrays
- dataset
For the first two cases, `batch_size` must be provided.
For the last case, `validation_steps` must be provided. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shuffle
						</dt>
						<dd>Boolean (whether to shuffle the training data
before each epoch) or str (for 'batch').
'batch' is a special option for dealing with the
limitations of HDF5 data; it shuffles in batch-sized chunks.
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers)
to a weight (float) value, used for weighting the loss function
(during training only).
This can be useful to tell the model to
"pay more attention" to samples from
an under-represented class. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional Numpy array of weights for
the training samples, used for weighting the loss function
(during training only). You can either pass a flat (1D)
Numpy array with the same length as the input samples
(1:1 mapping between weights and samples),
or in the case of temporal data,
you can pass a 2D array with shape
`(samples, sequence_length)`,
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
`sample_weight_mode="temporal"` in `compile()`. This argument is not
supported when `x` is a dataset, generator, or
`keras.utils.Sequence` instance, instead provide the sample_weights
as the third element of `x`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Integer.
Epoch at which to start training
(useful for resuming a previous training run). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Integer or `None`.
Total number of steps (batches of samples)
before declaring one epoch finished and starting the
next epoch. When training with input tensors such as
TensorFlow data tensors, the default `None` is equal to
the number of samples in your dataset divided by
the batch size, or 1 if that cannot be determined. If x is a
<a href="..\..\tf\data.md"><code>tf.data</code></a> dataset, and 'steps_per_epoch'
is None, the epoch will run until the input dataset is exhausted.
This argument is not supported with array inputs. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data` is provided and
is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. Total number of steps (batches of
samples) to draw before stopping when performing validation
at the end of every epoch. If validation_data is a <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset
and 'validation_steps' is None, validation
will run until the `validation_data` dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up
when using process-based threading. If unspecified, `workers`
will default to 1. If 0, will execute the generator on the main
thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> kwargs
						</dt>
						<dd>Used for backwards compatibility. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. Its `History.history` attribute is
a record of training loss values and metrics values
at successive epochs, as well as validation loss values
and validation metrics values (if applicable). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit_generator" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit_generator</strong>(<a href="../tensorflow.keras.utils/Sequence.htm">Sequence</a> generator, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> callbacks, <span title="System.Collections.Generic.IEnumerator<ValueTuple<object, object>>">IEnumerator&lt;ValueTuple&lt;object, object&gt;&gt;</span> validation_data, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> class_weight, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.bool">bool</span> shuffle, <span title="System.int">int</span> initial_epoch)
		</h4>
		<div class="content">Fits the model on data yielded batch-by-batch by a Python generator. <p></p> The generator is run in parallel to the model, for efficiency.
For instance, this allows you to do real-time data augmentation
on images on CPU in parallel to training your model on GPU. <p></p> The use of `keras.utils.Sequence` guarantees the ordering
and guarantees the single use of every input per epoch when
using `use_multiprocessing=True`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.keras.utils/Sequence.htm">Sequence</a></code> generator
						</dt>
						<dd>A generator or an instance of `Sequence`
(`keras.utils.Sequence`)
object in order to avoid duplicate data
when using multiprocessing.
The output of the generator must be either
- a tuple `(inputs, targets)`
- a tuple `(inputs, targets, sample_weights)`.
This tuple (a single output of the generator) makes a single batch.
Therefore, all arrays in this tuple must have the same length (equal
to the size of this batch). Different batches may have different
sizes.
For example, the last batch of the epoch is commonly smaller than
the
others, if the size of the dataset is not divisible by the batch
size.
The generator is expected to loop over its data
indefinitely. An epoch finishes when `steps_per_epoch`
batches have been seen by the model. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Total number of steps (batches of samples)
to yield from `generator` before declaring one epoch
finished and starting the next epoch. It should typically
be equal to the number of samples of your dataset
divided by the batch size.
Optional for `Sequence`: if unspecified, will use
the `len(generator)` as a number of steps. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer, total number of iterations on the data. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>Verbosity mode, 0, 1, or 2. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> callbacks
						</dt>
						<dd>List of callbacks to be called during training. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerator<ValueTuple<object, object>>">IEnumerator&lt;ValueTuple&lt;object, object&gt;&gt;</span></code> validation_data
						</dt>
						<dd>This can be either
- a generator for the validation data
- a tuple (inputs, targets)
- a tuple (inputs, targets, sample_weights). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data`
is a generator. Total number of steps (batches of samples)
to yield from `generator` before stopping.
Optional for `Sequence`: if unspecified, will use
the `len(validation_data)` as a number of steps. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> class_weight
						</dt>
						<dd>Dictionary mapping class indices to a weight
for the class. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Maximum number of processes to spin up
when using process-based threading.
If unspecified, `workers` will default to 1. If 0, will
execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean.
If `True`, use process-based threading.
If unspecified, `use_multiprocessing` will default to `False`.
Note that because this implementation relies on multiprocessing,
you should not pass non-picklable arguments to the generator
as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> shuffle
						</dt>
						<dd>Boolean. Whether to shuffle the order of the batches at
the beginning of each epoch. Only used with instances
of `Sequence` (`keras.utils.Sequence`).
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Epoch at which to start training
(useful for resuming a previous training run) 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. <p></p> Example: <p></p> ```python
def generate_arrays_from_file(path):
while 1:
f = open(path)
for line in f:
# create numpy arrays of input data
# and labels, from each line in the file
x1, x2, y = process_line(line)
yield ({'input_1': x1, 'input_2': x2}, {'output': y})
f.close() <p></p> model.fit_generator(generate_arrays_from_file('/my_file.txt'),
steps_per_epoch=10000, epochs=10)
``` 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit_generator" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit_generator</strong>(<a href="../tensorflow.keras.utils/Sequence.htm">Sequence</a> generator, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> callbacks, <span title="System.ValueTuple<IEnumerable<object>, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;</span> validation_data, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> class_weight, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.bool">bool</span> shuffle, <span title="System.int">int</span> initial_epoch)
		</h4>
		<div class="content">Fits the model on data yielded batch-by-batch by a Python generator. <p></p> The generator is run in parallel to the model, for efficiency.
For instance, this allows you to do real-time data augmentation
on images on CPU in parallel to training your model on GPU. <p></p> The use of `keras.utils.Sequence` guarantees the ordering
and guarantees the single use of every input per epoch when
using `use_multiprocessing=True`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.keras.utils/Sequence.htm">Sequence</a></code> generator
						</dt>
						<dd>A generator or an instance of `Sequence`
(`keras.utils.Sequence`)
object in order to avoid duplicate data
when using multiprocessing.
The output of the generator must be either
- a tuple `(inputs, targets)`
- a tuple `(inputs, targets, sample_weights)`.
This tuple (a single output of the generator) makes a single batch.
Therefore, all arrays in this tuple must have the same length (equal
to the size of this batch). Different batches may have different
sizes.
For example, the last batch of the epoch is commonly smaller than
the
others, if the size of the dataset is not divisible by the batch
size.
The generator is expected to loop over its data
indefinitely. An epoch finishes when `steps_per_epoch`
batches have been seen by the model. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Total number of steps (batches of samples)
to yield from `generator` before declaring one epoch
finished and starting the next epoch. It should typically
be equal to the number of samples of your dataset
divided by the batch size.
Optional for `Sequence`: if unspecified, will use
the `len(generator)` as a number of steps. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer, total number of iterations on the data. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>Verbosity mode, 0, 1, or 2. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> callbacks
						</dt>
						<dd>List of callbacks to be called during training. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple<IEnumerable<object>, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;</span></code> validation_data
						</dt>
						<dd>This can be either
- a generator for the validation data
- a tuple (inputs, targets)
- a tuple (inputs, targets, sample_weights). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data`
is a generator. Total number of steps (batches of samples)
to yield from `generator` before stopping.
Optional for `Sequence`: if unspecified, will use
the `len(validation_data)` as a number of steps. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> class_weight
						</dt>
						<dd>Dictionary mapping class indices to a weight
for the class. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Maximum number of processes to spin up
when using process-based threading.
If unspecified, `workers` will default to 1. If 0, will
execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean.
If `True`, use process-based threading.
If unspecified, `use_multiprocessing` will default to `False`.
Note that because this implementation relies on multiprocessing,
you should not pass non-picklable arguments to the generator
as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> shuffle
						</dt>
						<dd>Boolean. Whether to shuffle the order of the batches at
the beginning of each epoch. Only used with instances
of `Sequence` (`keras.utils.Sequence`).
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Epoch at which to start training
(useful for resuming a previous training run) 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. <p></p> Example: <p></p> ```python
def generate_arrays_from_file(path):
while 1:
f = open(path)
for line in f:
# create numpy arrays of input data
# and labels, from each line in the file
x1, x2, y = process_line(line)
yield ({'input_1': x1, 'input_2': x2}, {'output': y})
f.close() <p></p> model.fit_generator(generate_arrays_from_file('/my_file.txt'),
steps_per_epoch=10000, epochs=10)
``` 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit_generator" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit_generator</strong>(<span title="System.Collections.Generic.IEnumerator<ValueTuple<IEnumerable<object>, object>>">IEnumerator&lt;ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;&gt;</span> generator, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps_per_epoch, <span title="System.int">int</span> epochs, <span title="System.int">int</span> verbose, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> callbacks, <span title="System.ValueTuple<IEnumerable<object>, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;</span> validation_data, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> validation_steps, <span title="System.int">int</span> validation_freq, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> class_weight, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.bool">bool</span> shuffle, <span title="System.int">int</span> initial_epoch)
		</h4>
		<div class="content">Fits the model on data yielded batch-by-batch by a Python generator. <p></p> The generator is run in parallel to the model, for efficiency.
For instance, this allows you to do real-time data augmentation
on images on CPU in parallel to training your model on GPU. <p></p> The use of `keras.utils.Sequence` guarantees the ordering
and guarantees the single use of every input per epoch when
using `use_multiprocessing=True`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerator<ValueTuple<IEnumerable<object>, object>>">IEnumerator&lt;ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;&gt;</span></code> generator
						</dt>
						<dd>A generator or an instance of `Sequence`
(`keras.utils.Sequence`)
object in order to avoid duplicate data
when using multiprocessing.
The output of the generator must be either
- a tuple `(inputs, targets)`
- a tuple `(inputs, targets, sample_weights)`.
This tuple (a single output of the generator) makes a single batch.
Therefore, all arrays in this tuple must have the same length (equal
to the size of this batch). Different batches may have different
sizes.
For example, the last batch of the epoch is commonly smaller than
the
others, if the size of the dataset is not divisible by the batch
size.
The generator is expected to loop over its data
indefinitely. An epoch finishes when `steps_per_epoch`
batches have been seen by the model. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps_per_epoch
						</dt>
						<dd>Total number of steps (batches of samples)
to yield from `generator` before declaring one epoch
finished and starting the next epoch. It should typically
be equal to the number of samples of your dataset
divided by the batch size.
Optional for `Sequence`: if unspecified, will use
the `len(generator)` as a number of steps. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> epochs
						</dt>
						<dd>Integer, total number of iterations on the data. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>Verbosity mode, 0, 1, or 2. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> callbacks
						</dt>
						<dd>List of callbacks to be called during training. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple<IEnumerable<object>, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object&gt;</span></code> validation_data
						</dt>
						<dd>This can be either
- a generator for the validation data
- a tuple (inputs, targets)
- a tuple (inputs, targets, sample_weights). 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data`
is a generator. Total number of steps (batches of samples)
to yield from `generator` before stopping.
Optional for `Sequence`: if unspecified, will use
the `len(validation_data)` as a number of steps. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> class_weight
						</dt>
						<dd>Dictionary mapping class indices to a weight
for the class. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Maximum number of processes to spin up
when using process-based threading.
If unspecified, `workers` will default to 1. If 0, will
execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean.
If `True`, use process-based threading.
If unspecified, `use_multiprocessing` will default to `False`.
Note that because this implementation relies on multiprocessing,
you should not pass non-picklable arguments to the generator
as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> shuffle
						</dt>
						<dd>Boolean. Whether to shuffle the order of the batches at
the beginning of each epoch. Only used with instances
of `Sequence` (`keras.utils.Sequence`).
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> initial_epoch
						</dt>
						<dd>Epoch at which to start training
(useful for resuming a previous training run) 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. <p></p> Example: <p></p> ```python
def generate_arrays_from_file(path):
while 1:
f = open(path)
for line in f:
# create numpy arrays of input data
# and labels, from each line in the file
x1, x2, y = process_line(line)
yield ({'input_1': x1, 'input_2': x2}, {'output': y})
f.close() <p></p> model.fit_generator(generate_arrays_from_file('/my_file.txt'),
steps_per_epoch=10000, epochs=10)
``` 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="fit_generator_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>fit_generator_dyn</strong>(<span title="System.object">object</span> generator, <span title="System.object">object</span> steps_per_epoch, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> epochs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> verbose, <span title="System.object">object</span> callbacks, <span title="System.object">object</span> validation_data, <span title="System.object">object</span> validation_steps, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> validation_freq, <span title="System.object">object</span> class_weight, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> max_queue_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> workers, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> use_multiprocessing, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> shuffle, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> initial_epoch)
		</h4>
		<div class="content">Fits the model on data yielded batch-by-batch by a Python generator. <p></p> The generator is run in parallel to the model, for efficiency.
For instance, this allows you to do real-time data augmentation
on images on CPU in parallel to training your model on GPU. <p></p> The use of `keras.utils.Sequence` guarantees the ordering
and guarantees the single use of every input per epoch when
using `use_multiprocessing=True`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> generator
						</dt>
						<dd>A generator or an instance of `Sequence`
(`keras.utils.Sequence`)
object in order to avoid duplicate data
when using multiprocessing.
The output of the generator must be either
- a tuple `(inputs, targets)`
- a tuple `(inputs, targets, sample_weights)`.
This tuple (a single output of the generator) makes a single batch.
Therefore, all arrays in this tuple must have the same length (equal
to the size of this batch). Different batches may have different
sizes.
For example, the last batch of the epoch is commonly smaller than
the
others, if the size of the dataset is not divisible by the batch
size.
The generator is expected to loop over its data
indefinitely. An epoch finishes when `steps_per_epoch`
batches have been seen by the model. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> steps_per_epoch
						</dt>
						<dd>Total number of steps (batches of samples)
to yield from `generator` before declaring one epoch
finished and starting the next epoch. It should typically
be equal to the number of samples of your dataset
divided by the batch size.
Optional for `Sequence`: if unspecified, will use
the `len(generator)` as a number of steps. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> epochs
						</dt>
						<dd>Integer, total number of iterations on the data. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> verbose
						</dt>
						<dd>Verbosity mode, 0, 1, or 2. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> callbacks
						</dt>
						<dd>List of callbacks to be called during training. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> validation_data
						</dt>
						<dd>This can be either
- a generator for the validation data
- a tuple (inputs, targets)
- a tuple (inputs, targets, sample_weights). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> validation_steps
						</dt>
						<dd>Only relevant if `validation_data`
is a generator. Total number of steps (batches of samples)
to yield from `generator` before stopping.
Optional for `Sequence`: if unspecified, will use
the `len(validation_data)` as a number of steps. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> validation_freq
						</dt>
						<dd>Only relevant if validation data is provided. Integer
or `collections_abc.Container` instance (e.g. list, tuple, etc.).
If an integer, specifies how many training epochs to run before a
new validation run is performed, e.g. `validation_freq=2` runs
validation every 2 epochs. If a Container, specifies the epochs on
which to run validation, e.g. `validation_freq=[1, 2, 10]` runs
validation at the end of the 1st, 2nd, and 10th epochs. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> class_weight
						</dt>
						<dd>Dictionary mapping class indices to a weight
for the class. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> max_queue_size
						</dt>
						<dd>Integer. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> workers
						</dt>
						<dd>Integer. Maximum number of processes to spin up
when using process-based threading.
If unspecified, `workers` will default to 1. If 0, will
execute the generator on the main thread. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> use_multiprocessing
						</dt>
						<dd>Boolean.
If `True`, use process-based threading.
If unspecified, `use_multiprocessing` will default to `False`.
Note that because this implementation relies on multiprocessing,
you should not pass non-picklable arguments to the generator
as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> shuffle
						</dt>
						<dd>Boolean. Whether to shuffle the order of the batches at
the beginning of each epoch. Only used with instances
of `Sequence` (`keras.utils.Sequence`).
Has no effect when `steps_per_epoch` is not `None`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> initial_epoch
						</dt>
						<dd>Epoch at which to start training
(useful for resuming a previous training run) 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A `History` object. <p></p> Example: <p></p> ```python
def generate_arrays_from_file(path):
while 1:
f = open(path)
for line in f:
# create numpy arrays of input data
# and labels, from each line in the file
x1, x2, y = process_line(line)
yield ({'input_1': x1, 'input_2': x2}, {'output': y})
f.close() <p></p> model.fit_generator(generate_arrays_from_file('/my_file.txt'),
steps_per_epoch=10000, epochs=10)
``` 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_input_at" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>get_input_at</strong>(<span title="System.int">int</span> node_index)
		</h4>
		<div class="content">Retrieves the input tensor(s) of a layer at a given node. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.int">int</span></code> node_index
						</dt>
						<dd>Integer, index of the node
from which to retrieve the attribute.
E.g. `node_index=0` will correspond to the
first time the layer was called. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span></code>
					</dt>
					<dd>A tensor (or list of tensors if the layer has multiple inputs). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_input_at_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_input_at_dyn</strong>(<span title="System.object">object</span> node_index)
		</h4>
		<div class="content">Retrieves the input tensor(s) of a layer at a given node. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> node_index
						</dt>
						<dd>Integer, index of the node
from which to retrieve the attribute.
E.g. `node_index=0` will correspond to the
first time the layer was called. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A tensor (or list of tensors if the layer has multiple inputs). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_input_mask_at" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_input_mask_at</strong>(<span title="System.int">int</span> node_index)
		</h4>
		<div class="content">Retrieves the input mask tensor(s) of a layer at a given node. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.int">int</span></code> node_index
						</dt>
						<dd>Integer, index of the node
from which to retrieve the attribute.
E.g. `node_index=0` will correspond to the
first time the layer was called. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A mask tensor
(or list of tensors if the layer has multiple inputs). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_input_mask_at_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_input_mask_at_dyn</strong>(<span title="System.object">object</span> node_index)
		</h4>
		<div class="content">Retrieves the input mask tensor(s) of a layer at a given node. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> node_index
						</dt>
						<dd>Integer, index of the node
from which to retrieve the attribute.
E.g. `node_index=0` will correspond to the
first time the layer was called. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A mask tensor
(or list of tensors if the layer has multiple inputs). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_input_shape_at" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>get_input_shape_at</strong>(<span title="System.int">int</span> node_index)
		</h4>
		<div class="content">Retrieves the input shape(s) of a layer at a given node. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.int">int</span></code> node_index
						</dt>
						<dd>Integer, index of the node
from which to retrieve the attribute.
E.g. `node_index=0` will correspond to the
first time the layer was called. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span></code>
					</dt>
					<dd>A shape tuple
(or list of shape tuples if the layer has multiple inputs). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_input_shape_at_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_input_shape_at_dyn</strong>(<span title="System.object">object</span> node_index)
		</h4>
		<div class="content">Retrieves the input shape(s) of a layer at a given node. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> node_index
						</dt>
						<dd>Integer, index of the node
from which to retrieve the attribute.
E.g. `node_index=0` will correspond to the
first time the layer was called. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A shape tuple
(or list of shape tuples if the layer has multiple inputs). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_layer" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_layer</strong>(<span title="System.string">string</span> name, <span title="System.object">object</span> index)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="get_layer_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_layer_dyn</strong>(<span title="System.object">object</span> name, <span title="System.object">object</span> index)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="get_losses_for" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>get_losses_for</strong>(<span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> inputs)
		</h4>
		<div class="content">Retrieves losses relevant to a specific set of inputs. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> inputs
						</dt>
						<dd>Input tensor or list/tuple of input tensors. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span></code>
					</dt>
					<dd>List of loss tensors of the layer that depend on `inputs`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_losses_for" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>get_losses_for</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> inputs)
		</h4>
		<div class="content">Retrieves losses relevant to a specific set of inputs. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> inputs
						</dt>
						<dd>Input tensor or list/tuple of input tensors. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span></code>
					</dt>
					<dd>List of loss tensors of the layer that depend on `inputs`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_losses_for" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>get_losses_for</strong>(<span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> inputs)
		</h4>
		<div class="content">Retrieves losses relevant to a specific set of inputs. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> inputs
						</dt>
						<dd>Input tensor or list/tuple of input tensors. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span></code>
					</dt>
					<dd>List of loss tensors of the layer that depend on `inputs`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_losses_for_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_losses_for_dyn</strong>(<span title="System.object">object</span> inputs)
		</h4>
		<div class="content">Retrieves losses relevant to a specific set of inputs. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> inputs
						</dt>
						<dd>Input tensor or list/tuple of input tensors. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>List of loss tensors of the layer that depend on `inputs`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_output_at" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>get_output_at</strong>(<span title="System.int">int</span> node_index)
		</h4>
		<div class="content">Retrieves the output tensor(s) of a layer at a given node. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.int">int</span></code> node_index
						</dt>
						<dd>Integer, index of the node
from which to retrieve the attribute.
E.g. `node_index=0` will correspond to the
first time the layer was called. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span></code>
					</dt>
					<dd>A tensor (or list of tensors if the layer has multiple outputs). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_output_at_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_output_at_dyn</strong>(<span title="System.object">object</span> node_index)
		</h4>
		<div class="content">Retrieves the output tensor(s) of a layer at a given node. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> node_index
						</dt>
						<dd>Integer, index of the node
from which to retrieve the attribute.
E.g. `node_index=0` will correspond to the
first time the layer was called. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A tensor (or list of tensors if the layer has multiple outputs). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_output_mask_at" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_output_mask_at</strong>(<span title="System.int">int</span> node_index)
		</h4>
		<div class="content">Retrieves the output mask tensor(s) of a layer at a given node. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.int">int</span></code> node_index
						</dt>
						<dd>Integer, index of the node
from which to retrieve the attribute.
E.g. `node_index=0` will correspond to the
first time the layer was called. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A mask tensor
(or list of tensors if the layer has multiple outputs). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_output_mask_at_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_output_mask_at_dyn</strong>(<span title="System.object">object</span> node_index)
		</h4>
		<div class="content">Retrieves the output mask tensor(s) of a layer at a given node. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> node_index
						</dt>
						<dd>Integer, index of the node
from which to retrieve the attribute.
E.g. `node_index=0` will correspond to the
first time the layer was called. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A mask tensor
(or list of tensors if the layer has multiple outputs). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_output_shape_at" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>get_output_shape_at</strong>(<span title="System.int">int</span> node_index)
		</h4>
		<div class="content">Retrieves the output shape(s) of a layer at a given node. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.int">int</span></code> node_index
						</dt>
						<dd>Integer, index of the node
from which to retrieve the attribute.
E.g. `node_index=0` will correspond to the
first time the layer was called. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span></code>
					</dt>
					<dd>A shape tuple
(or list of shape tuples if the layer has multiple outputs). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_output_shape_at_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_output_shape_at_dyn</strong>(<span title="System.object">object</span> node_index)
		</h4>
		<div class="content">Retrieves the output shape(s) of a layer at a given node. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> node_index
						</dt>
						<dd>Integer, index of the node
from which to retrieve the attribute.
E.g. `node_index=0` will correspond to the
first time the layer was called. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A shape tuple
(or list of shape tuples if the layer has multiple outputs). 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="get_weights_" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_weights_</strong>()
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="get_weights_dyn_" class="method">
		<h4>
			<span title="System.object">object</span> <strong>get_weights_dyn_</strong>()
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="predict" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.bool">bool</span> verbose, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Generates output predictions for the input samples. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input samples. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>Verbosity mode, 0 or 1. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Total number of steps (batches of samples)
before declaring the prediction round finished.
Ignored with the default value of `None`. If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a>
dataset and `steps` is None, `predict` will
run until the input dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during prediction.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Numpy array(s) of predictions. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="predict" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict</strong>(<span title="System.object">object</span> x, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Generates output predictions for the input samples. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input samples. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>Verbosity mode, 0 or 1. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Total number of steps (batches of samples)
before declaring the prediction round finished.
Ignored with the default value of `None`. If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a>
dataset and `steps` is None, `predict` will
run until the input dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during prediction.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Numpy array(s) of predictions. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="predict" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.bool">bool</span> verbose, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Generates output predictions for the input samples. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input samples. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>Verbosity mode, 0 or 1. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Total number of steps (batches of samples)
before declaring the prediction round finished.
Ignored with the default value of `None`. If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a>
dataset and `steps` is None, `predict` will
run until the input dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during prediction.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Numpy array(s) of predictions. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="predict" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict</strong>(<span title="System.object">object</span> x, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.bool">bool</span> verbose, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Generates output predictions for the input samples. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input samples. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>Verbosity mode, 0 or 1. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Total number of steps (batches of samples)
before declaring the prediction round finished.
Ignored with the default value of `None`. If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a>
dataset and `steps` is None, `predict` will
run until the input dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during prediction.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Numpy array(s) of predictions. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="predict" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Generates output predictions for the input samples. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input samples. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>Verbosity mode, 0 or 1. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Total number of steps (batches of samples)
before declaring the prediction round finished.
Ignored with the default value of `None`. If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a>
dataset and `steps` is None, `predict` will
run until the input dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during prediction.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Numpy array(s) of predictions. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="predict" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Generates output predictions for the input samples. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input samples. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>Verbosity mode, 0 or 1. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Total number of steps (batches of samples)
before declaring the prediction round finished.
Ignored with the default value of `None`. If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a>
dataset and `steps` is None, `predict` will
run until the input dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during prediction.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Numpy array(s) of predictions. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="predict" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict</strong>(<span title="System.object">object</span> x, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.bool">bool</span> verbose, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Generates output predictions for the input samples. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input samples. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> verbose
						</dt>
						<dd>Verbosity mode, 0 or 1. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Total number of steps (batches of samples)
before declaring the prediction round finished.
Ignored with the default value of `None`. If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a>
dataset and `steps` is None, `predict` will
run until the input dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during prediction.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Numpy array(s) of predictions. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="predict" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict</strong>(<span title="System.object">object</span> x, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> batch_size, <span title="System.int">int</span> verbose, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> callbacks, <span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing)
		</h4>
		<div class="content">Generates output predictions for the input samples. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input samples. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>Verbosity mode, 0 or 1. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Total number of steps (batches of samples)
before declaring the prediction round finished.
Ignored with the default value of `None`. If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a>
dataset and `steps` is None, `predict` will
run until the input dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during prediction.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<Callback>">IEnumerable&lt;Callback&gt;</span></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Numpy array(s) of predictions. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="predict_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict_dyn</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> batch_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> verbose, <span title="System.object">object</span> steps, <span title="System.object">object</span> callbacks, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> max_queue_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> workers, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> use_multiprocessing)
		</h4>
		<div class="content">Generates output predictions for the input samples. <p></p> Computation is done in batches. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input samples. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset.
- A generator or `keras.utils.Sequence` instance. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> batch_size
						</dt>
						<dd>Integer or `None`.
Number of samples per gradient update.
If unspecified, `batch_size` will default to 32.
Do not specify the `batch_size` is your data is in the
form of symbolic tensors, dataset,
generators, or `keras.utils.Sequence` instances (since they generate
batches). 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> verbose
						</dt>
						<dd>Verbosity mode, 0 or 1. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> steps
						</dt>
						<dd>Total number of steps (batches of samples)
before declaring the prediction round finished.
Ignored with the default value of `None`. If x is a <a href="..\..\tf\data.md"><code>tf.data</code></a>
dataset and `steps` is None, `predict` will
run until the input dataset is exhausted. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during prediction.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> max_queue_size
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence`
input only. Maximum size for the generator queue.
If unspecified, `max_queue_size` will default to 10. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> workers
						</dt>
						<dd>Integer. Used for generator or `keras.utils.Sequence` input
only. Maximum number of processes to spin up when using
process-based threading. If unspecified, `workers` will default
to 1. If 0, will execute the generator on the main thread. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> use_multiprocessing
						</dt>
						<dd>Boolean. Used for generator or
`keras.utils.Sequence` input only. If `True`, use process-based
threading. If unspecified, `use_multiprocessing` will default to
`False`. Note that because this implementation relies on
multiprocessing, you should not pass non-picklable arguments to
the generator as they can't be passed easily to children processes. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Numpy array(s) of predictions. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="predict_generator" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict_generator</strong>(<span title="System.Collections.Generic.IEnumerator<object>">IEnumerator&lt;object&gt;</span> generator, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> steps, <span title="System.object">object</span> callbacks, <span title="System.int">int</span> max_queue_size, <span title="System.int">int</span> workers, <span title="System.bool">bool</span> use_multiprocessing, <span title="System.int">int</span> verbose)
		</h4>
		<div class="content">Generates predictions for the input samples from a data generator. <p></p> The generator should return the same kind of data as accepted by
`predict_on_batch`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerator<object>">IEnumerator&lt;object&gt;</span></code> generator
						</dt>
						<dd>Generator yielding batches of input samples
or an instance of `keras.utils.Sequence` object in order to
avoid duplicate data when using multiprocessing. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> steps
						</dt>
						<dd>Total number of steps (batches of samples)
to yield from `generator` before stopping.
Optional for `Sequence`: if unspecified, will use
the `len(generator)` as a number of steps. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during prediction.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> max_queue_size
						</dt>
						<dd>Maximum size for the generator queue. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> workers
						</dt>
						<dd>Integer. Maximum number of processes to spin up
when using process-based threading.
If unspecified, `workers` will default to 1. If 0, will
execute the generator on the main thread. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> use_multiprocessing
						</dt>
						<dd>Boolean.
If `True`, use process-based threading.
If unspecified, `use_multiprocessing` will default to `False`.
Note that because this implementation relies on multiprocessing,
you should not pass non-picklable arguments to the generator
as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> verbose
						</dt>
						<dd>verbosity mode, 0 or 1. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Numpy array(s) of predictions. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="predict_generator_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict_generator_dyn</strong>(<span title="System.object">object</span> generator, <span title="System.object">object</span> steps, <span title="System.object">object</span> callbacks, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> max_queue_size, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> workers, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> use_multiprocessing, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> verbose)
		</h4>
		<div class="content">Generates predictions for the input samples from a data generator. <p></p> The generator should return the same kind of data as accepted by
`predict_on_batch`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> generator
						</dt>
						<dd>Generator yielding batches of input samples
or an instance of `keras.utils.Sequence` object in order to
avoid duplicate data when using multiprocessing. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> steps
						</dt>
						<dd>Total number of steps (batches of samples)
to yield from `generator` before stopping.
Optional for `Sequence`: if unspecified, will use
the `len(generator)` as a number of steps. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> callbacks
						</dt>
						<dd>List of `keras.callbacks.Callback` instances.
List of callbacks to apply during prediction.
See [callbacks](/api_docs/python/tf/keras/callbacks). 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> max_queue_size
						</dt>
						<dd>Maximum size for the generator queue. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> workers
						</dt>
						<dd>Integer. Maximum number of processes to spin up
when using process-based threading.
If unspecified, `workers` will default to 1. If 0, will
execute the generator on the main thread. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> use_multiprocessing
						</dt>
						<dd>Boolean.
If `True`, use process-based threading.
If unspecified, `use_multiprocessing` will default to `False`.
Note that because this implementation relies on multiprocessing,
you should not pass non-picklable arguments to the generator
as they can't be passed easily to children processes. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> verbose
						</dt>
						<dd>verbosity mode, 0 or 1. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Numpy array(s) of predictions. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="reset_metrics" class="method">
		<h4>
			<span title="System.void">void</span> <strong>reset_metrics</strong>()
		</h4>
		<div class="content">Resets the state of metrics. 




		</div>
	</div>
	<div id="reset_metrics_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>reset_metrics_dyn</strong>()
		</h4>
		<div class="content">Resets the state of metrics. 




		</div>
	</div>
	<div id="reset_states" class="method">
		<h4>
			<span title="System.void">void</span> <strong>reset_states</strong>()
		</h4>
		<div class="content">Resets all of the metric state variables. <p></p> This function is called between epochs/steps,
when a metric is evaluated during training. 




		</div>
	</div>
	<div id="reset_states_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>reset_states_dyn</strong>()
		</h4>
		<div class="content">Resets all of the metric state variables. <p></p> This function is called between epochs/steps,
when a metric is evaluated during training. 




		</div>
	</div>
	<div id="save" class="method">
		<h4>
			<span title="System.object">object</span> <strong>save</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> filepath, <span title="System.bool">bool</span> overwrite, <span title="System.bool">bool</span> include_optimizer, <span title="System.string">string</span> save_format, <span title="System.object">object</span> signatures)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="save" class="method">
		<h4>
			<span title="System.object">object</span> <strong>save</strong>(<span title="System.string">string</span> filepath, <span title="System.bool">bool</span> overwrite, <span title="System.bool">bool</span> include_optimizer, <span title="System.string">string</span> save_format, <span title="System.object">object</span> signatures)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="save" class="method">
		<h4>
			<span title="System.object">object</span> <strong>save</strong>(<span title="System.Byte[]">Byte[]</span> filepath, <span title="System.bool">bool</span> overwrite, <span title="System.bool">bool</span> include_optimizer, <span title="System.string">string</span> save_format, <span title="System.object">object</span> signatures)
		</h4>
		<div class="content">




		</div>
	</div>
	<div id="test_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_on_batch</strong>(<span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> x, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Test the model on a single batch of samples. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset `y` should
not be specified (since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample.
In the case of temporal data, you can pass a 2D array
with shape (samples, sequence_length),
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="test_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_on_batch</strong>(<span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> x, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Test the model on a single batch of samples. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset `y` should
not be specified (since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample.
In the case of temporal data, you can pass a 2D array
with shape (samples, sequence_length),
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="test_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_on_batch</strong>(<span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> x, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Test the model on a single batch of samples. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset `y` should
not be specified (since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample.
In the case of temporal data, you can pass a 2D array
with shape (samples, sequence_length),
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="test_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_on_batch</strong>(<span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> x, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Test the model on a single batch of samples. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset `y` should
not be specified (since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample.
In the case of temporal data, you can pass a 2D array
with shape (samples, sequence_length),
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="test_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_on_batch</strong>(<a href="../numpy/ndarray.htm">ndarray</a> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Test the model on a single batch of samples. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset `y` should
not be specified (since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample.
In the case of temporal data, you can pass a 2D array
with shape (samples, sequence_length),
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="test_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_on_batch</strong>(<span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Test the model on a single batch of samples. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset `y` should
not be specified (since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample.
In the case of temporal data, you can pass a 2D array
with shape (samples, sequence_length),
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="test_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_on_batch</strong>(<span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Test the model on a single batch of samples. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset `y` should
not be specified (since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample.
In the case of temporal data, you can pass a 2D array
with shape (samples, sequence_length),
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="test_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_on_batch</strong>(<a href="../numpy/ndarray.htm">ndarray</a> x, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Test the model on a single batch of samples. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset `y` should
not be specified (since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample.
In the case of temporal data, you can pass a 2D array
with shape (samples, sequence_length),
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="test_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_on_batch</strong>(<a href="../numpy/ndarray.htm">ndarray</a> x, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Test the model on a single batch of samples. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset `y` should
not be specified (since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample.
In the case of temporal data, you can pass a 2D array
with shape (samples, sequence_length),
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="test_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_on_batch</strong>(<a href="../numpy/ndarray.htm">ndarray</a> x, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Test the model on a single batch of samples. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset `y` should
not be specified (since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample.
In the case of temporal data, you can pass a 2D array
with shape (samples, sequence_length),
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="test_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_on_batch</strong>(<a href="../numpy/ndarray.htm">ndarray</a> x, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Test the model on a single batch of samples. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset `y` should
not be specified (since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample.
In the case of temporal data, you can pass a 2D array
with shape (samples, sequence_length),
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="test_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_on_batch</strong>(<a href="../numpy/ndarray.htm">ndarray</a> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Test the model on a single batch of samples. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`,
it could be either Numpy array(s) or TensorFlow tensor(s).
It should be consistent with `x` (you cannot have Numpy inputs and
tensor targets, or inversely). If `x` is a dataset `y` should
not be specified (since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample.
In the case of temporal data, you can pass a 2D array
with shape (samples, sequence_length),
to apply a different weight to every timestep of every sample.
In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar test loss (if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.object">object</span> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.object">object</span> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <a href="../numpy/ndarray.htm">ndarray</a> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.object">object</span> x, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.object">object</span> x, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <span title="System.object">object</span> y, <a href="../numpy/ndarray.htm">ndarray</a> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.object">object</span> x, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch</strong>(<span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span> x, <span title="System.object">object</span> y, <span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span> sample_weight, <span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span> class_weight, <span title="System.bool">bool</span> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<IGraphNodeBase>">IEnumerable&lt;IGraphNodeBase&gt;</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, object>">IDictionary&lt;string, object&gt;</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<int, double>">IDictionary&lt;int, double&gt;</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><span title="System.bool">bool</span></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="train_on_batch_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_on_batch_dyn</strong>(<span title="System.object">object</span> x, <span title="System.object">object</span> y, <span title="System.object">object</span> sample_weight, <span title="System.object">object</span> class_weight, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> reset_metrics)
		</h4>
		<div class="content">Runs a single gradient update on a single batch of data. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> x
						</dt>
						<dd>Input data. It could be:
- A Numpy array (or array-like), or a list of arrays
(in case the model has multiple inputs).
- A TensorFlow tensor, or a list of tensors
(in case the model has multiple inputs).
- A dict mapping input names to the corresponding array/tensors,
if the model has named inputs.
- A <a href="..\..\tf\data.md"><code>tf.data</code></a> dataset. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> y
						</dt>
						<dd>Target data. Like the input data `x`, it could be either Numpy
array(s) or TensorFlow tensor(s). It should be consistent with `x`
(you cannot have Numpy inputs and tensor targets, or inversely). If
`x` is a dataset, `y` should not be specified
(since targets will be obtained from the iterator). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> sample_weight
						</dt>
						<dd>Optional array of the same length as x, containing
weights to apply to the model's loss for each sample. In the case of
temporal data, you can pass a 2D array with shape (samples,
sequence_length), to apply a different weight to every timestep of
every sample. In this case you should make sure to specify
sample_weight_mode="temporal" in compile(). This argument is not
supported when `x` is a dataset. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> class_weight
						</dt>
						<dd>Optional dictionary mapping class indices (integers) to a
weight (float) to apply to the model's loss for the samples from this
class during training. This can be useful to tell the model to "pay
more attention" to samples from an under-represented class. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> reset_metrics
						</dt>
						<dd>If `True`, the metrics returned will be only for this
batch. If `False`, the metrics will be statefully accumulated across
batches. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>Scalar training loss
(if the model has a single output and no metrics)
or list of scalars (if the model has multiple outputs
and/or metrics). The attribute `model.metrics_names` will give you
the display labels for the scalar outputs. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	
	
	<h3 class="section">Public properties</h3>

	<div id="activity_regularizer" class="method">
		<h4>
			<a href="../LostTech.Gradient/PythonFunctionContainer.htm">PythonFunctionContainer</a> <strong>activity_regularizer</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="activity_regularizer_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>activity_regularizer_dyn</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="built" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>built</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="dtype" class="method">
		<h4>
			<span title="System.object">object</span> <strong>dtype</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="dtype_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>dtype_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="dynamic" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>dynamic</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="dynamic_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>dynamic_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="inbound_nodes" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<Node>">IList&lt;Node&gt;</span> <strong>inbound_nodes</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="inbound_nodes_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>inbound_nodes_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>input</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>input_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_mask" class="method">
		<h4>
			<span title="System.object">object</span> <strong>input_mask</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_mask_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>input_mask_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_names" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>input_names</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_shape" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>input_shape</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_shape_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>input_shape_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_spec" class="method">
		<h4>
			<span title="System.object">object</span> <strong>input_spec</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="input_spec_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>input_spec_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="inputs" class="method">
		<h4>
			<span title="System.object">object</span> <strong>inputs</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="layers" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<Layer>">IList&lt;Layer&gt;</span> <strong>layers</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="layers_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>layers_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="loss" class="method">
		<h4>
			<span title="System.object">object</span> <strong>loss</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="loss_functions" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>loss_functions</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="loss_weights" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<double>">IList&lt;double&gt;</span> <strong>loss_weights</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="losses" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>losses</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="losses_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>losses_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="metrics" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>metrics</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="metrics_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>metrics_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="metrics_names" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>metrics_names</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="metrics_names_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>metrics_names_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="name" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="name_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="name_scope" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name_scope</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="name_scope_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>name_scope_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="non_trainable_variables" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>non_trainable_variables</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="non_trainable_variables_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>non_trainable_variables_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="non_trainable_weights" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>non_trainable_weights</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="non_trainable_weights_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>non_trainable_weights_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="optimizer" class="method">
		<h4>
			<span title="System.object">object</span> <strong>optimizer</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="outbound_nodes" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>outbound_nodes</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="outbound_nodes_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>outbound_nodes_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>output</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output_mask" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_mask</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output_mask_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_mask_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output_names" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<string>">IList&lt;string&gt;</span> <strong>output_names</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output_shape" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_shape</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="output_shape_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_shape_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="outputs" class="method">
		<h4>
			<span title="System.object">object</span> <strong>outputs</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="predict_function" class="method">
		<h4>
			<span title="System.object">object</span> <strong>predict_function</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="PythonObject" class="method">
		<h4>
			<span title="System.object">object</span> <strong>PythonObject</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="run_eagerly" class="method">
		<h4>
			<span title="System.Nullable<bool>">Nullable&lt;bool&gt;</span> <strong>run_eagerly</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="run_eagerly_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>run_eagerly_dyn</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sample_weight_mode" class="method">
		<h4>
			<span title="System.string">string</span> <strong>sample_weight_mode</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sample_weights" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<Tensor>">IList&lt;Tensor&gt;</span> <strong>sample_weights</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="sample_weights_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>sample_weights_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="state_updates" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>state_updates</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="state_updates_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>state_updates_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="stateful" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>stateful</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="stateful_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>stateful_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="submodules" class="method">
		<h4>
			<span title="System.ValueTuple<object>">ValueTuple&lt;object&gt;</span> <strong>submodules</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="submodules_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>submodules_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="supports_masking" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>supports_masking</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="test_function" class="method">
		<h4>
			<span title="System.object">object</span> <strong>test_function</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="total_loss" class="method">
		<h4>
			<span title="System.Nullable<double>">Nullable&lt;double&gt;</span> <strong>total_loss</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="train_function" class="method">
		<h4>
			<span title="System.object">object</span> <strong>train_function</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable" class="method">
		<h4>
			<span title="System.bool">bool</span> <strong>trainable</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>trainable_dyn</strong> get; set;
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable_variables" class="method">
		<h4>
			<span title="System.object">object</span> <strong>trainable_variables</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable_variables_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>trainable_variables_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable_weights" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>trainable_weights</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="trainable_weights_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>trainable_weights_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="updates" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>updates</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="updates_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>updates_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="variables" class="method">
		<h4>
			<span title="System.object">object</span> <strong>variables</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="variables_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>variables_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="weights" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<object>">IList&lt;object&gt;</span> <strong>weights</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="weights_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>weights_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	</section>
	</article><footer>
	<span id="version">Built from v1.15.0.0 of LostTech.TensorFlow</span>
	<span id="docu-link">
		Generated by <a href="http://docu.jagregory.com">docu</a>
	</span>
</footer>
  </body>
</html>