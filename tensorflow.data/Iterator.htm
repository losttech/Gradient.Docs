<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    <title>Iterator - LostTech.TensorFlow Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body>
  	<header><h1>LostTech.TensorFlow : API Documentation</h1>
	</header>

    <nav id="namespaces">
      <iframe src="../namespaces.htm"></iframe>
    </nav><nav id="types">
  <h2 class="fixed">Types in tensorflow.data</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../tensorflow.data/Dataset.htm">Dataset</a>
        </li>
				<li>
            <a href="../tensorflow.data/DatasetSpec.htm">DatasetSpec</a>
        </li>
				<li>
            <a href="../tensorflow.data/FixedLengthRecordDataset.htm">FixedLengthRecordDataset</a>
        </li>
				<li>
            <a href="../tensorflow.data/IDataset.htm">IDataset</a>
        </li>
				<li>
            <a href="../tensorflow.data/IDatasetSpec.htm">IDatasetSpec</a>
        </li>
				<li>
            <a href="../tensorflow.data/IFixedLengthRecordDataset.htm">IFixedLengthRecordDataset</a>
        </li>
				<li>
            <a href="../tensorflow.data/IIterator.htm">IIterator</a>
        </li>
				<li>
            <a href="../tensorflow.data/IOptions.htm">IOptions</a>
        </li>
				<li>
            <a href="../tensorflow.data/Iterator.htm" class="current">Iterator</a>
        </li>
				<li>
            <a href="../tensorflow.data/ITextLineDataset.htm">ITextLineDataset</a>
        </li>
				<li>
            <a href="../tensorflow.data/ITFRecordDataset.htm">ITFRecordDataset</a>
        </li>
				<li>
            <a href="../tensorflow.data/Options.htm">Options</a>
        </li>
				<li>
            <a href="../tensorflow.data/TextLineDataset.htm">TextLineDataset</a>
        </li>
				<li>
            <a href="../tensorflow.data/TFRecordDataset.htm">TFRecordDataset</a>
        </li>
		</ul>
	</div>
</nav>
	<article>
    <header>
		<p class="class"><strong>Type</strong> Iterator</p>
	</header>
	<section>
		<header>
		<p><strong>Namespace</strong> tensorflow.data</p>
		<p><strong>Parent</strong> <a href="../LostTech.Gradient/PythonObjectContainer.htm">PythonObjectContainer</a></p>
		<p><strong>Interfaces</strong> <a href="../tensorflow.python.training.tracking.base/Trackable.htm">Trackable</a>, <a href="../tensorflow.data/IIterator.htm">IIterator</a></p>
		</header>
    <div class="sub-header">
			<div id="summary">Represents the state of iterating through a `Dataset`. 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../tensorflow.data/Iterator.htm#from_string_handle">from_string_handle</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#from_string_handle">from_string_handle</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#from_string_handle">from_string_handle</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#from_string_handle">from_string_handle</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#from_string_handle_dyn">from_string_handle_dyn</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#from_structure">from_structure</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#from_structure">from_structure</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#from_structure">from_structure</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#from_structure">from_structure</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#from_structure">from_structure</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#from_structure">from_structure</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#from_structure_dyn">from_structure_dyn</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#make_initializer">make_initializer</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#make_initializer">make_initializer</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#make_initializer">make_initializer</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#make_initializer">make_initializer</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#make_initializer_dyn">make_initializer_dyn</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#string_handle">string_handle</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#string_handle_dyn">string_handle_dyn</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../tensorflow.data/Iterator.htm#element_spec">element_spec</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#element_spec_dyn">element_spec_dyn</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#initializer">initializer</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#initializer_dyn">initializer_dyn</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#output_classes">output_classes</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#output_classes_dyn">output_classes_dyn</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#output_shapes">output_shapes</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#output_shapes_dyn">output_shapes_dyn</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#output_types">output_types</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#output_types_dyn">output_types_dyn</a></li>
				<li><a href="../tensorflow.data/Iterator.htm#PythonObject">PythonObject</a></li>
			</ul>
		
	</div>
	
	<h3 class="section">Public instance methods</h3>

	<div id="make_initializer" class="method">
		<h4>
			<span title="System.object">object</span> <strong>make_initializer</strong>(<a href="../tensorflow.data/Dataset.htm">Dataset</a> dataset, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Returns a <a href="..\..\tf\Operation.md"><code>tf.Operation</code></a> that initializes this iterator on `dataset`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.data/Dataset.htm">Dataset</a></code> dataset
						</dt>
						<dd>A `Dataset` with compatible structure to this iterator. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>(Optional.) A name for the created operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A <a href="..\..\tf\Operation.md"><code>tf.Operation</code></a> that can be run to initialize this iterator on the given
`dataset`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="make_initializer" class="method">
		<h4>
			<span title="System.object">object</span> <strong>make_initializer</strong>(<a href="../tensorflow.python.data.ops.dataset_ops/BatchDataset.htm">BatchDataset</a> dataset, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Returns a <a href="..\..\tf\Operation.md"><code>tf.Operation</code></a> that initializes this iterator on `dataset`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.data.ops.dataset_ops/BatchDataset.htm">BatchDataset</a></code> dataset
						</dt>
						<dd>A `Dataset` with compatible structure to this iterator. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>(Optional.) A name for the created operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A <a href="..\..\tf\Operation.md"><code>tf.Operation</code></a> that can be run to initialize this iterator on the given
`dataset`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="make_initializer" class="method">
		<h4>
			<span title="System.object">object</span> <strong>make_initializer</strong>(<a href="../tensorflow.python.data.ops.dataset_ops/DatasetV1Adapter.htm">DatasetV1Adapter</a> dataset, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Returns a <a href="..\..\tf\Operation.md"><code>tf.Operation</code></a> that initializes this iterator on `dataset`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.data.ops.dataset_ops/DatasetV1Adapter.htm">DatasetV1Adapter</a></code> dataset
						</dt>
						<dd>A `Dataset` with compatible structure to this iterator. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>(Optional.) A name for the created operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A <a href="..\..\tf\Operation.md"><code>tf.Operation</code></a> that can be run to initialize this iterator on the given
`dataset`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="make_initializer" class="method">
		<h4>
			<span title="System.object">object</span> <strong>make_initializer</strong>(<a href="../tensorflow.python.data.ops.dataset_ops/RepeatDataset.htm">RepeatDataset</a> dataset, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Returns a <a href="..\..\tf\Operation.md"><code>tf.Operation</code></a> that initializes this iterator on `dataset`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow.python.data.ops.dataset_ops/RepeatDataset.htm">RepeatDataset</a></code> dataset
						</dt>
						<dd>A `Dataset` with compatible structure to this iterator. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>(Optional.) A name for the created operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A <a href="..\..\tf\Operation.md"><code>tf.Operation</code></a> that can be run to initialize this iterator on the given
`dataset`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="make_initializer_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>make_initializer_dyn</strong>(<span title="System.object">object</span> dataset, <span title="System.object">object</span> name)
		</h4>
		<div class="content">Returns a <a href="..\..\tf\Operation.md"><code>tf.Operation</code></a> that initializes this iterator on `dataset`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> dataset
						</dt>
						<dd>A `Dataset` with compatible structure to this iterator. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>(Optional.) A name for the created operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A <a href="..\..\tf\Operation.md"><code>tf.Operation</code></a> that can be run to initialize this iterator on the given
`dataset`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="string_handle" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>string_handle</strong>(<span title="System.string">string</span> name)
		</h4>
		<div class="content">Returns a string-valued <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a> that represents this iterator. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>(Optional.) A name for the created operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A scalar <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a> of type <a href="..\..\tf\dtypes\string.md"><code>tf.string</code></a>. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="string_handle_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>string_handle_dyn</strong>(<span title="System.object">object</span> name)
		</h4>
		<div class="content">Returns a string-valued <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a> that represents this iterator. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>(Optional.) A name for the created operation. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A scalar <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a> of type <a href="..\..\tf\dtypes\string.md"><code>tf.string</code></a>. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	
	<h3 class="section">Public static methods</h3>

	<div id="from_string_handle" class="method">
		<h4>
			<a href="../tensorflow.data/Iterator.htm">Iterator</a> <strong>from_string_handle</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> string_handle, <a href="../tensorflow/DType.htm">DType</a> output_types, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> output_shapes, <span title="System.object">object</span> output_classes)
		</h4>
		<div class="content">Creates a new, uninitialized `Iterator` based on the given handle. <p></p> This method allows you to define a "feedable" iterator where you can choose
between concrete iterators by feeding a value in a <a href="..\..\tf\InteractiveSession\run.md"><code>tf.Session.run</code></a> call.
In that case, `string_handle` would be a `tf.compat.v1.placeholder`, and you
would
feed it with the value of <a href="..\..\tf\data\Iterator\string_handle.md"><code>tf.data.Iterator.string_handle</code></a> in each step. <p></p> For example, if you had two iterators that marked the current position in
a training dataset and a test dataset, you could choose which to use in
each step as follows: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> string_handle
						</dt>
						<dd>A scalar <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a> of type <a href="..\..\tf\dtypes\string.md"><code>tf.string</code></a> that evaluates to
a handle produced by the `Iterator.string_handle()` method. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> output_types
						</dt>
						<dd>A nested structure of <a href="..\..\tf\dtypes\DType.md"><code>tf.DType</code></a> objects corresponding to
each component of an element of this dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> output_shapes
						</dt>
						<dd>(Optional.) A nested structure of <a href="..\..\tf\TensorShape.md"><code>tf.TensorShape</code></a> objects
corresponding to each component of an element of this dataset. If
omitted, each component will have an unconstrainted shape. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_classes
						</dt>
						<dd>(Optional.) A nested structure of Python `type` objects
corresponding to each component of an element of this iterator. If
omitted, each component is assumed to be of type <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.data/Iterator.htm">Iterator</a></code>
					</dt>
					<dd>An `Iterator`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>train_iterator = tf.data.Dataset(...).make_one_shot_iterator()
            train_iterator_handle = sess.run(train_iterator.string_handle()) <p></p> test_iterator = tf.data.Dataset(...).make_one_shot_iterator()
test_iterator_handle = sess.run(test_iterator.string_handle()) <p></p> handle = tf.compat.v1.placeholder(tf.string, shape=[])
iterator = tf.data.Iterator.from_string_handle(
    handle, train_iterator.output_types) <p></p> next_element = iterator.get_next()
loss = f(next_element) <p></p> train_loss = sess.run(loss, feed_dict={handle: train_iterator_handle})
test_loss = sess.run(loss, feed_dict={handle: test_iterator_handle}) </pre>
</div>
		</div>
	</div>
	<div id="from_string_handle" class="method">
		<h4>
			<a href="../tensorflow.data/Iterator.htm">Iterator</a> <strong>from_string_handle</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> string_handle, <a href="../tensorflow/DType.htm">DType</a> output_types, <a href="../tensorflow/TensorShape.htm">TensorShape</a> output_shapes, <span title="System.object">object</span> output_classes)
		</h4>
		<div class="content">Creates a new, uninitialized `Iterator` based on the given handle. <p></p> This method allows you to define a "feedable" iterator where you can choose
between concrete iterators by feeding a value in a <a href="..\..\tf\InteractiveSession\run.md"><code>tf.Session.run</code></a> call.
In that case, `string_handle` would be a `tf.compat.v1.placeholder`, and you
would
feed it with the value of <a href="..\..\tf\data\Iterator\string_handle.md"><code>tf.data.Iterator.string_handle</code></a> in each step. <p></p> For example, if you had two iterators that marked the current position in
a training dataset and a test dataset, you could choose which to use in
each step as follows: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> string_handle
						</dt>
						<dd>A scalar <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a> of type <a href="..\..\tf\dtypes\string.md"><code>tf.string</code></a> that evaluates to
a handle produced by the `Iterator.string_handle()` method. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> output_types
						</dt>
						<dd>A nested structure of <a href="..\..\tf\dtypes\DType.md"><code>tf.DType</code></a> objects corresponding to
each component of an element of this dataset. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> output_shapes
						</dt>
						<dd>(Optional.) A nested structure of <a href="..\..\tf\TensorShape.md"><code>tf.TensorShape</code></a> objects
corresponding to each component of an element of this dataset. If
omitted, each component will have an unconstrainted shape. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_classes
						</dt>
						<dd>(Optional.) A nested structure of Python `type` objects
corresponding to each component of an element of this iterator. If
omitted, each component is assumed to be of type <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.data/Iterator.htm">Iterator</a></code>
					</dt>
					<dd>An `Iterator`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>train_iterator = tf.data.Dataset(...).make_one_shot_iterator()
            train_iterator_handle = sess.run(train_iterator.string_handle()) <p></p> test_iterator = tf.data.Dataset(...).make_one_shot_iterator()
test_iterator_handle = sess.run(test_iterator.string_handle()) <p></p> handle = tf.compat.v1.placeholder(tf.string, shape=[])
iterator = tf.data.Iterator.from_string_handle(
    handle, train_iterator.output_types) <p></p> next_element = iterator.get_next()
loss = f(next_element) <p></p> train_loss = sess.run(loss, feed_dict={handle: train_iterator_handle})
test_loss = sess.run(loss, feed_dict={handle: test_iterator_handle}) </pre>
</div>
		</div>
	</div>
	<div id="from_string_handle" class="method">
		<h4>
			<a href="../tensorflow.data/Iterator.htm">Iterator</a> <strong>from_string_handle</strong>(<span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> string_handle, <a href="../tensorflow/DType.htm">DType</a> output_types, <a href="../tensorflow/TensorShape.htm">TensorShape</a> output_shapes, <span title="System.object">object</span> output_classes)
		</h4>
		<div class="content">Creates a new, uninitialized `Iterator` based on the given handle. <p></p> This method allows you to define a "feedable" iterator where you can choose
between concrete iterators by feeding a value in a <a href="..\..\tf\InteractiveSession\run.md"><code>tf.Session.run</code></a> call.
In that case, `string_handle` would be a `tf.compat.v1.placeholder`, and you
would
feed it with the value of <a href="..\..\tf\data\Iterator\string_handle.md"><code>tf.data.Iterator.string_handle</code></a> in each step. <p></p> For example, if you had two iterators that marked the current position in
a training dataset and a test dataset, you could choose which to use in
each step as follows: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> string_handle
						</dt>
						<dd>A scalar <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a> of type <a href="..\..\tf\dtypes\string.md"><code>tf.string</code></a> that evaluates to
a handle produced by the `Iterator.string_handle()` method. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> output_types
						</dt>
						<dd>A nested structure of <a href="..\..\tf\dtypes\DType.md"><code>tf.DType</code></a> objects corresponding to
each component of an element of this dataset. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> output_shapes
						</dt>
						<dd>(Optional.) A nested structure of <a href="..\..\tf\TensorShape.md"><code>tf.TensorShape</code></a> objects
corresponding to each component of an element of this dataset. If
omitted, each component will have an unconstrainted shape. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_classes
						</dt>
						<dd>(Optional.) A nested structure of Python `type` objects
corresponding to each component of an element of this iterator. If
omitted, each component is assumed to be of type <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.data/Iterator.htm">Iterator</a></code>
					</dt>
					<dd>An `Iterator`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>train_iterator = tf.data.Dataset(...).make_one_shot_iterator()
            train_iterator_handle = sess.run(train_iterator.string_handle()) <p></p> test_iterator = tf.data.Dataset(...).make_one_shot_iterator()
test_iterator_handle = sess.run(test_iterator.string_handle()) <p></p> handle = tf.compat.v1.placeholder(tf.string, shape=[])
iterator = tf.data.Iterator.from_string_handle(
    handle, train_iterator.output_types) <p></p> next_element = iterator.get_next()
loss = f(next_element) <p></p> train_loss = sess.run(loss, feed_dict={handle: train_iterator_handle})
test_loss = sess.run(loss, feed_dict={handle: test_iterator_handle}) </pre>
</div>
		</div>
	</div>
	<div id="from_string_handle" class="method">
		<h4>
			<a href="../tensorflow.data/Iterator.htm">Iterator</a> <strong>from_string_handle</strong>(<span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> string_handle, <a href="../tensorflow/DType.htm">DType</a> output_types, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> output_shapes, <span title="System.object">object</span> output_classes)
		</h4>
		<div class="content">Creates a new, uninitialized `Iterator` based on the given handle. <p></p> This method allows you to define a "feedable" iterator where you can choose
between concrete iterators by feeding a value in a <a href="..\..\tf\InteractiveSession\run.md"><code>tf.Session.run</code></a> call.
In that case, `string_handle` would be a `tf.compat.v1.placeholder`, and you
would
feed it with the value of <a href="..\..\tf\data\Iterator\string_handle.md"><code>tf.data.Iterator.string_handle</code></a> in each step. <p></p> For example, if you had two iterators that marked the current position in
a training dataset and a test dataset, you could choose which to use in
each step as follows: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> string_handle
						</dt>
						<dd>A scalar <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a> of type <a href="..\..\tf\dtypes\string.md"><code>tf.string</code></a> that evaluates to
a handle produced by the `Iterator.string_handle()` method. 
						</dd>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> output_types
						</dt>
						<dd>A nested structure of <a href="..\..\tf\dtypes\DType.md"><code>tf.DType</code></a> objects corresponding to
each component of an element of this dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> output_shapes
						</dt>
						<dd>(Optional.) A nested structure of <a href="..\..\tf\TensorShape.md"><code>tf.TensorShape</code></a> objects
corresponding to each component of an element of this dataset. If
omitted, each component will have an unconstrainted shape. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_classes
						</dt>
						<dd>(Optional.) A nested structure of Python `type` objects
corresponding to each component of an element of this iterator. If
omitted, each component is assumed to be of type <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.data/Iterator.htm">Iterator</a></code>
					</dt>
					<dd>An `Iterator`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>train_iterator = tf.data.Dataset(...).make_one_shot_iterator()
            train_iterator_handle = sess.run(train_iterator.string_handle()) <p></p> test_iterator = tf.data.Dataset(...).make_one_shot_iterator()
test_iterator_handle = sess.run(test_iterator.string_handle()) <p></p> handle = tf.compat.v1.placeholder(tf.string, shape=[])
iterator = tf.data.Iterator.from_string_handle(
    handle, train_iterator.output_types) <p></p> next_element = iterator.get_next()
loss = f(next_element) <p></p> train_loss = sess.run(loss, feed_dict={handle: train_iterator_handle})
test_loss = sess.run(loss, feed_dict={handle: test_iterator_handle}) </pre>
</div>
		</div>
	</div>
	<div id="from_string_handle_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>from_string_handle_dyn</strong>(<span title="System.object">object</span> string_handle, <span title="System.object">object</span> output_types, <span title="System.object">object</span> output_shapes, <span title="System.object">object</span> output_classes)
		</h4>
		<div class="content">Creates a new, uninitialized `Iterator` based on the given handle. <p></p> This method allows you to define a "feedable" iterator where you can choose
between concrete iterators by feeding a value in a <a href="..\..\tf\InteractiveSession\run.md"><code>tf.Session.run</code></a> call.
In that case, `string_handle` would be a `tf.compat.v1.placeholder`, and you
would
feed it with the value of <a href="..\..\tf\data\Iterator\string_handle.md"><code>tf.data.Iterator.string_handle</code></a> in each step. <p></p> For example, if you had two iterators that marked the current position in
a training dataset and a test dataset, you could choose which to use in
each step as follows: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> string_handle
						</dt>
						<dd>A scalar <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a> of type <a href="..\..\tf\dtypes\string.md"><code>tf.string</code></a> that evaluates to
a handle produced by the `Iterator.string_handle()` method. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_types
						</dt>
						<dd>A nested structure of <a href="..\..\tf\dtypes\DType.md"><code>tf.DType</code></a> objects corresponding to
each component of an element of this dataset. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_shapes
						</dt>
						<dd>(Optional.) A nested structure of <a href="..\..\tf\TensorShape.md"><code>tf.TensorShape</code></a> objects
corresponding to each component of an element of this dataset. If
omitted, each component will have an unconstrainted shape. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_classes
						</dt>
						<dd>(Optional.) A nested structure of Python `type` objects
corresponding to each component of an element of this iterator. If
omitted, each component is assumed to be of type <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>An `Iterator`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>train_iterator = tf.data.Dataset(...).make_one_shot_iterator()
            train_iterator_handle = sess.run(train_iterator.string_handle()) <p></p> test_iterator = tf.data.Dataset(...).make_one_shot_iterator()
test_iterator_handle = sess.run(test_iterator.string_handle()) <p></p> handle = tf.compat.v1.placeholder(tf.string, shape=[])
iterator = tf.data.Iterator.from_string_handle(
    handle, train_iterator.output_types) <p></p> next_element = iterator.get_next()
loss = f(next_element) <p></p> train_loss = sess.run(loss, feed_dict={handle: train_iterator_handle})
test_loss = sess.run(loss, feed_dict={handle: test_iterator_handle}) </pre>
</div>
		</div>
	</div>
	<div id="from_structure" class="method">
		<h4>
			<a href="../tensorflow.data/Iterator.htm">Iterator</a> <strong>from_structure</strong>(<span title="System.ValueTuple<DType, object, object>">ValueTuple&lt;DType, object, object&gt;</span> output_types, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> output_shapes, <span title="System.string">string</span> shared_name, <span title="System.object">object</span> output_classes)
		</h4>
		<div class="content">Creates a new, uninitialized `Iterator` with the given structure. <p></p> This iterator-constructing method can be used to create an iterator that
is reusable with many different datasets. <p></p> The returned iterator is not bound to a particular dataset, and it has
no `initializer`. To initialize the iterator, run the operation returned by
`Iterator.make_initializer(dataset)`. <p></p> The following is an example 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<DType, object, object>">ValueTuple&lt;DType, object, object&gt;</span></code> output_types
						</dt>
						<dd>A nested structure of <a href="..\..\tf\dtypes\DType.md"><code>tf.DType</code></a> objects corresponding to
each component of an element of this dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> output_shapes
						</dt>
						<dd>(Optional.) A nested structure of <a href="..\..\tf\TensorShape.md"><code>tf.TensorShape</code></a> objects
corresponding to each component of an element of this dataset. If
omitted, each component will have an unconstrainted shape. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shared_name
						</dt>
						<dd>(Optional.) If non-empty, this iterator will be shared under
the given name across multiple sessions that share the same devices
(e.g. when using a remote server). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_classes
						</dt>
						<dd>(Optional.) A nested structure of Python `type` objects
corresponding to each component of an element of this iterator. If
omitted, each component is assumed to be of type <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.data/Iterator.htm">Iterator</a></code>
					</dt>
					<dd>An `Iterator`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>iterator = Iterator.from_structure(tf.int64, tf.TensorShape([])) <p></p> dataset_range = Dataset.range(10)
range_initializer = iterator.make_initializer(dataset_range) <p></p> dataset_evens = dataset_range.filter(lambda x: x % 2 == 0)
evens_initializer = iterator.make_initializer(dataset_evens) <p></p> # Define a model based on the iterator; in this example, the model_fn
# is expected to take scalar tf.int64 Tensors as input (see
# the definition of 'iterator' above).
prediction, loss = model_fn(iterator.get_next()) <p></p> # Train for `num_epochs`, where for each epoch, we first iterate over
# dataset_range, and then iterate over dataset_evens.
for _ in range(num_epochs):
  # Initialize the iterator to `dataset_range`
  sess.run(range_initializer)
  while True:
    try:
      pred, loss_val = sess.run([prediction, loss])
    except tf.errors.OutOfRangeError:
      break <p></p> # Initialize the iterator to `dataset_evens`
sess.run(evens_initializer)
while True:
  try:
    pred, loss_val = sess.run([prediction, loss])
  except tf.errors.OutOfRangeError:
    break </pre>
</div>
		</div>
	</div>
	<div id="from_structure" class="method">
		<h4>
			<a href="../tensorflow.data/Iterator.htm">Iterator</a> <strong>from_structure</strong>(<a href="../tensorflow/DType.htm">DType</a> output_types, <span title="System.ValueTuple<IEnumerable<object>, object, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object, object&gt;</span> output_shapes, <span title="System.string">string</span> shared_name, <span title="System.object">object</span> output_classes)
		</h4>
		<div class="content">Creates a new, uninitialized `Iterator` with the given structure. <p></p> This iterator-constructing method can be used to create an iterator that
is reusable with many different datasets. <p></p> The returned iterator is not bound to a particular dataset, and it has
no `initializer`. To initialize the iterator, run the operation returned by
`Iterator.make_initializer(dataset)`. <p></p> The following is an example 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> output_types
						</dt>
						<dd>A nested structure of <a href="..\..\tf\dtypes\DType.md"><code>tf.DType</code></a> objects corresponding to
each component of an element of this dataset. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple<IEnumerable<object>, object, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object, object&gt;</span></code> output_shapes
						</dt>
						<dd>(Optional.) A nested structure of <a href="..\..\tf\TensorShape.md"><code>tf.TensorShape</code></a> objects
corresponding to each component of an element of this dataset. If
omitted, each component will have an unconstrainted shape. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shared_name
						</dt>
						<dd>(Optional.) If non-empty, this iterator will be shared under
the given name across multiple sessions that share the same devices
(e.g. when using a remote server). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_classes
						</dt>
						<dd>(Optional.) A nested structure of Python `type` objects
corresponding to each component of an element of this iterator. If
omitted, each component is assumed to be of type <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.data/Iterator.htm">Iterator</a></code>
					</dt>
					<dd>An `Iterator`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>iterator = Iterator.from_structure(tf.int64, tf.TensorShape([])) <p></p> dataset_range = Dataset.range(10)
range_initializer = iterator.make_initializer(dataset_range) <p></p> dataset_evens = dataset_range.filter(lambda x: x % 2 == 0)
evens_initializer = iterator.make_initializer(dataset_evens) <p></p> # Define a model based on the iterator; in this example, the model_fn
# is expected to take scalar tf.int64 Tensors as input (see
# the definition of 'iterator' above).
prediction, loss = model_fn(iterator.get_next()) <p></p> # Train for `num_epochs`, where for each epoch, we first iterate over
# dataset_range, and then iterate over dataset_evens.
for _ in range(num_epochs):
  # Initialize the iterator to `dataset_range`
  sess.run(range_initializer)
  while True:
    try:
      pred, loss_val = sess.run([prediction, loss])
    except tf.errors.OutOfRangeError:
      break <p></p> # Initialize the iterator to `dataset_evens`
sess.run(evens_initializer)
while True:
  try:
    pred, loss_val = sess.run([prediction, loss])
  except tf.errors.OutOfRangeError:
    break </pre>
</div>
		</div>
	</div>
	<div id="from_structure" class="method">
		<h4>
			<a href="../tensorflow.data/Iterator.htm">Iterator</a> <strong>from_structure</strong>(<a href="../tensorflow/DType.htm">DType</a> output_types, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> output_shapes, <span title="System.string">string</span> shared_name, <span title="System.object">object</span> output_classes)
		</h4>
		<div class="content">Creates a new, uninitialized `Iterator` with the given structure. <p></p> This iterator-constructing method can be used to create an iterator that
is reusable with many different datasets. <p></p> The returned iterator is not bound to a particular dataset, and it has
no `initializer`. To initialize the iterator, run the operation returned by
`Iterator.make_initializer(dataset)`. <p></p> The following is an example 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> output_types
						</dt>
						<dd>A nested structure of <a href="..\..\tf\dtypes\DType.md"><code>tf.DType</code></a> objects corresponding to
each component of an element of this dataset. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> output_shapes
						</dt>
						<dd>(Optional.) A nested structure of <a href="..\..\tf\TensorShape.md"><code>tf.TensorShape</code></a> objects
corresponding to each component of an element of this dataset. If
omitted, each component will have an unconstrainted shape. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shared_name
						</dt>
						<dd>(Optional.) If non-empty, this iterator will be shared under
the given name across multiple sessions that share the same devices
(e.g. when using a remote server). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_classes
						</dt>
						<dd>(Optional.) A nested structure of Python `type` objects
corresponding to each component of an element of this iterator. If
omitted, each component is assumed to be of type <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.data/Iterator.htm">Iterator</a></code>
					</dt>
					<dd>An `Iterator`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>iterator = Iterator.from_structure(tf.int64, tf.TensorShape([])) <p></p> dataset_range = Dataset.range(10)
range_initializer = iterator.make_initializer(dataset_range) <p></p> dataset_evens = dataset_range.filter(lambda x: x % 2 == 0)
evens_initializer = iterator.make_initializer(dataset_evens) <p></p> # Define a model based on the iterator; in this example, the model_fn
# is expected to take scalar tf.int64 Tensors as input (see
# the definition of 'iterator' above).
prediction, loss = model_fn(iterator.get_next()) <p></p> # Train for `num_epochs`, where for each epoch, we first iterate over
# dataset_range, and then iterate over dataset_evens.
for _ in range(num_epochs):
  # Initialize the iterator to `dataset_range`
  sess.run(range_initializer)
  while True:
    try:
      pred, loss_val = sess.run([prediction, loss])
    except tf.errors.OutOfRangeError:
      break <p></p> # Initialize the iterator to `dataset_evens`
sess.run(evens_initializer)
while True:
  try:
    pred, loss_val = sess.run([prediction, loss])
  except tf.errors.OutOfRangeError:
    break </pre>
</div>
		</div>
	</div>
	<div id="from_structure" class="method">
		<h4>
			<a href="../tensorflow.data/Iterator.htm">Iterator</a> <strong>from_structure</strong>(<span title="System.ValueTuple<DType, object, object>">ValueTuple&lt;DType, object, object&gt;</span> output_types, <a href="../tensorflow/TensorShape.htm">TensorShape</a> output_shapes, <span title="System.string">string</span> shared_name, <span title="System.object">object</span> output_classes)
		</h4>
		<div class="content">Creates a new, uninitialized `Iterator` with the given structure. <p></p> This iterator-constructing method can be used to create an iterator that
is reusable with many different datasets. <p></p> The returned iterator is not bound to a particular dataset, and it has
no `initializer`. To initialize the iterator, run the operation returned by
`Iterator.make_initializer(dataset)`. <p></p> The following is an example 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<DType, object, object>">ValueTuple&lt;DType, object, object&gt;</span></code> output_types
						</dt>
						<dd>A nested structure of <a href="..\..\tf\dtypes\DType.md"><code>tf.DType</code></a> objects corresponding to
each component of an element of this dataset. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> output_shapes
						</dt>
						<dd>(Optional.) A nested structure of <a href="..\..\tf\TensorShape.md"><code>tf.TensorShape</code></a> objects
corresponding to each component of an element of this dataset. If
omitted, each component will have an unconstrainted shape. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shared_name
						</dt>
						<dd>(Optional.) If non-empty, this iterator will be shared under
the given name across multiple sessions that share the same devices
(e.g. when using a remote server). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_classes
						</dt>
						<dd>(Optional.) A nested structure of Python `type` objects
corresponding to each component of an element of this iterator. If
omitted, each component is assumed to be of type <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.data/Iterator.htm">Iterator</a></code>
					</dt>
					<dd>An `Iterator`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>iterator = Iterator.from_structure(tf.int64, tf.TensorShape([])) <p></p> dataset_range = Dataset.range(10)
range_initializer = iterator.make_initializer(dataset_range) <p></p> dataset_evens = dataset_range.filter(lambda x: x % 2 == 0)
evens_initializer = iterator.make_initializer(dataset_evens) <p></p> # Define a model based on the iterator; in this example, the model_fn
# is expected to take scalar tf.int64 Tensors as input (see
# the definition of 'iterator' above).
prediction, loss = model_fn(iterator.get_next()) <p></p> # Train for `num_epochs`, where for each epoch, we first iterate over
# dataset_range, and then iterate over dataset_evens.
for _ in range(num_epochs):
  # Initialize the iterator to `dataset_range`
  sess.run(range_initializer)
  while True:
    try:
      pred, loss_val = sess.run([prediction, loss])
    except tf.errors.OutOfRangeError:
      break <p></p> # Initialize the iterator to `dataset_evens`
sess.run(evens_initializer)
while True:
  try:
    pred, loss_val = sess.run([prediction, loss])
  except tf.errors.OutOfRangeError:
    break </pre>
</div>
		</div>
	</div>
	<div id="from_structure" class="method">
		<h4>
			<a href="../tensorflow.data/Iterator.htm">Iterator</a> <strong>from_structure</strong>(<span title="System.ValueTuple<DType, object, object>">ValueTuple&lt;DType, object, object&gt;</span> output_types, <span title="System.ValueTuple<IEnumerable<object>, object, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object, object&gt;</span> output_shapes, <span title="System.string">string</span> shared_name, <span title="System.object">object</span> output_classes)
		</h4>
		<div class="content">Creates a new, uninitialized `Iterator` with the given structure. <p></p> This iterator-constructing method can be used to create an iterator that
is reusable with many different datasets. <p></p> The returned iterator is not bound to a particular dataset, and it has
no `initializer`. To initialize the iterator, run the operation returned by
`Iterator.make_initializer(dataset)`. <p></p> The following is an example 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple<DType, object, object>">ValueTuple&lt;DType, object, object&gt;</span></code> output_types
						</dt>
						<dd>A nested structure of <a href="..\..\tf\dtypes\DType.md"><code>tf.DType</code></a> objects corresponding to
each component of an element of this dataset. 
						</dd>
						<dt>
							<code><span title="System.ValueTuple<IEnumerable<object>, object, object>">ValueTuple&lt;IEnumerable&lt;object&gt;, object, object&gt;</span></code> output_shapes
						</dt>
						<dd>(Optional.) A nested structure of <a href="..\..\tf\TensorShape.md"><code>tf.TensorShape</code></a> objects
corresponding to each component of an element of this dataset. If
omitted, each component will have an unconstrainted shape. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shared_name
						</dt>
						<dd>(Optional.) If non-empty, this iterator will be shared under
the given name across multiple sessions that share the same devices
(e.g. when using a remote server). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_classes
						</dt>
						<dd>(Optional.) A nested structure of Python `type` objects
corresponding to each component of an element of this iterator. If
omitted, each component is assumed to be of type <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.data/Iterator.htm">Iterator</a></code>
					</dt>
					<dd>An `Iterator`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>iterator = Iterator.from_structure(tf.int64, tf.TensorShape([])) <p></p> dataset_range = Dataset.range(10)
range_initializer = iterator.make_initializer(dataset_range) <p></p> dataset_evens = dataset_range.filter(lambda x: x % 2 == 0)
evens_initializer = iterator.make_initializer(dataset_evens) <p></p> # Define a model based on the iterator; in this example, the model_fn
# is expected to take scalar tf.int64 Tensors as input (see
# the definition of 'iterator' above).
prediction, loss = model_fn(iterator.get_next()) <p></p> # Train for `num_epochs`, where for each epoch, we first iterate over
# dataset_range, and then iterate over dataset_evens.
for _ in range(num_epochs):
  # Initialize the iterator to `dataset_range`
  sess.run(range_initializer)
  while True:
    try:
      pred, loss_val = sess.run([prediction, loss])
    except tf.errors.OutOfRangeError:
      break <p></p> # Initialize the iterator to `dataset_evens`
sess.run(evens_initializer)
while True:
  try:
    pred, loss_val = sess.run([prediction, loss])
  except tf.errors.OutOfRangeError:
    break </pre>
</div>
		</div>
	</div>
	<div id="from_structure" class="method">
		<h4>
			<a href="../tensorflow.data/Iterator.htm">Iterator</a> <strong>from_structure</strong>(<a href="../tensorflow/DType.htm">DType</a> output_types, <a href="../tensorflow/TensorShape.htm">TensorShape</a> output_shapes, <span title="System.string">string</span> shared_name, <span title="System.object">object</span> output_classes)
		</h4>
		<div class="content">Creates a new, uninitialized `Iterator` with the given structure. <p></p> This iterator-constructing method can be used to create an iterator that
is reusable with many different datasets. <p></p> The returned iterator is not bound to a particular dataset, and it has
no `initializer`. To initialize the iterator, run the operation returned by
`Iterator.make_initializer(dataset)`. <p></p> The following is an example 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../tensorflow/DType.htm">DType</a></code> output_types
						</dt>
						<dd>A nested structure of <a href="..\..\tf\dtypes\DType.md"><code>tf.DType</code></a> objects corresponding to
each component of an element of this dataset. 
						</dd>
						<dt>
							<code><a href="../tensorflow/TensorShape.htm">TensorShape</a></code> output_shapes
						</dt>
						<dd>(Optional.) A nested structure of <a href="..\..\tf\TensorShape.md"><code>tf.TensorShape</code></a> objects
corresponding to each component of an element of this dataset. If
omitted, each component will have an unconstrainted shape. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> shared_name
						</dt>
						<dd>(Optional.) If non-empty, this iterator will be shared under
the given name across multiple sessions that share the same devices
(e.g. when using a remote server). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_classes
						</dt>
						<dd>(Optional.) A nested structure of Python `type` objects
corresponding to each component of an element of this iterator. If
omitted, each component is assumed to be of type <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow.data/Iterator.htm">Iterator</a></code>
					</dt>
					<dd>An `Iterator`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>iterator = Iterator.from_structure(tf.int64, tf.TensorShape([])) <p></p> dataset_range = Dataset.range(10)
range_initializer = iterator.make_initializer(dataset_range) <p></p> dataset_evens = dataset_range.filter(lambda x: x % 2 == 0)
evens_initializer = iterator.make_initializer(dataset_evens) <p></p> # Define a model based on the iterator; in this example, the model_fn
# is expected to take scalar tf.int64 Tensors as input (see
# the definition of 'iterator' above).
prediction, loss = model_fn(iterator.get_next()) <p></p> # Train for `num_epochs`, where for each epoch, we first iterate over
# dataset_range, and then iterate over dataset_evens.
for _ in range(num_epochs):
  # Initialize the iterator to `dataset_range`
  sess.run(range_initializer)
  while True:
    try:
      pred, loss_val = sess.run([prediction, loss])
    except tf.errors.OutOfRangeError:
      break <p></p> # Initialize the iterator to `dataset_evens`
sess.run(evens_initializer)
while True:
  try:
    pred, loss_val = sess.run([prediction, loss])
  except tf.errors.OutOfRangeError:
    break </pre>
</div>
		</div>
	</div>
	<div id="from_structure_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>from_structure_dyn</strong>(<span title="System.object">object</span> output_types, <span title="System.object">object</span> output_shapes, <span title="System.object">object</span> shared_name, <span title="System.object">object</span> output_classes)
		</h4>
		<div class="content">Creates a new, uninitialized `Iterator` with the given structure. <p></p> This iterator-constructing method can be used to create an iterator that
is reusable with many different datasets. <p></p> The returned iterator is not bound to a particular dataset, and it has
no `initializer`. To initialize the iterator, run the operation returned by
`Iterator.make_initializer(dataset)`. <p></p> The following is an example 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> output_types
						</dt>
						<dd>A nested structure of <a href="..\..\tf\dtypes\DType.md"><code>tf.DType</code></a> objects corresponding to
each component of an element of this dataset. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_shapes
						</dt>
						<dd>(Optional.) A nested structure of <a href="..\..\tf\TensorShape.md"><code>tf.TensorShape</code></a> objects
corresponding to each component of an element of this dataset. If
omitted, each component will have an unconstrainted shape. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> shared_name
						</dt>
						<dd>(Optional.) If non-empty, this iterator will be shared under
the given name across multiple sessions that share the same devices
(e.g. when using a remote server). 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> output_classes
						</dt>
						<dd>(Optional.) A nested structure of Python `type` objects
corresponding to each component of an element of this iterator. If
omitted, each component is assumed to be of type <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a>. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>An `Iterator`. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>iterator = Iterator.from_structure(tf.int64, tf.TensorShape([])) <p></p> dataset_range = Dataset.range(10)
range_initializer = iterator.make_initializer(dataset_range) <p></p> dataset_evens = dataset_range.filter(lambda x: x % 2 == 0)
evens_initializer = iterator.make_initializer(dataset_evens) <p></p> # Define a model based on the iterator; in this example, the model_fn
# is expected to take scalar tf.int64 Tensors as input (see
# the definition of 'iterator' above).
prediction, loss = model_fn(iterator.get_next()) <p></p> # Train for `num_epochs`, where for each epoch, we first iterate over
# dataset_range, and then iterate over dataset_evens.
for _ in range(num_epochs):
  # Initialize the iterator to `dataset_range`
  sess.run(range_initializer)
  while True:
    try:
      pred, loss_val = sess.run([prediction, loss])
    except tf.errors.OutOfRangeError:
      break <p></p> # Initialize the iterator to `dataset_evens`
sess.run(evens_initializer)
while True:
  try:
    pred, loss_val = sess.run([prediction, loss])
  except tf.errors.OutOfRangeError:
    break </pre>
</div>
		</div>
	</div>
	
	<h3 class="section">Public properties</h3>

	<div id="element_spec" class="method">
		<h4>
			<span title="System.object">object</span> <strong>element_spec</strong> get; 
		</h4>
		<div class="content">The type specification of an element of this iterator. 

		</div>
	</div>
	<div id="element_spec_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>element_spec_dyn</strong> get; 
		</h4>
		<div class="content">The type specification of an element of this iterator. 

		</div>
	</div>
	<div id="initializer" class="method">
		<h4>
			<span title="System.object">object</span> <strong>initializer</strong> get; 
		</h4>
		<div class="content">A <a href="..\..\tf\Operation.md"><code>tf.Operation</code></a> that should be run to initialize this iterator. 

		</div>
	</div>
	<div id="initializer_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>initializer_dyn</strong> get; 
		</h4>
		<div class="content">A <a href="..\..\tf\Operation.md"><code>tf.Operation</code></a> that should be run to initialize this iterator. 

		</div>
	</div>
	<div id="output_classes" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_classes</strong> get; 
		</h4>
		<div class="content">Returns the class of each component of an element of this iterator. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
Use `tf.compat.v1.data.get_output_classes(iterator)`. <p></p> The expected values are <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a> and <a href="..\..\tf\sparse\SparseTensor.md"><code>tf.SparseTensor</code></a>. 

		</div>
	</div>
	<div id="output_classes_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_classes_dyn</strong> get; 
		</h4>
		<div class="content">Returns the class of each component of an element of this iterator. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
Use `tf.compat.v1.data.get_output_classes(iterator)`. <p></p> The expected values are <a href="..\..\tf\Tensor.md"><code>tf.Tensor</code></a> and <a href="..\..\tf\sparse\SparseTensor.md"><code>tf.SparseTensor</code></a>. 

		</div>
	</div>
	<div id="output_shapes" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_shapes</strong> get; 
		</h4>
		<div class="content">Returns the shape of each component of an element of this iterator. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
Use `tf.compat.v1.data.get_output_shapes(iterator)`. 

		</div>
	</div>
	<div id="output_shapes_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_shapes_dyn</strong> get; 
		</h4>
		<div class="content">Returns the shape of each component of an element of this iterator. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
Use `tf.compat.v1.data.get_output_shapes(iterator)`. 

		</div>
	</div>
	<div id="output_types" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_types</strong> get; 
		</h4>
		<div class="content">Returns the type of each component of an element of this iterator. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
Use `tf.compat.v1.data.get_output_types(iterator)`. 

		</div>
	</div>
	<div id="output_types_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>output_types_dyn</strong> get; 
		</h4>
		<div class="content">Returns the type of each component of an element of this iterator. (deprecated) <p></p> Warning: THIS FUNCTION IS DEPRECATED. It will be removed in a future version.
Instructions for updating:
Use `tf.compat.v1.data.get_output_types(iterator)`. 

		</div>
	</div>
	<div id="PythonObject" class="method">
		<h4>
			<span title="System.object">object</span> <strong>PythonObject</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	</section>
	</article><footer>
	<span id="version">Built from v1.15.0.0 of LostTech.TensorFlow</span>
	<span id="docu-link">
		Generated by <a href="http://docu.jagregory.com">docu</a>
	</span>
</footer>
  </body>
</html>