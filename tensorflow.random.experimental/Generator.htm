<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    <title>Generator - LostTech.TensorFlow Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body>
  	<header><h1>LostTech.TensorFlow : API Documentation</h1>
	</header>

    <nav id="namespaces">
      <iframe src="../namespaces.htm"></iframe>
    </nav><nav id="types">
  <h2 class="fixed">Types in tensorflow.random.experimental</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../tensorflow.random.experimental/Generator.htm" class="current">Generator</a>
        </li>
				<li>
            <a href="../tensorflow.random.experimental/IGenerator.htm">IGenerator</a>
        </li>
		</ul>
	</div>
</nav>
	<article>
    <header>
		<p class="class"><strong>Type</strong> Generator</p>
	</header>
	<section>
		<header>
		<p><strong>Namespace</strong> tensorflow.random.experimental</p>
		<p><strong>Parent</strong> <a href="../tensorflow.python.training.tracking.tracking/AutoTrackable.htm">AutoTrackable</a></p>
		<p><strong>Interfaces</strong> <a href="../tensorflow.random.experimental/IGenerator.htm">IGenerator</a></p>
		</header>
    <div class="sub-header">
			<div id="summary">Random-number generator. <p></p> It uses Variable to manage its internal state, and allows choosing an
Random-Number-Generation (RNG) algorithm. <p></p> CPU, GPU and TPU with the same algorithm and seed will generate the same
integer random numbers. Float-point results (such as the output of `normal`)
may have small numerical discrepancies between CPU and GPU. 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial">binomial</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#binomial_dyn">binomial_dyn</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#from_key_counter_dyn``1">from_key_counter_dyn&lt;TClass&gt;</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#from_key_counter``1">from_key_counter&lt;TClass&gt;</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#from_non_deterministic_state_dyn``1">from_non_deterministic_state_dyn&lt;TClass&gt;</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#from_non_deterministic_state``1">from_non_deterministic_state&lt;TClass&gt;</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#from_seed_dyn``1">from_seed_dyn&lt;TClass&gt;</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#from_seed``1">from_seed&lt;TClass&gt;</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#from_state_dyn``1">from_state_dyn&lt;TClass&gt;</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#from_state``1">from_state&lt;TClass&gt;</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#make_seeds">make_seeds</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#make_seeds_dyn">make_seeds_dyn</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#normal">normal</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#normal">normal</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#normal">normal</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#normal">normal</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#normal_dyn">normal_dyn</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#reset">reset</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#reset_from_key_counter">reset_from_key_counter</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#reset_from_key_counter_dyn">reset_from_key_counter_dyn</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#reset_from_seed">reset_from_seed</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#reset_from_seed_dyn">reset_from_seed_dyn</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#skip">skip</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#skip_dyn">skip_dyn</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#split">split</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#split_dyn">split_dyn</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#truncated_normal">truncated_normal</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#truncated_normal_dyn">truncated_normal_dyn</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#uniform">uniform</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#uniform">uniform</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#uniform_dyn">uniform_dyn</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#uniform_full_int">uniform_full_int</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#uniform_full_int">uniform_full_int</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#uniform_full_int_dyn">uniform_full_int_dyn</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../tensorflow.random.experimental/Generator.htm#algorithm">algorithm</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#algorithm_dyn">algorithm_dyn</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#key">key</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#key_dyn">key_dyn</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#PythonObject">PythonObject</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#state">state</a></li>
				<li><a href="../tensorflow.random.experimental/Generator.htm#state_dyn">state_dyn</a></li>
			</ul>
		
	</div>
	
	<h3 class="section">Public instance methods</h3>

	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> counts, <a href="../numpy/float32.htm">float32</a> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/float32.htm">float32</a></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.double">double</span> counts, <span title="System.double">double</span> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.double">double</span> counts, <a href="../numpy/float32.htm">float32</a> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/float32.htm">float32</a></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.double">double</span> counts, <a href="../numpy/ndarray.htm">ndarray</a> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.double">double</span> counts, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../numpy/float32.htm">float32</a> counts, <span title="System.double">double</span> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../numpy/float32.htm">float32</a></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../numpy/float32.htm">float32</a> counts, <a href="../numpy/float32.htm">float32</a> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../numpy/float32.htm">float32</a></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/float32.htm">float32</a></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> counts, <span title="System.double">double</span> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../numpy/float32.htm">float32</a> counts, <a href="../numpy/ndarray.htm">ndarray</a> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../numpy/float32.htm">float32</a></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../numpy/ndarray.htm">ndarray</a> counts, <span title="System.double">double</span> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../numpy/ndarray.htm">ndarray</a> counts, <a href="../numpy/float32.htm">float32</a> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/float32.htm">float32</a></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../numpy/ndarray.htm">ndarray</a> counts, <a href="../numpy/ndarray.htm">ndarray</a> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../numpy/ndarray.htm">ndarray</a> counts, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> counts, <span title="System.double">double</span> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> counts, <a href="../numpy/float32.htm">float32</a> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/float32.htm">float32</a></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../numpy/float32.htm">float32</a> counts, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../numpy/float32.htm">float32</a></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> counts, <a href="../numpy/ndarray.htm">ndarray</a> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> counts, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> counts, <a href="../numpy/ndarray.htm">ndarray</a> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../numpy/ndarray.htm">ndarray</a></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>binomial</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> counts, <span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<object>">IEnumerable&lt;object&gt;</span></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="binomial_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>binomial_dyn</strong>(<span title="System.object">object</span> shape, <span title="System.object">object</span> counts, <span title="System.object">object</span> probs, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.object">object</span> name)
		</h4>
		<div class="content">Outputs random values from a binomial distribution. <p></p> The generated values follow a binomial distribution with specified count and
probability of success parameters. <p></p> Example: 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> counts
						</dt>
						<dd>A 0/1-D Tensor or Python value. The counts of the binomial
distribution.  Must be broadcastable with the leftmost dimension
defined by `shape`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> probs
						</dt>
						<dd>A 0/1-D Tensor or Python value. The probability of success for the
binomial distribution.  Must be broadcastable with the leftmost
dimension defined by `shape`. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. Default: tf.int32 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd><p></p> 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>counts = [10., 20.]
            # Probability of success.
            probs = [0.8, 0.9] <p></p> rng = tf.random.experimental.Generator.from_seed(seed=234)
binomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs) </pre>
</div>
		</div>
	</div>
	<div id="make_seeds" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>make_seeds</strong>(<span title="System.int">int</span> count)
		</h4>
		<div class="content">Generates seeds for stateless random ops. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.int">int</span></code> count
						</dt>
						<dd>the number of seed pairs (note that stateless random ops need a
pair of seeds to invoke). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of shape [2, count] and dtype int64. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>seeds = get_global_generator().make_seeds(count=10)
            for i in range(10):
              seed = seeds[:, i]
              numbers = stateless_random_normal(shape=[2, 3], seed=seed)
             ... </pre>
</div>
		</div>
	</div>
	<div id="make_seeds_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>make_seeds_dyn</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> count)
		</h4>
		<div class="content">Generates seeds for stateless random ops. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> count
						</dt>
						<dd>the number of seed pairs (note that stateless random ops need a
pair of seeds to invoke). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A tensor of shape [2, count] and dtype int64. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>seeds = get_global_generator().make_seeds(count=10)
            for i in range(10):
              seed = seeds[:, i]
              numbers = stateless_random_normal(shape=[2, 3], seed=seed)
             ... </pre>
</div>
		</div>
	</div>
	<div id="normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>normal</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> shape, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a normal distribution. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard
deviation of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a normal distribution. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard
deviation of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a normal distribution. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard
deviation of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>normal</strong>(<a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a> shape, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a normal distribution. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient.ManualWrappers/IGraphNodeBase.htm">IGraphNodeBase</a></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard
deviation of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="normal_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>normal_dyn</strong>(<span title="System.object">object</span> shape, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> mean, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.object">object</span> name)
		</h4>
		<div class="content">Outputs random values from a normal distribution. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the normal
distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard
deviation of the normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A tensor of the specified shape filled with random normal values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="reset" class="method">
		<h4>
			<span title="System.void">void</span> <strong>reset</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> state)
		</h4>
		<div class="content">Resets the generator by a new state. <p></p> See `__init__` for the meaning of "state". 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> state
						</dt>
						<dd>the new state. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="reset_from_key_counter" class="method">
		<h4>
			<span title="System.void">void</span> <strong>reset_from_key_counter</strong>(<span title="System.int">int</span> key, <span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> counter)
		</h4>
		<div class="content">Resets the generator by a new key-counter pair. <p></p> See `from_key_counter` for the meaning of "key" and "counter". 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.int">int</span></code> key
						</dt>
						<dd>the new key. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> counter
						</dt>
						<dd>the new counter. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="reset_from_key_counter_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>reset_from_key_counter_dyn</strong>(<span title="System.object">object</span> key, <span title="System.object">object</span> counter)
		</h4>
		<div class="content">Resets the generator by a new key-counter pair. <p></p> See `from_key_counter` for the meaning of "key" and "counter". 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>the new key. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> counter
						</dt>
						<dd>the new counter. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="reset_from_seed" class="method">
		<h4>
			<span title="System.void">void</span> <strong>reset_from_seed</strong>(<span title="System.int">int</span> seed)
		</h4>
		<div class="content">Resets the generator by a new seed. <p></p> See `from_seed` for the meaning of "seed". 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.int">int</span></code> seed
						</dt>
						<dd>the new seed. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="reset_from_seed_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>reset_from_seed_dyn</strong>(<span title="System.object">object</span> seed)
		</h4>
		<div class="content">Resets the generator by a new seed. <p></p> See `from_seed` for the meaning of "seed". 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> seed
						</dt>
						<dd>the new seed. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="skip" class="method">
		<h4>
			<span title="System.object">object</span> <strong>skip</strong>(<span title="System.int">int</span> delta)
		</h4>
		<div class="content">Advance the counter of a counter-based RNG. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.int">int</span></code> delta
						</dt>
						<dd>the amount of advancement. The state of the RNG after
`skip(n)` will be the same as that after `normal([n])`
(or any other distribution). The actual increment added to the
counter is an unspecified implementation detail. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="skip_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>skip_dyn</strong>(<span title="System.object">object</span> delta)
		</h4>
		<div class="content">Advance the counter of a counter-based RNG. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> delta
						</dt>
						<dd>the amount of advancement. The state of the RNG after
`skip(n)` will be the same as that after `normal([n])`
(or any other distribution). The actual increment added to the
counter is an unspecified implementation detail. 
						</dd>
				</dl>
			</div>


		</div>
	</div>
	<div id="split" class="method">
		<h4>
			<span title="System.Collections.Generic.IList<Generator>">IList&lt;Generator&gt;</span> <strong>split</strong>(<span title="System.int">int</span> count)
		</h4>
		<div class="content">Returns a list of independent `Generator` objects. <p></p> Two generators are independent of each other in the sense that the
random-number streams they generate don't have statistically detectable
correlations. The new generators are also independent of the old one.
The old generator's state will be changed (like other random-number
generating methods), so two calls of `split` will return different
new generators.
The new generators will be put on the current device (possible different
from the old generator's), 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.int">int</span></code> count
						</dt>
						<dd>the number of generators to return. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.Collections.Generic.IList<Generator>">IList&lt;Generator&gt;</span></code>
					</dt>
					<dd>A list (length `count`) of `Generator` objects independent of each other.
The new generators have the same RNG algorithm as the old one. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>gens = get_global_generator().split(count=10)
            for gen in gens:
              numbers = gen.normal(shape=[2, 3])
              #...
            gens2 = get_global_generator().split(count=10)
            # gens2 will be different from gens </pre>
</div>
		</div>
	</div>
	<div id="split_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>split_dyn</strong>(<a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> count)
		</h4>
		<div class="content">Returns a list of independent `Generator` objects. <p></p> Two generators are independent of each other in the sense that the
random-number streams they generate don't have statistically detectable
correlations. The new generators are also independent of the old one.
The old generator's state will be changed (like other random-number
generating methods), so two calls of `split` will return different
new generators.
The new generators will be put on the current device (possible different
from the old generator's), 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> count
						</dt>
						<dd>the number of generators to return. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A list (length `count`) of `Generator` objects independent of each other.
The new generators have the same RNG algorithm as the old one. 
					</dd>
				</dl>
			</div>
<div class="example">
  <a href="javascript:void(0)">Show Example</a>
  <pre>gens = get_global_generator().split(count=10)
            for gen in gens:
              numbers = gen.normal(shape=[2, 3])
              #...
            gens2 = get_global_generator().split(count=10)
            # gens2 will be different from gens </pre>
</div>
		</div>
	</div>
	<div id="truncated_normal" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>truncated_normal</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.double">double</span> mean, <span title="System.double">double</span> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a truncated normal distribution. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than
2 standard deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><span title="System.double">double</span></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard
deviation of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal
values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="truncated_normal_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>truncated_normal_dyn</strong>(<span title="System.object">object</span> shape, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> mean, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> stddev, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.object">object</span> name)
		</h4>
		<div class="content">Outputs random values from a truncated normal distribution. <p></p> The generated values follow a normal distribution with specified mean and
standard deviation, except that values whose magnitude is more than
2 standard deviations from the mean are dropped and re-picked. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> mean
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The mean of the
truncated normal distribution. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> stddev
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The standard
deviation of the normal distribution, before truncation. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A tensor of the specified shape filled with random truncated normal
values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>uniform</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.int">int</span> minval, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> maxval, <a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a uniform distribution. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. (For float numbers especially
low-precision types like bfloat16, because of
rounding, the result may sometimes include `maxval`.) <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on
the range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on
the range of random values to generate.  Defaults to 1 if `dtype` is
floating point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/PythonClassContainer.htm">PythonClassContainer</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="uniform" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>uniform</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <span title="System.int">int</span> minval, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Outputs random values from a uniform distribution. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. (For float numbers especially
low-precision types like bfloat16, because of
rounding, the result may sometimes include `maxval`.) <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on
the range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on
the range of random values to generate.  Defaults to 1 if `dtype` is
floating point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="uniform_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>uniform_dyn</strong>(<span title="System.object">object</span> shape, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> minval, <span title="System.object">object</span> maxval, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.object">object</span> name)
		</h4>
		<div class="content">Outputs random values from a uniform distribution. <p></p> The generated values follow a uniform distribution in the range
`[minval, maxval)`. The lower bound `minval` is included in the range, while
the upper bound `maxval` is excluded. (For float numbers especially
low-precision types like bfloat16, because of
rounding, the result may sometimes include `maxval`.) <p></p> For floats, the default range is `[0, 1)`.  For ints, at least `maxval` must
be specified explicitly. <p></p> In the integer case, the random integers are slightly biased unless
`maxval - minval` is an exact power of two.  The bias is small for values of
`maxval - minval` significantly smaller than the range of the output (either
`2**32` or `2**64`). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> shape
						</dt>
						<dd>A 1-D integer Tensor or Python array. The shape of the output
tensor. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> minval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The lower bound on
the range of random values to generate.  Defaults to 0. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> maxval
						</dt>
						<dd>A 0-D Tensor or Python value of type `dtype`. The upper bound on
the range of random values to generate.  Defaults to 1 if `dtype` is
floating point. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>The type of the output. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>A name for the operation (optional). 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A tensor of the specified shape filled with random uniform values. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="uniform_full_int" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>uniform_full_int</strong>(<span title="System.ValueTuple">ValueTuple</span> shape, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Uniform distribution on an integer type's entire range. <p></p> The other method `uniform` only covers the range [minval, maxval), which
cannot be `dtype`'s full range because `maxval` is of type `dtype`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.ValueTuple">ValueTuple</span></code> shape
						</dt>
						<dd>the shape of the output. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>(optional) the integer type, default to uint64. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>(optional) the name of the node. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of random numbers of the required shape. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="uniform_full_int" class="method">
		<h4>
			<a href="../tensorflow/Tensor.htm">Tensor</a> <strong>uniform_full_int</strong>(<span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> shape, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.string">string</span> name)
		</h4>
		<div class="content">Uniform distribution on an integer type's entire range. <p></p> The other method `uniform` only covers the range [minval, maxval), which
cannot be `dtype`'s full range because `maxval` is of type `dtype`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> shape
						</dt>
						<dd>the shape of the output. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>(optional) the integer type, default to uint64. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> name
						</dt>
						<dd>(optional) the name of the node. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><a href="../tensorflow/Tensor.htm">Tensor</a></code>
					</dt>
					<dd>A tensor of random numbers of the required shape. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="uniform_full_int_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>uniform_full_int_dyn</strong>(<span title="System.object">object</span> shape, <a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a> dtype, <span title="System.object">object</span> name)
		</h4>
		<div class="content">Uniform distribution on an integer type's entire range. <p></p> The other method `uniform` only covers the range [minval, maxval), which
cannot be `dtype`'s full range because `maxval` is of type `dtype`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> shape
						</dt>
						<dd>the shape of the output. 
						</dd>
						<dt>
							<code><a href="../LostTech.Gradient/ImplicitContainer`1.htm">ImplicitContainer&lt;T&gt;</a></code> dtype
						</dt>
						<dd>(optional) the integer type, default to uint64. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> name
						</dt>
						<dd>(optional) the name of the node. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>A tensor of random numbers of the required shape. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	
	<h3 class="section">Public static methods</h3>

	<div id="from_key_counter_dyn``1" class="method">
		<h4>
			<span title="System.object">object</span> <strong>from_key_counter_dyn&lt;TClass&gt;</strong>(<span title="System.object">object</span> key, <span title="System.object">object</span> counter, <span title="System.object">object</span> alg)
		</h4>
		<div class="content">Creates a generator from a key and a counter. <p></p> This constructor only applies if the algorithm is a counter-based algorithm.
See method `key` for the meaning of "key" and "counter". 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> key
						</dt>
						<dd>the key for the RNG, a scalar of type STATE_TYPE. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> counter
						</dt>
						<dd>a vector of dtype STATE_TYPE representing the initial counter for
the RNG, whose length is algorithm-specific., 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> alg
						</dt>
						<dd>the RNG algorithm. If None, it will be auto-selected. See
`__init__` for its possible values. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The new generator. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="from_key_counter``1" class="method">
		<h4>
			<span title="tensorflow.random.experimental.TClass">TClass</span> <strong>from_key_counter&lt;TClass&gt;</strong>(<span title="System.int">int</span> key, <span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span> counter, <span title="System.int">int</span> alg)
		</h4>
		<div class="content">Creates a generator from a key and a counter. <p></p> This constructor only applies if the algorithm is a counter-based algorithm.
See method `key` for the meaning of "key" and "counter". 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.int">int</span></code> key
						</dt>
						<dd>the key for the RNG, a scalar of type STATE_TYPE. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IEnumerable<int>">IEnumerable&lt;int&gt;</span></code> counter
						</dt>
						<dd>a vector of dtype STATE_TYPE representing the initial counter for
the RNG, whose length is algorithm-specific., 
						</dd>
						<dt>
							<code><span title="System.int">int</span></code> alg
						</dt>
						<dd>the RNG algorithm. If None, it will be auto-selected. See
`__init__` for its possible values. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="tensorflow.random.experimental.TClass">TClass</span></code>
					</dt>
					<dd>The new generator. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="from_non_deterministic_state_dyn``1" class="method">
		<h4>
			<span title="System.object">object</span> <strong>from_non_deterministic_state_dyn&lt;TClass&gt;</strong>(<span title="System.object">object</span> alg)
		</h4>
		<div class="content">Creates a generator by non-deterministically initializing its state. <p></p> The source of the non-determinism will be platform- and time-dependent. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> alg
						</dt>
						<dd>(optional) the RNG algorithm. If None, it will be auto-selected. See
`__init__` for its possible values. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The new generator. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="from_non_deterministic_state``1" class="method">
		<h4>
			<span title="tensorflow.random.experimental.TClass">TClass</span> <strong>from_non_deterministic_state&lt;TClass&gt;</strong>(<span title="System.object">object</span> alg)
		</h4>
		<div class="content">Creates a generator by non-deterministically initializing its state. <p></p> The source of the non-determinism will be platform- and time-dependent. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> alg
						</dt>
						<dd>(optional) the RNG algorithm. If None, it will be auto-selected. See
`__init__` for its possible values. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="tensorflow.random.experimental.TClass">TClass</span></code>
					</dt>
					<dd>The new generator. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="from_seed_dyn``1" class="method">
		<h4>
			<span title="System.object">object</span> <strong>from_seed_dyn&lt;TClass&gt;</strong>(<span title="System.object">object</span> seed, <span title="System.object">object</span> alg)
		</h4>
		<div class="content">Creates a generator from a seed. <p></p> A seed is a 1024-bit unsigned integer represented either as a Python
integer or a vector of integers. Seeds shorter than 1024-bit will be
padded. The padding, the internal structure of a seed and the way a seed
is converted to a state are all opaque (unspecified). The only semantics
specification of seeds is that two different seeds are likely to produce
two independent generators (but no guarantee). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> seed
						</dt>
						<dd>the seed for the RNG. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> alg
						</dt>
						<dd>(optional) the RNG algorithm. If None, it will be auto-selected. See
`__init__` for its possible values. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The new generator. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="from_seed``1" class="method">
		<h4>
			<span title="tensorflow.random.experimental.TClass">TClass</span> <strong>from_seed&lt;TClass&gt;</strong>(<span title="System.Nullable<int>">Nullable&lt;int&gt;</span> seed, <span title="System.Nullable<int>">Nullable&lt;int&gt;</span> alg)
		</h4>
		<div class="content">Creates a generator from a seed. <p></p> A seed is a 1024-bit unsigned integer represented either as a Python
integer or a vector of integers. Seeds shorter than 1024-bit will be
padded. The padding, the internal structure of a seed and the way a seed
is converted to a state are all opaque (unspecified). The only semantics
specification of seeds is that two different seeds are likely to produce
two independent generators (but no guarantee). 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> seed
						</dt>
						<dd>the seed for the RNG. 
						</dd>
						<dt>
							<code><span title="System.Nullable<int>">Nullable&lt;int&gt;</span></code> alg
						</dt>
						<dd>(optional) the RNG algorithm. If None, it will be auto-selected. See
`__init__` for its possible values. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="tensorflow.random.experimental.TClass">TClass</span></code>
					</dt>
					<dd>The new generator. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="from_state_dyn``1" class="method">
		<h4>
			<span title="System.object">object</span> <strong>from_state_dyn&lt;TClass&gt;</strong>(<span title="System.object">object</span> state, <span title="System.object">object</span> alg)
		</h4>
		<div class="content">Creates a generator from a state. <p></p> See `__init__` for description of `state` and `alg`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> state
						</dt>
						<dd>the new state. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> alg
						</dt>
						<dd>the RNG algorithm. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The new generator. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="from_state``1" class="method">
		<h4>
			<span title="tensorflow.random.experimental.TClass">TClass</span> <strong>from_state&lt;TClass&gt;</strong>(<span title="System.object">object</span> state, <span title="System.object">object</span> alg)
		</h4>
		<div class="content">Creates a generator from a state. <p></p> See `__init__` for description of `state` and `alg`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> state
						</dt>
						<dd>the new state. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> alg
						</dt>
						<dd>the RNG algorithm. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="tensorflow.random.experimental.TClass">TClass</span></code>
					</dt>
					<dd>The new generator. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	
	<h3 class="section">Public properties</h3>

	<div id="algorithm" class="method">
		<h4>
			<span title="System.Nullable<int>">Nullable&lt;int&gt;</span> <strong>algorithm</strong> get; 
		</h4>
		<div class="content">The RNG algorithm. 

		</div>
	</div>
	<div id="algorithm_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>algorithm_dyn</strong> get; 
		</h4>
		<div class="content">The RNG algorithm. 

		</div>
	</div>
	<div id="key" class="method">
		<h4>
			<span title="System.object">object</span> <strong>key</strong> get; 
		</h4>
		<div class="content">The 'key' part of the state of a counter-based RNG. <p></p> For a counter-base RNG algorithm such as Philox and ThreeFry (as
described in paper 'Parallel Random Numbers: As Easy as 1, 2, 3'
[https://www.thesalmons.org/john/random123/papers/random123sc11.pdf]),
the RNG state consists of two parts: counter and key. The output is
generated via the formula: output=hash(key, counter), i.e. a hashing of
the counter parametrized by the key. Two RNGs with two different keys can
be thought as generating two independent random-number streams (a stream
is formed by increasing the counter). 

		</div>
	</div>
	<div id="key_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>key_dyn</strong> get; 
		</h4>
		<div class="content">The 'key' part of the state of a counter-based RNG. <p></p> For a counter-base RNG algorithm such as Philox and ThreeFry (as
described in paper 'Parallel Random Numbers: As Easy as 1, 2, 3'
[https://www.thesalmons.org/john/random123/papers/random123sc11.pdf]),
the RNG state consists of two parts: counter and key. The output is
generated via the formula: output=hash(key, counter), i.e. a hashing of
the counter parametrized by the key. Two RNGs with two different keys can
be thought as generating two independent random-number streams (a stream
is formed by increasing the counter). 

		</div>
	</div>
	<div id="PythonObject" class="method">
		<h4>
			<span title="System.object">object</span> <strong>PythonObject</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="state" class="method">
		<h4>
			<a href="../tensorflow.compat.v2/Variable.htm">Variable</a> <strong>state</strong> get; 
		</h4>
		<div class="content">The internal state of the RNG. 

		</div>
	</div>
	<div id="state_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>state_dyn</strong> get; 
		</h4>
		<div class="content">The internal state of the RNG. 

		</div>
	</div>
	</section>
	</article><footer>
	<span id="version">Built from v1.15.0.0 of LostTech.TensorFlow</span>
	<span id="docu-link">
		Generated by <a href="http://docu.jagregory.com">docu</a>
	</span>
</footer>
  </body>
</html>