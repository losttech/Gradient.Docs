<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    <title>MetricSpec - LostTech.TensorFlow Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body>
  	<header><h1>LostTech.TensorFlow : API Documentation</h1>
	</header>

    <nav id="namespaces">
      <iframe src="../namespaces.htm"></iframe>
    </nav><nav id="types">
  <h2 class="fixed">Types in tensorflow.contrib.learn</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../tensorflow.contrib.learn/BaseEstimator.htm">BaseEstimator</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/ClusterConfig.htm">ClusterConfig</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/DNNClassifier.htm">DNNClassifier</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/DNNEstimator.htm">DNNEstimator</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/DNNLinearCombinedClassifier.htm">DNNLinearCombinedClassifier</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/DNNLinearCombinedEstimator.htm">DNNLinearCombinedEstimator</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/DNNLinearCombinedRegressor.htm">DNNLinearCombinedRegressor</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/DNNRegressor.htm">DNNRegressor</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/DynamicRnnEstimator.htm">DynamicRnnEstimator</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/Environment.htm">Environment</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/Estimator.htm">Estimator</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/Evaluable.htm">Evaluable</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/Experiment.htm">Experiment</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/ExportStrategy.htm">ExportStrategy</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/GraphRewriteSpec.htm">GraphRewriteSpec</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/Head.htm">Head</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IBaseEstimator.htm">IBaseEstimator</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IClusterConfig.htm">IClusterConfig</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IDNNClassifier.htm">IDNNClassifier</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IDNNEstimator.htm">IDNNEstimator</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IDNNLinearCombinedClassifier.htm">IDNNLinearCombinedClassifier</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IDNNLinearCombinedEstimator.htm">IDNNLinearCombinedEstimator</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IDNNLinearCombinedRegressor.htm">IDNNLinearCombinedRegressor</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IDNNRegressor.htm">IDNNRegressor</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IDynamicRnnEstimator.htm">IDynamicRnnEstimator</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IEnvironment.htm">IEnvironment</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IEstimator.htm">IEstimator</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IEvaluable.htm">IEvaluable</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IExperiment.htm">IExperiment</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IExportStrategy.htm">IExportStrategy</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IGraphRewriteSpec.htm">IGraphRewriteSpec</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IHead.htm">IHead</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IInputFnOps.htm">IInputFnOps</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IKMeansClustering.htm">IKMeansClustering</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/ILinearClassifier.htm">ILinearClassifier</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/ILinearEstimator.htm">ILinearEstimator</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/ILinearRegressor.htm">ILinearRegressor</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IMetricKey.htm">IMetricKey</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IMetricSpec.htm">IMetricSpec</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IModeKeys.htm">IModeKeys</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IModelFnOps.htm">IModelFnOps</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/INanLossDuringTrainingError.htm">INanLossDuringTrainingError</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/INotFittedError.htm">INotFittedError</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/InputFnOps.htm">InputFnOps</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IPredictionKey.htm">IPredictionKey</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IPredictionType.htm">IPredictionType</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IProblemType.htm">IProblemType</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/IRunConfig.htm">IRunConfig</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/ISKCompat.htm">ISKCompat</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/ISVM.htm">ISVM</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/ITaskType.htm">ITaskType</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/ITrainable.htm">ITrainable</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/KMeansClustering.htm">KMeansClustering</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/learn.htm">learn</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/LinearClassifier.htm">LinearClassifier</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/LinearEstimator.htm">LinearEstimator</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/LinearRegressor.htm">LinearRegressor</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/MetricKey.htm">MetricKey</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/MetricSpec.htm" class="current">MetricSpec</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/ModeKeys.htm">ModeKeys</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/ModelFnOps.htm">ModelFnOps</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/NanLossDuringTrainingError.htm">NanLossDuringTrainingError</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/NotFittedError.htm">NotFittedError</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/PredictionKey.htm">PredictionKey</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/PredictionType.htm">PredictionType</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/ProblemType.htm">ProblemType</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/RunConfig.htm">RunConfig</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/SKCompat.htm">SKCompat</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/SVM.htm">SVM</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/TaskType.htm">TaskType</a>
        </li>
				<li>
            <a href="../tensorflow.contrib.learn/Trainable.htm">Trainable</a>
        </li>
		</ul>
	</div>
</nav>
	<article>
    <header>
		<p class="class"><strong>Type</strong> MetricSpec</p>
	</header>
	<section>
		<header>
		<p><strong>Namespace</strong> tensorflow.contrib.learn</p>
		<p><strong>Parent</strong> <a href="../LostTech.Gradient/PythonObjectContainer.htm">PythonObjectContainer</a></p>
		<p><strong>Interfaces</strong> <a href="../tensorflow.contrib.learn/IMetricSpec.htm">IMetricSpec</a></p>
		</header>
    <div class="sub-header">
			<div id="summary">MetricSpec connects a model to metric functions. <p></p> THIS CLASS IS DEPRECATED. See
[contrib/learn/README.md](https://www.tensorflow.org/code/tensorflow/contrib/learn/README.md)
for general migration instructions. <p></p> The MetricSpec class contains all information necessary to connect the
output of a `model_fn` to the metrics (usually, streaming metrics) that are
used in evaluation. <p></p> It is passed in the `metrics` argument of `Estimator.evaluate`. The
`Estimator` then knows which predictions, labels, and weight to use to call a
given metric function. <p></p> When building the ops to run in evaluation, an `Estimator` will call
`create_metric_ops`, which will connect the given `metric_fn` to the model
as detailed in the docstring for `create_metric_ops`, and return the metric. <p></p> Example: <p></p> Assuming a model has an input function which returns inputs containing
(among other things) a tensor with key "input_key", and a labels dictionary
containing "label_key". Let's assume that the `model_fn` for this model
returns a prediction with key "prediction_key". <p></p> In order to compute the accuracy of the "prediction_key" prediction, we
would add <p></p> ```
"prediction accuracy": MetricSpec(metric_fn=prediction_accuracy_fn,
prediction_key="prediction_key",
label_key="label_key")
``` <p></p> to the metrics argument to `evaluate`. `prediction_accuracy_fn` can be either
a predefined function in metric_ops (e.g., `streaming_accuracy`) or a custom
function you define. <p></p> If we would like the accuracy to be weighted by "input_key", we can add that
as the `weight_key` argument. <p></p> ```
"prediction accuracy": MetricSpec(metric_fn=prediction_accuracy_fn,
prediction_key="prediction_key",
label_key="label_key",
weight_key="input_key")
``` <p></p> An end-to-end example is as follows: <p></p> ```
estimator = tf.contrib.learn.Estimator(...)
estimator.fit(...)
_ = estimator.evaluate(
input_fn=input_fn,
steps=1,
metrics={
'prediction accuracy':
metric_spec.MetricSpec(
metric_fn=prediction_accuracy_fn,
prediction_key="prediction_key",
label_key="label_key")
})
``` 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#create_metric_ops">create_metric_ops</a></li>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#create_metric_ops">create_metric_ops</a></li>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#create_metric_ops">create_metric_ops</a></li>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#create_metric_ops">create_metric_ops</a></li>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#create_metric_ops_dyn">create_metric_ops_dyn</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#label_key">label_key</a></li>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#label_key_dyn">label_key_dyn</a></li>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#metric_fn">metric_fn</a></li>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#metric_fn_dyn">metric_fn_dyn</a></li>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#prediction_key">prediction_key</a></li>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#prediction_key_dyn">prediction_key_dyn</a></li>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#PythonObject">PythonObject</a></li>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#weight_key">weight_key</a></li>
				<li><a href="../tensorflow.contrib.learn/MetricSpec.htm#weight_key_dyn">weight_key_dyn</a></li>
			</ul>
		
	</div>
	
	<h3 class="section">Public instance methods</h3>

	<div id="create_metric_ops" class="method">
		<h4>
			<span title="System.object">object</span> <strong>create_metric_ops</strong>(<span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> inputs, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> labels, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> predictions)
		</h4>
		<div class="content">Connect our `metric_fn` to the specified members of the given dicts. <p></p> This function will call the `metric_fn` given in our constructor as follows: <p></p> ```
metric_fn(predictions[self.prediction_key],
labels[self.label_key],
weights=weights[self.weight_key])
``` <p></p> And returns the result. The `weights` argument is only passed if
`self.weight_key` is not `None`. <p></p> `predictions` and `labels` may be single tensors as well as dicts. If
`predictions` is a single tensor, `self.prediction_key` must be `None`. If
`predictions` is a single element dict, `self.prediction_key` is allowed to
be `None`. Conversely, if `labels` is a single tensor, `self.label_key` must
be `None`. If `labels` is a single element dict, `self.label_key` is allowed
to be `None`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> inputs
						</dt>
						<dd>A dict of inputs produced by the `input_fn` 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> labels
						</dt>
						<dd>A dict of labels or a single label tensor produced by the
`input_fn`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> predictions
						</dt>
						<dd>A dict of predictions or a single tensor produced by the
`model_fn`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The result of calling `metric_fn`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="create_metric_ops" class="method">
		<h4>
			<span title="System.object">object</span> <strong>create_metric_ops</strong>(<span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> inputs, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> labels, <span title="System.string">string</span> predictions)
		</h4>
		<div class="content">Connect our `metric_fn` to the specified members of the given dicts. <p></p> This function will call the `metric_fn` given in our constructor as follows: <p></p> ```
metric_fn(predictions[self.prediction_key],
labels[self.label_key],
weights=weights[self.weight_key])
``` <p></p> And returns the result. The `weights` argument is only passed if
`self.weight_key` is not `None`. <p></p> `predictions` and `labels` may be single tensors as well as dicts. If
`predictions` is a single tensor, `self.prediction_key` must be `None`. If
`predictions` is a single element dict, `self.prediction_key` is allowed to
be `None`. Conversely, if `labels` is a single tensor, `self.label_key` must
be `None`. If `labels` is a single element dict, `self.label_key` is allowed
to be `None`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> inputs
						</dt>
						<dd>A dict of inputs produced by the `input_fn` 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> labels
						</dt>
						<dd>A dict of labels or a single label tensor produced by the
`input_fn`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> predictions
						</dt>
						<dd>A dict of predictions or a single tensor produced by the
`model_fn`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The result of calling `metric_fn`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="create_metric_ops" class="method">
		<h4>
			<span title="System.object">object</span> <strong>create_metric_ops</strong>(<span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> inputs, <span title="System.string">string</span> labels, <span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span> predictions)
		</h4>
		<div class="content">Connect our `metric_fn` to the specified members of the given dicts. <p></p> This function will call the `metric_fn` given in our constructor as follows: <p></p> ```
metric_fn(predictions[self.prediction_key],
labels[self.label_key],
weights=weights[self.weight_key])
``` <p></p> And returns the result. The `weights` argument is only passed if
`self.weight_key` is not `None`. <p></p> `predictions` and `labels` may be single tensors as well as dicts. If
`predictions` is a single tensor, `self.prediction_key` must be `None`. If
`predictions` is a single element dict, `self.prediction_key` is allowed to
be `None`. Conversely, if `labels` is a single tensor, `self.label_key` must
be `None`. If `labels` is a single element dict, `self.label_key` is allowed
to be `None`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> inputs
						</dt>
						<dd>A dict of inputs produced by the `input_fn` 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> labels
						</dt>
						<dd>A dict of labels or a single label tensor produced by the
`input_fn`. 
						</dd>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<object, object>">IDictionary&lt;object, object&gt;</span></code> predictions
						</dt>
						<dd>A dict of predictions or a single tensor produced by the
`model_fn`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The result of calling `metric_fn`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="create_metric_ops" class="method">
		<h4>
			<span title="System.object">object</span> <strong>create_metric_ops</strong>(<span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span> inputs, <span title="System.string">string</span> labels, <span title="System.string">string</span> predictions)
		</h4>
		<div class="content">Connect our `metric_fn` to the specified members of the given dicts. <p></p> This function will call the `metric_fn` given in our constructor as follows: <p></p> ```
metric_fn(predictions[self.prediction_key],
labels[self.label_key],
weights=weights[self.weight_key])
``` <p></p> And returns the result. The `weights` argument is only passed if
`self.weight_key` is not `None`. <p></p> `predictions` and `labels` may be single tensors as well as dicts. If
`predictions` is a single tensor, `self.prediction_key` must be `None`. If
`predictions` is a single element dict, `self.prediction_key` is allowed to
be `None`. Conversely, if `labels` is a single tensor, `self.label_key` must
be `None`. If `labels` is a single element dict, `self.label_key` is allowed
to be `None`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.Collections.Generic.IDictionary<string, string>">IDictionary&lt;string, string&gt;</span></code> inputs
						</dt>
						<dd>A dict of inputs produced by the `input_fn` 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> labels
						</dt>
						<dd>A dict of labels or a single label tensor produced by the
`input_fn`. 
						</dd>
						<dt>
							<code><span title="System.string">string</span></code> predictions
						</dt>
						<dd>A dict of predictions or a single tensor produced by the
`model_fn`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The result of calling `metric_fn`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	<div id="create_metric_ops_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>create_metric_ops_dyn</strong>(<span title="System.object">object</span> inputs, <span title="System.object">object</span> labels, <span title="System.object">object</span> predictions)
		</h4>
		<div class="content">Connect our `metric_fn` to the specified members of the given dicts. <p></p> This function will call the `metric_fn` given in our constructor as follows: <p></p> ```
metric_fn(predictions[self.prediction_key],
labels[self.label_key],
weights=weights[self.weight_key])
``` <p></p> And returns the result. The `weights` argument is only passed if
`self.weight_key` is not `None`. <p></p> `predictions` and `labels` may be single tensors as well as dicts. If
`predictions` is a single tensor, `self.prediction_key` must be `None`. If
`predictions` is a single element dict, `self.prediction_key` is allowed to
be `None`. Conversely, if `labels` is a single tensor, `self.label_key` must
be `None`. If `labels` is a single element dict, `self.label_key` is allowed
to be `None`. 


			<div class="parameters">
				<h5>Parameters</h5>
				<dl>
						<dt>
							<code><span title="System.object">object</span></code> inputs
						</dt>
						<dd>A dict of inputs produced by the `input_fn` 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> labels
						</dt>
						<dd>A dict of labels or a single label tensor produced by the
`input_fn`. 
						</dd>
						<dt>
							<code><span title="System.object">object</span></code> predictions
						</dt>
						<dd>A dict of predictions or a single tensor produced by the
`model_fn`. 
						</dd>
				</dl>
			</div>

			<div class="return">

				<h5>Returns</h5>
				<dl>
					<dt>
						<code><span title="System.object">object</span></code>
					</dt>
					<dd>The result of calling `metric_fn`. 
					</dd>
				</dl>
			</div>

		</div>
	</div>
	
	
	<h3 class="section">Public properties</h3>

	<div id="label_key" class="method">
		<h4>
			<span title="System.string">string</span> <strong>label_key</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="label_key_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>label_key_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="metric_fn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>metric_fn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="metric_fn_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>metric_fn_dyn</strong> get; 
		</h4>
		<div class="content">Metric function. <p></p> This function accepts named args: `predictions`, `labels`, `weights`. It
returns a single `Tensor` or `(value_op, update_op)` pair. See `metric_fn`
constructor argument for more details. 

		</div>
	</div>
	<div id="prediction_key" class="method">
		<h4>
			<span title="System.string">string</span> <strong>prediction_key</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="prediction_key_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>prediction_key_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="PythonObject" class="method">
		<h4>
			<span title="System.object">object</span> <strong>PythonObject</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="weight_key" class="method">
		<h4>
			<span title="System.string">string</span> <strong>weight_key</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	<div id="weight_key_dyn" class="method">
		<h4>
			<span title="System.object">object</span> <strong>weight_key_dyn</strong> get; 
		</h4>
		<div class="content">

		</div>
	</div>
	</section>
	</article><footer>
	<span id="version">Built from v1.15.0.0 of LostTech.TensorFlow</span>
	<span id="docu-link">
		Generated by <a href="http://docu.jagregory.com">docu</a>
	</span>
</footer>
  </body>
</html>